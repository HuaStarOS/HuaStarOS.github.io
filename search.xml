<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot01:Hello,World</title>
    <url>/HuaStarOS.github.io/2020/12/17/SpringBoot01-Hello-World/</url>
    <content><![CDATA[<h2 id="SpringBoot是什么"><a href="#SpringBoot是什么" class="headerlink" title="SpringBoot是什么"></a>SpringBoot是什么</h2><hr>
<p>​    学过javaweb的知道，开发一个web应用，从最初开始就是写一个Servlet结合Tomcat, 然后再配置Servlet的请求地址，是要经历特别多的步骤；后来就用了框架SSH，再后来是SSM，到了现在的SpringBoot。</p>
<p>​    好，那什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说法是<strong>简化开发</strong>，<strong>约定大于配置</strong>，  **you can “just run”**，能迅速的开发web应用，几行代码开发一个http接口。</p>
<p>​    所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡<strong>“约定大于配置”</strong>，进而衍生出一些一站式的解决方案。</p>
<p>​     <strong>这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</strong></p>
<p>​     随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，各种配置文件配到人头秃。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</p>
<p>​     Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p>
<p>​    简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。是简化Spring应用开发的一个框架；整个Spring技术栈的一个大整合；J2EE开发的一站式解决方案；</p>
<h4 id="SpringBoot的优点"><a href="#SpringBoot的优点" class="headerlink" title="SpringBoot的优点"></a>SpringBoot的优点</h4><ul>
<li><p>可以创建独立的Spring应用程序，并且基于其Maven或Gradle插件，可以创建可执行的JARs和WARs；</p>
</li>
<li><p>内嵌Tomcat或Jetty等Servlet容器；</p>
</li>
<li><p>提供自动配置的“starter”项目对象模型（POMS）以简化Maven配置；</p>
</li>
<li><p>尽可能自动配置Spring容器；</p>
</li>
<li><p>提供准备好的特性，如指标、健康检查和外部化配置；</p>
</li>
<li><p>绝对没有代码生成，不需要XML配置。</p>
</li>
</ul>
<h2 id="Hello-Wrold"><a href="#Hello-Wrold" class="headerlink" title="Hello Wrold"></a>Hello Wrold</h2><hr>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>​    我们将学习如何快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，体验其结构简单、开发快速的特性。</p>
<p><code>环境准备</code></p>
<ul>
<li>java version 1.8</li>
<li>Maven-3.6.1</li>
<li>SpringBoot 2.x 最新版(现在最新是2.4.1)   </li>
</ul>
<p><code>开发工具</code></p>
<ul>
<li>IDEA 2020.1</li>
</ul>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>项目创建方式一：使用Spring Initializr 的 Web页面创建项目</p>
<ol>
<li><p>打开  <a href="https://start.spring.io/">https://start.spring.io/</a></p>
</li>
<li><p>填写项目信息</p>
</li>
<li><p>点击”Generate Project“按钮生成项目；下载此项目</p>
</li>
<li><p>解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p>
</li>
<li><p>如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p>
</li>
</ol>
<p>项目创建方式二：使用IDEA的直接创建项目</p>
<ol>
<li><p>创建一个新项目</p>
</li>
<li><p>选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p>
</li>
<li><p>填写项目信息</p>
</li>
<li><p>选择初始化的组件（初学勾选 Web 即可）</p>
</li>
<li><p>填写项目路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/project.png"></p>
</li>
</ol>
<h4 id="pom-xml文件分析"><a href="#pom-xml文件分析" class="headerlink" title="pom.xml文件分析"></a>pom.xml文件分析</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-01-helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-01-helloworld<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>qzh first springboot project<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web模块启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springBoot单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--打包插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="主程序类"><a href="#主程序类" class="headerlink" title="主程序类"></a>主程序类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qzh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qzh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 这个注解来标识一个类，说明这个一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01HelloworldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动Spring Boot 应用</span></span><br><span class="line">        SpringApplication.run(Springboot01HelloworldApplication.class,  args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="编写controller类，接收请求"><a href="#编写controller类，接收请求" class="headerlink" title="编写controller类，接收请求"></a>编写controller类，接收请求</h4><ol>
<li>在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到</li>
<li>在包中新建一个HelloController类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p>​    通过main方法启动项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/start_project.png"></p>
<p>访问<a href="http://localhost:8080/hello/hello%EF%BC%9A">http://localhost:8080/hello/hello：</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/project_hello.jpg"></p>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><hr>
<p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；</p>
<p>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。</p>
<p>图案可以到：<a href="https://www.bootschool.net/ascii-art%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8B%B7%E8%B4%9D%E5%88%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8D%B3%E5%8F%AF">https://www.bootschool.net/ascii-art这个网站生成，然后拷贝到文件中即可</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/banner.jpg"></p>
<p>启动项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/banner_start.jpg"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​    这是我第一次发布自己的技术博客，可能有些不足的地方。希望大家多多包涵。一起加油。</p>
<p>​    有些同学可能想知道我为什么没有先发关于SSM框架的博客。主要是SSM是我之前学习的，现在在学习SpringBoot，不过学习SSM的时候我都是手写笔记。在之后我会把SSM的博客也会慢慢发上来</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记01---什么是微服务架构</title>
    <url>/HuaStarOS.github.io/2021/01/04/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="什么是微服务架构"><a href="#什么是微服务架构" class="headerlink" title="什么是微服务架构"></a>什么是微服务架构</h2><p>​    “微服务架构”——这是一种“软件开发架构“。一种新的架构形式，我们在此引用ThoughtWorks 公司的首席科学家 <strong>Martin Fowler</strong> 于2014年提出的一段话：</p>
<p>​    原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p>
<p>​    汉化：<a href="https://blog.csdn.net/u013970991/article/details/53333921">https://blog.csdn.net/u013970991/article/details/53333921</a></p>
<p>​     微服务架构这种开发方法，<strong>是以开发一组小型服务的方式来开发一个独立的应用系统。其中每个小型服务都运行在自己的进程中，并采用HTTP资源API这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务，我们仅做最低限度的集中管理。</strong></p>
<p>​    上面这段话句句都是重点，可以说一句话就是一个技术点，</p>
<ol>
<li>比如<code>是以开发一组小型服务的方式来开发一个独立的应用系统</code>：指的就是用Spring Boot开发一个一个的微服务项目(即Spring Boot项目)。</li>
<li><code>其中每个小型服务都运行在自己的进程中</code>：指的就是每个小型服务都是相互独立的，互不影响。无论是在开发阶段或部署阶段都是独立的。不像我们之前的<strong>单体应用</strong>所有服务都是跑在一个进程里面当一个服务挂了整个应用都会出问题。</li>
<li><code>并采用HTTP资源API这样轻量的机制来相互通信</code>：指的就是每个小型服务要相互通信是采用<strong>HTTP</strong>来进行通信。要把所有微服务都能相互通信这样才能来构成一个完整的应用，通常采用基于<strong>HTTP</strong>协议的通信框架</li>
<li><code>这些服务围绕业务功能进行构建</code>：单一职责原则，每个微服务只负责一个业务功能</li>
<li><code>并能通过全自动的部署机制来进行独立部署</code>：<strong>全自动的部署机制</strong> 采用一站式的解决方案Spring Cloud进行部署。<strong>独立部署</strong> 一个微服务就是一个小项目可以直接运行起来。</li>
</ol>
<p>​    微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/microservice_framework.jpg"></p>
<h2 id="微服务架构与微服务"><a href="#微服务架构与微服务" class="headerlink" title="微服务架构与微服务"></a>微服务架构与微服务</h2><h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><p>​       一种新的架构形式，Martin Fowler 于2014年提出。</p>
<p>​       是以开发一组小型服务的方式来开发一个独立的应用系统。其中每个小型服务都运行在自己的进程中，并采用HTTP资源API这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具**(如Maven)**对其进行构建。</p>
<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>​        强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者 Model。IDEA 工具里面使用Maven开发的一个个独立的小Model，它具体是使用Spring Boot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p>
<h2 id="微服务架构优缺点"><a href="#微服务架构优缺点" class="headerlink" title="微服务架构优缺点"></a>微服务架构优缺点</h2><p>​    <strong>优点</strong></p>
<ul>
<li>单一职责原则；</li>
<li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li>
<li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li>
<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li>
<li>微服务能使用不同的语言开发；</li>
<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li>
<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li>
<li>微服务允许利用和融合最新技术；</li>
<li><strong>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合;</strong></li>
<li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</strong></li>
</ul>
<p>​    <strong>缺点</strong></p>
<ul>
<li>开发人员要处理分布式系统的复杂性；</li>
<li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li>
<li>系统部署依赖问题；</li>
<li>服务间通信成本问题；</li>
<li>数据一致性问题；</li>
<li>系统集成测试问题；</li>
<li>性能和监控问题；</li>
</ul>
<h2 id="微服务框架4个核心问题"><a href="#微服务框架4个核心问题" class="headerlink" title="微服务框架4个核心问题"></a>微服务框架4个核心问题</h2><ol>
<li><p><strong>服务很多，客户端怎么访问？</strong>     API 网关</p>
</li>
<li><p><strong>服务很多，服务之间怎么通信？</strong> HTTP,RPC通信</p>
</li>
<li><p><strong>服务这么多，这么治理？</strong>             注册和发现</p>
</li>
<li><p>**服务崩了怎么办？ **                        熔断机制</p>
</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>​    <strong>Spring Cloud</strong> 是微服务架构的<strong>一站式解决方案</strong> 。<strong>Spring Cloud是一种生态！</strong></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud-process.png"></p>
<h3 id="什么是Spring-Cloud"><a href="#什么是Spring-Cloud" class="headerlink" title="什么是Spring Cloud"></a>什么是Spring Cloud</h3><p>​    Spring官网：<a href="https://spring.io/">https://spring.io/</a></p>
<p>​    Spring Cloud是关注全局的微服务协调治理框架，它将Spring Boot开发的一个个单体微服务整合并管理起来，为各个微服务之间提供例如：配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、竞争选举、分布式会话、集群等等集成服务。Spring Cloud并没有重复造轮子，它只是将目前各家公司开发比较成熟，经得起考验的服务框架整合起来。屏蔽掉了复杂的配置和实现原理。<strong>给开发者留出一套简单易用，容易部署和维护的分布式系统开发包</strong></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud-platform.svg"></p>
<h3 id="Spring-Cloud特性"><a href="#Spring-Cloud特性" class="headerlink" title="Spring Cloud特性"></a>Spring Cloud特性</h3><ul>
<li>Distributed/versioned configuration  分布式/版本配置</li>
<li>Service registration and discovery  服务注册和发现</li>
<li>Routing 路由</li>
<li>Service-to-service calls   服务之间服务的调用</li>
<li>Load balancing  负载均衡</li>
<li>Circuit Breakers 断路器</li>
<li>Global locks 全局锁</li>
<li>Leadership election and cluster state  竞争选举和集群状态</li>
<li>Distributed messaging 分布式消息管理</li>
</ul>
<h3 id="三种主流的解决方案"><a href="#三种主流的解决方案" class="headerlink" title="三种主流的解决方案"></a>三种主流的解决方案</h3><ol>
<li>Spring cloud NetFlix</li>
</ol>
<ol start="2">
<li>Apache Dubbo Zookeeper 这个方案并不完善</li>
</ol>
<ol start="3">
<li>Spring cloud Alibaba</li>
</ol>
<h2 id="微服务技术栈有那些？"><a href="#微服务技术栈有那些？" class="headerlink" title="微服务技术栈有那些？"></a>微服务技术栈有那些？</h2><table>
<thead>
<tr>
<th align="center"><strong>微服务技术条目</strong></th>
<th align="center">落地技术</th>
</tr>
</thead>
<tbody><tr>
<td align="center">服务开发</td>
<td align="center">SpringBoot、Spring、SpringMVC等</td>
</tr>
<tr>
<td align="center">服务配置与管理</td>
<td align="center">Netfix公司的Archaius、阿里的Diamond等</td>
</tr>
<tr>
<td align="center">服务注册与发现</td>
<td align="center">Eureka、Consul、Zookeeper等</td>
</tr>
<tr>
<td align="center">服务调用</td>
<td align="center">Rest、PRC、gRPC</td>
</tr>
<tr>
<td align="center">服务熔断器</td>
<td align="center">Hystrix、Envoy等</td>
</tr>
<tr>
<td align="center">负载均衡</td>
<td align="center">Ribbon、Nginx等</td>
</tr>
<tr>
<td align="center">服务接口调用(客户端调用服务的简化工具)</td>
<td align="center">Fegin等</td>
</tr>
<tr>
<td align="center">消息队列</td>
<td align="center">Kafka、RabbitMQ、ActiveMQ等</td>
</tr>
<tr>
<td align="center">服务配置中心管理</td>
<td align="center">SpringCloudConfig、Chef等</td>
</tr>
<tr>
<td align="center">服务路由(API网关)</td>
<td align="center">Zuul、GateWay等</td>
</tr>
<tr>
<td align="center">服务监控</td>
<td align="center">Zabbix、Nagios、Metrics、Specatator等</td>
</tr>
<tr>
<td align="center">全链路追踪</td>
<td align="center">Zipkin、Brave、Dapper等</td>
</tr>
<tr>
<td align="center">数据流操作开发包</td>
<td align="center">SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td>
</tr>
<tr>
<td align="center">时间消息总栈</td>
<td align="center">SpringCloud Bus</td>
</tr>
<tr>
<td align="center">服务部署</td>
<td align="center">Docker、OpenStack、Kubernetes等</td>
</tr>
</tbody></table>
<h2 id="关于Cloud各种组件的停更-升级-替换"><a href="#关于Cloud各种组件的停更-升级-替换" class="headerlink" title="关于Cloud各种组件的停更/升级/替换"></a>关于Cloud各种组件的停更/升级/替换</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud01/1.jpg"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记---第一个程序</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是MVVM</h2><p>​    MVVM（Model-View-ViewModel）是一种软件设计模式，由微软WPF（用于替代WinForm，以前就是用这个技术开发桌面应用程序的）和Silverlight（类似于Java Applet，简单点说就是在浏览器上运行WPF）的架构师Ken Cooper和Ted Peters开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。由John Gossman（同样也是WPF和Sliverlight的架构师）与2005年在他的博客上发表。</p>
<p>  MVVM源自于经典的MVC（Model-View-Controller）模式。MVVM的核心是ViewModel层，负责转换Model中的数据对象来让数据变得更容易管理和使用。其作用如下：</p>
<ul>
<li><p>该层向上与视图层进行双向数据绑定</p>
</li>
<li><p>向下与Model层通过接口请求进行数据交互</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/mvvm.jpg"></p>
</li>
</ul>
<hr>
<h2 id="为什么要使用MVVM"><a href="#为什么要使用MVVM" class="headerlink" title="为什么要使用MVVM"></a>为什么要使用MVVM</h2><p>MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大好处</p>
<ul>
<li><strong>低耦合</strong>：视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>
<li><strong>可复用</strong>：你可以把一些视图逻辑放在一个ViewModel里面，让很多View重用这段视图逻辑。</li>
<li><strong>独立开发</strong>：开发人员可以专注于业务逻辑和数据的开发（ViewMode），设计人员可以专注于页面设计。</li>
<li><strong>可测试</strong>：界面素来是比较难以测试的，而现在测试可以针对ViewModel来写。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/mvvm2.jpg"></p>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>  View是视图层， 也就是用户界面。前端主要由HTML和CSS来构建， 为了更方便地展现vi ew Model或者Model层的数据， 已经产生了各种各样的前后端模板语言， 比如FreeMarker，Thymeleaf等等， 各大MVVM框架如Vue.js.Angular JS， EJS等也都有自己用来构建用户界面的内置模板语言。</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>  Model是指数据模型， 泛指后端进行的各种业务逻辑处理和数据操控， 主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的接口规则</p>
<h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>  ViewModel是由前端开发人员组织生成和维护的视图数据层。在这一层， 前端开发者对从后端获取的Model数据进行转换处理， 做二次封装， 以生成符合View层使用预期的视图数据模型。<br>  需要注意的是View Model所封装出来的数据模型包括视图的状态和行为两部分， 而Model层的数据模型是只包含状态的</p>
<ul>
<li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态(展示)</li>
<li>页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为(交互)</li>
</ul>
<p>  视图状态和行为都封装在了View Model里。这样的封装使得View Model可以完整地去描述View层。由于实现了双向绑定， View Model的内容会实时展现在View层， 这是激动人心的， 因为前端开发者再也不必低效又麻烦地通过操纵DOM去更新视图。<br>  MVVM框架已经把最脏最累的一块做好了， 我们开发者只需要处理和维护View Model， 更新数据视图就会自动得到相应更新，真正实现<code>事件驱动编程</code>。<br>  View层展现的不是<code>Model</code>层的数据， 而是<code>ViewModel</code>的数据， 由<code>ViewModel</code>负责与<code>Model</code>层交互， 这就<strong>完全解耦了View层和Model层， 这个解耦是至关重要的， 它是前后端分离方案实施的重要一环。</strong></p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>​    Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<h3 id="MVVM模式的实现者"><a href="#MVVM模式的实现者" class="headerlink" title="MVVM模式的实现者"></a>MVVM模式的实现者</h3><ul>
<li>Model：模型层， 在这里表示JavaScript对象</li>
<li>View：视图层， 在这里表示DOM(HTML操作的元素)</li>
<li>ViewModel：连接视图和数据的中间件， Vue.js就是MVVM中的View Model层的实现者</li>
</ul>
<p>  在MVVM架构中， 是不允许数据和视图直接通信的， 只能通过ViewModel来通信， 而View Model就是定义了一个Observer观察者</p>
<ul>
<li>ViewModel能够观察到数据的变化， 并对视图对应的内容进行更新</li>
<li>ViewModel能够监听到视图的变化， 并能够通知数据发生改变</li>
</ul>
<p>  至此， 我们就明白了， Vue.js就是一个MV VM的实现者， 他的核心就是实现了DOM监听与数据绑定</p>
<h3 id="为什么要使用Vue-js"><a href="#为什么要使用Vue-js" class="headerlink" title="为什么要使用Vue.js"></a>为什么要使用Vue.js</h3><ul>
<li>轻量级， 体积小是一个重要指标。Vue.js压缩后有只有20多kb(Angular压缩后56kb+，React压缩后44kb+)</li>
<li>移动优先。更适合移动端， 比如移动端的Touch事件</li>
<li>易上手，学习曲线平稳，文档齐全</li>
<li>吸取了Angular(模块化) 和React(虚拟DOＭ) 的长处， 并拥有自己独特的功能，如：计算属性</li>
<li>开源，社区活跃度高</li>
<li>……</li>
</ul>
<h2 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h2><p>  </p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><ul>
<li>开发版本<ul>
<li>包含完整的警告和调试模式：https：//yuejs.org/js/vue.js</li>
<li>删除了警告， 30.96KBmin+gzip：https：//vuejs.org/js/vue.min.js</li>
</ul>
</li>
<li>CDN<ul>
<li><code>&lt;script src=“https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js”&gt;&lt;/script&gt;</code></li>
<li><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><ol>
<li><p><strong>创建一个HTML文件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>引入Vue.js</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建一个Vue实例</strong>=</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
</li>
</ol>
<ul>
<li><p>​    el 属性</p>
<p>​        用来指示vue编译器从什么地方开始解析 vue的语法，可以说是一个占位符。<br>​        相当于一个容器，跟上面的div id = “app”做关联，从此以后上面div id = “app”里面的内容要通过vue来渲染,都要经过vue处理才能看得到上面div里面的内容</p>
</li>
<li><p>date属性</p>
<p>​        用来组织从view中抽象出来的属性，可以说将视图的数据抽象出来存放在data中。</p>
</li>
</ul>
<ol start="4">
<li><p><strong>将数据绑定到页面标签中</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      &#123;&#123;message&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p><strong>完整的代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      &#123;&#123;message&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>为了能够更直观的体验Vue带来的数据绑定功能， 我们需要在浏览器测试一番， 操作流程如下：</p>
<ol>
<li><p>在浏览器上运行第一个Vue应用程序， 进入开发者工具</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/result1.jpg"></p>
</li>
<li><p>在控制台输入vm.message=”Hello”， 然后回车， 你会发现浏览器中显示的内容会直接变成Hello</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/result2.jpg"></p>
</li>
<li><p>此时就可以在控制台直接输入vm.message来修改值， 中间是可以省略data的， 在这个操作中， 我并没有主动操作DOM， 就让页面的内容发生了变化， 这就是借助了Vue的数据绑定功能实现的； MVVM模式中要求View Model层就是使用观察者模式来实现数据的监听与绑定， 以做到数据与视图的快速响应。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记02---基本语法</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>​    我们已经成功创建了第一个Vue应用!看起来这跟渲染一个字符串模板非常类似， 但是Vue在背后做了大量工作。现在数据和DOM已经被建立了关联， 所有东西都是响应式的。我们在控制台操作对象属性，界面可以实时更新!</p>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>我们还可以使用v-bind来绑定元素特性!</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">       鼠标悬停几秒钟</span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    你看到的v-bind等被称为指令。指令带有前缀v以表示它们是Vue提供的特殊特性。v-bind:title=”message”该指令的意思是：“将这个元素节点的title属性和 Vue实例的message属性绑定在一起”。当message属性修改的时候title属性也会随之改变</p>
<p>​    可以打开浏览器的控制台， 输入 vm.message=‘新消息’，就可以对title属性进行了更新。</p>
<h3 id="v-if、v-else"><a href="#v-if、v-else" class="headerlink" title="v-if、v-else"></a>v-if、v-else</h3><p>​    这几个指令是用来进行条件判断的，怎么使用我就不说了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--条件满足就显示出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            tag : <span class="literal">true</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<ol>
<li><p>在浏览器上运行，打开控制台!</p>
</li>
<li><p>在控制台输入<code>vm.tag=false</code>然后回车，你会发现浏览器中显示的内容会直接变成B</p>
</li>
</ol>
<h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--条件满足就显示出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;D&#x27;&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;A&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意:</p>
<pre><code>1. `===`三个等号在JavaScript中表示绝对等于(就是数据与类型都要相等)
2. `v-else` 元素必须紧跟在带 `v-if` 或者 `v-else-if` 的元素的后面，否则它将不会被识别。</code></pre>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>​    我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.message&#125;&#125;&#125;</span><br><span class="line">    	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&quot;hhhhhhhhhh&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&quot;123132132&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&quot;8521452&quot;</span>&#125;,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>​    在控制台输入<code>vm.items.push(&#123;message：&#39;世界和平&#39;&#125;)</code>，尝试追加一条数据，你会发现浏览器中显示的内容会增加一条<code>世界和平</code></p>
<h3 id="v-on-监听事件"><a href="#v-on-监听事件" class="headerlink" title="v-on 监听事件"></a>v-on 监听事件</h3><p>​    可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- `sayHi` 是在下面定义的方法名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hhhhh&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//方法必须定义在Vue中的methods中，否则无法绑定,在通过V-on绑定事件</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//都是通过Vue对象来操作标签的</span></span></span><br><span class="line"><span class="javascript">            sayHi: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.message);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>​    Vue还有一些基本的使用方式， 大家有需要的可以再跟着官方文档看看， 因为这些基本的指令只看名称我们也可以知道是用来做什么的。一些具体的使用方式还是要借助官方文档。加油</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记04---组件</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h2><p>​    组件是可复用的<code>Vue</code>实例， 说白了就是一组可以重复使用的模板， 跟<code>JSTL</code>的自定义标签、<code>Thymeleal</code>的<code>th:fragment</code>等框架有着异曲同工之妙，通常一个应用会以一棵嵌套的组件树的形式来组织：</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/component.jpg"></p>
<h3 id="第一个Vue组件"><a href="#第一个Vue组件" class="headerlink" title="第一个Vue组件"></a>第一个Vue组件</h3><p>​    注意：在实际开发中，我们并不会用以下方式开发组件，而是采用<code>vue-cli</code>创建，<code>vue</code>模板文件的方式开发，以下方法只是为了让大家理解什么是组件。<br> <strong>使用<code>Vue.component()</code>方法注册组件，格式如下：</strong></p>
<pre><code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件就是自定义标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">qzh</span>&gt;</span><span class="tag">&lt;/<span class="name">qzh</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*自定义Vue组件Component*/</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*组件就是自定义标签*/</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;qzh&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模板</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre>
<p> 说明：</p>
<ul>
<li><code>Vue.component()</code>：注册组件</li>
<li><code>qzh</code>：自定义组件的名字</li>
<li><code>template</code>：组件的模板,即要显示的HTML元素</li>
</ul>
<h3 id="用props属性传递参数"><a href="#用props属性传递参数" class="headerlink" title="用props属性传递参数"></a>用<code>props</code>属性传递参数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件就是自定义标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">qzh</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:message</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">qzh</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*自定义Vue组件Component*/</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*组件就是自定义标签*/</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;qzh&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//用props接收参数，不用则无法接收参数</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;message&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模板</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">message</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            items: [<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;HTML&quot;</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：</p>
<ul>
<li><code>v-for=&quot;item in items&quot;</code>：遍历<code>Vue</code>实例中名为<code>items</code>的数组，并创建同等数量的组件</li>
<li><code>v-bind:message=&quot;item&quot;</code>：将遍历的<code>item</code>项绑定到组件中<code>props</code>定义名为<code>message</code>属性上；</li>
</ul>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记03---表单输入绑定</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="什么是双向数据绑定"><a href="#什么是双向数据绑定" class="headerlink" title="什么是双向数据绑定"></a>什么是双向数据绑定</h2><p>​    Vue.js是一个MVVM框架， 即<strong>数据双向绑定， 即当数据发生变化的时候， 视图也就发生变化， 当视图发生变化的时候，数据也会跟着同步变化</strong>。这也算是Vue.js的精髓之处了。  </p>
<p>​    值得注意的是，我们所说的数据双向绑定，一定是对于UI控件来说的非UI控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用vuex那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>
<h3 id="为什么要实现数据的双向绑定"><a href="#为什么要实现数据的双向绑定" class="headerlink" title="为什么要实现数据的双向绑定"></a>为什么要实现数据的双向绑定</h3><p>​        在<code>Vue.js</code>中，如果使用<code>vuex</code>， 实际上数据还是单向的， 之所以说是数据双向绑定，这是用的UI控件来说， 对于我们处理表单， <code>Vue.js</code>的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>
<h2 id="在表单中实现双向数据绑定"><a href="#在表单中实现双向数据绑定" class="headerlink" title="在表单中实现双向数据绑定"></a>在表单中实现双向数据绑定</h2><p>​    你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<p>​    <code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
<h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span> &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          message: <span class="string">&quot;123&quot;</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    通过<code> v-model=&quot;message&quot;</code>将Vue实例中的message跟文本输入框绑定，实现双向数据绑定。当数据发生变化的时候， 视图也就发生变化， 当视图发生变化的时候，数据也会跟着同步变化</p>
<h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       &#123;&#123;message&#125;&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          message: <span class="string">&quot;Hello World&quot;</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    性别:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">         &#123;&#123;gender&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            gender: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;select&quot;</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;C&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;hhh&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          message: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​     我只这里列举了一些例子。其他的表单项怎么绑定我就不再赘述了。还是那句话，不懂就看看官方文档。加油！</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记06---计算属性、内容分发、自定义事件</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>​    计算属性的重点突出在<code>属性</code>两个字上(属性是名词)，首先它是个<code>属性</code>其次这个属性有<code>计算</code>的能力(计算是动词)，这里的<code>计算</code>就是个函数：简单点说，它就是一个能够将计算结果缓存起来的属性(将行为转化成了静态的属性)，仅此而已；可以想象为缓存!</p>
<p>​    作用：</p>
<ol>
<li>  减少模板中的计算逻辑</li>
<li> <code>数据缓存</code>。当我们的数据没有变化时，不在执行计算的过程</li>
<li> 依赖固定的数据类型（响应式数据），不能是普通的传入的一个全局数据</li>
</ol>
<p>  <strong>代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime1:&#123;&#123;currentTime1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime2:&#123;&#123;currentTime2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1.导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            currentTime1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();<span class="comment">//返回一个时间戳</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line"><span class="javascript">            currentTime2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//计算属性：methods，computed方法名不能重名，重名之后，只会调用methods的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();<span class="comment">//返回一个时间戳</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：methods和computed里的东西不能重名<br>说明：</p>
<ul>
<li>methods：定义方法， 调用方法使用currentTime1()， 需要带括号</li>
<li>computed：定义计算属性， 调用属性使用currentTime2， 不需要带括号：this.message是为了能够让currentTime2观察到数据变化而变化</li>
<li>如何在方法中的值发生了变化，则缓存就会刷新!可以在控制台使用<code>vm.message=&quot;world&quot;</code>， 改变下数据的值，再次测试观察效果!<br><strong>结论：</strong><br> 调用方法时，每次都需要讲行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢?此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这点，<strong>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销；</strong></li>
</ul>
<h2 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h2><p>​    为了让组件可以组合，需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 <strong>内容分发</strong> (或 “transclusion” )。在<code>Vue.js</code>中我们使用<code>&lt;slot&gt;</code>元素作为承载分发内容的出口，作者称其为<strong>插槽</strong>，可以应用在组合组件的场景中；</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>​    比如在下面的例子中制作一个列表组件(todo)，该列表组件由标题(title)和列表项(item)这两个组件组成,这三个组件是相互独立的，那怎么样才能将它们组合在一起呢？</p>
<p>​    <strong>第一步定义一个列表组件</strong></p>
<pre><code>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo&quot;, &#123;</span><br><span class="line">    /*slot中的name属性给这个slot命名*/</span><br><span class="line">     template:&#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>大话编程<span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span>\</span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span>\</span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span>\</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line">&#125;);   </span><br></pre></td></tr></table></figure></code></pre>
<p>​    <strong>第二步,如果我们还是这样子写，那么还是静态的数据。那怎么实现动态绑定呢？我们可以留下一个插槽</strong></p>
<ol>
<li>在列表组件中的<code>template</code>中留出插槽，即<code>slot</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//slot插槽</span><br><span class="line">Vue.component(&quot;todo&quot;, &#123;</span><br><span class="line">    /*slot中的name属性给这个slot命名*/</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span><br><span class="line">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义一个名为todo-title的标题组件 和 todo-item的列表组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-title&quot;, &#123;</span><br><span class="line">     props: [&#x27;title&#x27;],</span><br><span class="line">     template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-item&quot;, &#123;</span><br><span class="line">    props: [&#x27;item&#x27;,&#x27;index&#x27;],</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建Vue实例并初始化数据</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-item&quot;, &#123;</span><br><span class="line">    props: [&#x27;item&#x27;,&#x27;index&#x27;],</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>通过插槽<code>slot</code>将这三个组件组合起来</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot=&quot;xxx&quot;表示插入哪个插槽 --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- slot=&quot;title&quot;表示插入name为title插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：这样我们将todo-title和todo-item组件分发到了todo组件的title和item插槽中</p>
<p><strong>完整代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot=&quot;title&quot;表示插入哪个插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//slot插槽</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*slot中的name属性给这个slot命名*/</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-item&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模板中的标签只能绑定当前组件中定义的方法</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml">----</span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;      </span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;大话编程&quot;</span>,</span></span><br><span class="line"><span class="javascript">            items: [<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;PHP&quot;</span>]</span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>​    通过以上代码不难发现，数据在Vue的实例中， 但是如何在组件操作Vue实例中的数据呢？比如在组件删除Vue实例中的数据。此时就涉及到参数传递与事件分发了， Vue为我们提供了自定义事件的功能很好的帮助我们解决了这个问题； 使用this.$emit(‘自定义事件名’， 参数) 。</p>
<ol>
<li>在Vue实例中定义名为removeltems的方法来删除数据。为什么要定义方法来删除？因为Vue实例才能操作Vue中的数据。因此在定义方法来进行删除操作</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">       el: &quot;#app&quot;,</span><br><span class="line">       data: &#123;</span><br><span class="line">           title: &quot;大话编程&quot;,</span><br><span class="line">           items: [&quot;Java&quot;, &quot;C++&quot;, &quot;PHP&quot;]</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">           removeItem: function (index) &#123;</span><br><span class="line">               //删除当前下标的元素</span><br><span class="line">               console.log(&quot;删除了&quot;+this.items[index])</span><br><span class="line">               this.items.splice(index,1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改todo-item组件的代码，增加一个删除按钮，并且绑定事件！</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-item&quot;, &#123;</span><br><span class="line">    props: [&#x27;item&#x27;,&#x27;index&#x27;],</span><br><span class="line">    //模板中的标签只能绑定当前组件中定义的方法</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove2&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        remove2: function (index) &#123;</span><br><span class="line">            //this.$emit自定义事件分发</span><br><span class="line">            this.$emit(&#x27;remove&#x27;,index)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改todo-item组件的HTML代码，增加一个自定义事件，比如叫remove，然后绑定到vue的方法！</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItem(index)&quot;</span> <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 说明：</p>
<p>​    自定义的remove事件绑定到Vue实例中的removeItem方法，在todo-item组件中的删除按钮的点击事件中调用了<code> this.$emit(&#39;remove&#39;,index)</code>。这样就可以在组件实现删除Vue实例中的数据了</p>
<p><strong>完整代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot=&quot;title&quot;表示插入哪个插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItem(index)&quot;</span> <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//slot插槽</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*slot中的name属性给这个slot命名*/</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-item&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模板中的标签只能绑定当前组件中定义的方法</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml">----</span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove2&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            remove2: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//this.$emit自定义事件分发</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>,index)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;大话编程&quot;</span>,</span></span><br><span class="line"><span class="javascript">            items: [<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;PHP&quot;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            removeItem: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//删除当前下标的元素</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;删除了&quot;</span>+<span class="built_in">this</span>.items[index])</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.items.splice(index,<span class="number">1</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>调用过程</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/process.jpg"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​    <strong>Vue入门小结</strong></p>
<p>  常用的属性：</p>
<ul>
<li>v-if</li>
<li>v-else-if</li>
<li>v-else</li>
<li>v-for</li>
<li>v-on绑定事件，简写 @</li>
<li>v-model数据双向绑定</li>
<li>v-bind给巨剑绑定参数，简写 :</li>
</ul>
<p>  组件化：</p>
<ul>
<li>组合组件slot插槽</li>
<li>组件内部绑定事件需要使用到<code>this.$emit(&quot;事件名&quot;,参数);</code></li>
<li>计算属性的特色，缓存计算数据</li>
</ul>
<p> </p>
<p><strong>说明</strong></p>
<p>​    Vue的开发都是要基于NodeJS，实际开发采用Vue-cli脚手架开发，vue-router路由，vuex做状态管理；Vue UI，界面我们一般使用ElementUI（饿了么出品），或者ICE（阿里巴巴出品）来快速搭建前端项目</p>
<ul>
<li><a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></li>
<li><a href="https://ice.work/">https://ice.work/</a></li>
</ul>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记05---Axios异步通信</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-Axios%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="什么是Axios"><a href="#什么是Axios" class="headerlink" title="什么是Axios"></a>什么是Axios</h2><p>​        Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中的异步通信框架， 它的主要作用就是实现AJAX异步通信。其功能特点</p>
<ul>
<li>从浏览器中创建 <code>XMLHttpRequests</code></li>
<li>从 node.js 创建 <code>http</code> 请求</li>
<li>支持 Promise API (JS中链式编程)</li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换 JSON 数据</li>
<li>客户端支持防御 XSRF(跨站请求伪造)</li>
</ul>
<p>GitHub：<a href="https://github.com/axios/axios">https://github.com/axios/axios</a><br>中文文档：<a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p>
<h3 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h3><p>​    由于<code>Vue.js</code>是一个视图层框架并且作者(尤雨溪) 严格准守SoC(关注度分离原则)所以<code>Vue.js</code>并不包含AJAX的通信功能， 为了解决通信问题， 作者单独开发了一个名为<code>vue-resource</code>的插件， 不过在进入2.0版本以后停止了对该插件的维护并推荐了<code>Axios</code>框架。少用jQuery， 因为它操作Dom太频繁!</p>
<h2 id="第一个Axios应用程序"><a href="#第一个Axios应用程序" class="headerlink" title="第一个Axios应用程序"></a>第一个Axios应用程序</h2><p> web开发中传输的数据大部分都是采用JSON格式， 可以先在项目里模拟一段JSON数据， 数据内容如下：创建一个名为data.json的文件并填入上面的内容， 放在项目的根目录下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;qzh&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://baidu.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>: <span class="string">&quot;南山&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>:<span class="string">&quot;深圳&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;B站&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.bilibili.com/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;百度&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.address.country&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;info.url&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//data()方法用来接收axios请求的返回的数据,data属性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//返回接收的参数的格式，必须和json字符串一样，需要的数据就写上不需要的不用写</span></span></span><br><span class="line">                info: &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="literal">null</span>,</span></span><br><span class="line">                    address: &#123;</span><br><span class="line"><span class="javascript">                        street: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        city: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        country: <span class="literal">null</span>,</span></span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="javascript">                    url: <span class="literal">null</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//钩子函数:相当于回调函数在程序运行的过程中执行</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//链式编程 ES6新特性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&#x27;../data.json&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="built_in">this</span>.info = response.data));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li><p>在这里使用了<code>v-bind</code>将<code>a:href</code>的属性值与Vue实例中的数据进行绑定</p>
</li>
<li><p>使用axios框架的get方法请求AJAX并自动将数据封装进了Vue实例的数据对象中</p>
</li>
<li><p><strong>我们在data中的数据结构必须和<code>Ajax</code>响应回来的数据格式匹配！</strong></p>
</li>
</ol>
<h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><p>​        官方文档：<a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">https://cn.vuejs.org/v2/guide/instance.html#生命周期图示</a><br>  Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载DOM、渲染一更新一渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。<br>  在Vue的整个生命周期中，它提供了一系列的事件，可以让我们在事件触发时注册JS方法，可以让我们用自己注册的JS方法控制整个大局，在这些事件响应方法中的this直接指向的是Vue的实例。</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/lifeCycle.jpg"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>通信框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/HuaStarOS.github.io/2020/12/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vue学习笔记07---第一个Vue项目</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007-%E7%AC%AC%E4%B8%80%E4%B8%AAVue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="1-项目准备"><a href="#1-项目准备" class="headerlink" title="1. 项目准备"></a>1. 项目准备</h3><pre><code>  使用vue-cli官方提供的一个脚手架，快速的生成一个Vue项目。就好比在创建Maven项目的时候选择的项目骨架。</code></pre>
<h3 id="2-需要的环境"><a href="#2-需要的环境" class="headerlink" title="2. 需要的环境"></a>2. 需要的环境</h3><ul>
<li><p>Node.js：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>     无脑安装就好，但是安装路径要选好</p>
</li>
<li><p>Git：<a href="https://git-scm.com/doenload">https://git-scm.com/doenload</a><br>     镜像：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p>
<p><strong>确认nodejs安装成功：</strong></p>
</li>
<li><p> cmd下输入<code>node -v</code>，查看是否打印出版本号即可！</p>
</li>
<li><p> cmd下输入<code>npm -v</code>，查看是否打印出版本号即可！</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/node-v.jpg"></p>
<ul>
<li>npm，就是一个软件包管理工具，就和linux下的apt软件安装差不多！如果速度慢的话可以<strong>安装Node.js淘宝镜像加速器（cnpm）</strong>这样的话，下载速度会快</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g 就是全局安装</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">cnpm</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用如下语句解决npm速度慢的问题</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<p>安装vue-cli</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cnpm</span> <span class="string">instal1</span> <span class="string">vue-cli-g</span></span><br><span class="line"><span class="comment">#测试是否安装成功</span></span><br><span class="line"><span class="comment">#查看可以基于哪些模板创建vue应用程序，通常选择webpack</span></span><br><span class="line"><span class="string">vue</span> <span class="string">list</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/vue-list.jpg"></p>
<h3 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3. 创建项目"></a>3. 创建项目</h3><p>1.创建一个Vue项目，我们随便建立一个空的文件夹在电脑上，我这里在D盘下新建一个目录</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">D:\Project\vue-study;</span></span><br></pre></td></tr></table></figure>

<p>2.创建一个基于webpack模板的vue应用程序</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、首先需要进入到对应的目录 </span></span><br><span class="line"><span class="string">cd</span> <span class="string">D:\Project\vue-study</span></span><br><span class="line"><span class="comment">#2、这里的hello-vue是项目名称，可以根据自己的需求起名</span></span><br><span class="line"><span class="string">vue</span> <span class="string">init</span> <span class="string">webpack</span> <span class="string">hello-vue</span></span><br></pre></td></tr></table></figure>

<p> 一路都选择no即可；</p>
<p><strong>说明：</strong></p>
<ul>
<li>Project name：项目名称，默认回车即可</li>
<li>Project description：项目描述，默认回车即可</li>
<li>Author：项目作者，默认回车即可</li>
<li>Vue build (Use arrow keys)：选择第一个即可</li>
<li>Install vue-router：是否安装vue-router，选择n不安装（后期需要再手动添加）</li>
<li>Use ESLint to lint your code:是否使用ESLint做代码检查，选择n不安装（后期需要再手动添加)</li>
<li>Set up unit tests:单元测试相关，选择n不安装（后期需要再手动添加）</li>
<li>Setupe2etests with Nightwatch：单元测试相关，选择n不安装（后期需要再手动添加）</li>
<li>Should we run npm install for you after the,project has been created:创建完成后直接初始化，选择n，我们手动执行；运行结果！</li>
</ul>
<ol>
<li><p><strong>初始化并运行</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、进入项目</span></span><br><span class="line"><span class="string">cd</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment">#2、下载依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="comment">#3、运行项目</span></span><br><span class="line"><span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/hello-vue_run.jpg"></p>
<p>在浏览器中输入<a href="http://localhost:8080/">http://localhost:8080</a> 查看结果</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记09---vue-route路由</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-vue-route%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="什么是Vue-Router"><a href="#什么是Vue-Router" class="headerlink" title="什么是Vue Router"></a>什么是Vue Router</h2><p>​        Vue Router 是 <a href="http://cn.vuejs.org/">Vue.js</a> 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p>
<ul>
<li><p>嵌套的路由/视图表</p>
</li>
<li><p>模块化的、基于组件的路由配置</p>
</li>
<li><p>路由参数、查询、通配符</p>
</li>
<li><p>基于 Vue.js 过渡系统的视图过渡效果</p>
</li>
<li><p>细粒度的导航控制</p>
</li>
<li><p>带有自动激活的 CSS class 的链接</p>
</li>
<li><p>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</p>
</li>
<li><p>自定义的滚动条行为</p>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里是采用直接下载的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">vue-router</span></span><br></pre></td></tr></table></figure>
<p> 如果在一个模块化工程中使用它，必须要通过 <code>Vue.use()</code> 明确地安装路由功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">import</span> <span class="string">Vue</span> <span class="string">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="string">import</span> <span class="string">VueRouter</span> <span class="string">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">Vue.use(VueRouter)</span></span><br></pre></td></tr></table></figure>



<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li>使用vue-cli创建项目</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、这里的hello-vue是项目名称，可以根据自己的需求起名</span></span><br><span class="line"><span class="string">vue</span> <span class="string">init</span> <span class="string">webpack</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment">#2、进入项目</span></span><br><span class="line"><span class="string">cd</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment">#3、下载依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用IDEA打开项目 （使用IDEA打开hello-vue文件夹）</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/project_framework.jpg"></p>
<ol start="3">
<li> 创建Main.vue组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Main&quot;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建Comment.vue组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>评论页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">		name:<span class="string">&quot;Comment&quot;</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装vue-route路由</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">vue-router</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在src目录下，新建一个文件夹：<strong>router</strong>，专门存放路由，配置路由index.js，如下</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Comment <span class="keyword">from</span> <span class="string">&#x27;../components/Comment&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&#x27;../components/Main&#x27;</span></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/comment&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;comment&#x27;</span>,</span><br><span class="line">      <span class="comment">//要跳转到的组件</span></span><br><span class="line">      component: Comment,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      <span class="comment">//要跳转到的组件</span></span><br><span class="line">      component: Main,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>在App.vue中使用路由</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;!--</span><br><span class="line">			router-link：默认会被渲染成一个&lt;a&gt;标签，to属性为指定链接</span><br><span class="line">			router-view：用于展示路由匹配到的组件</span><br><span class="line">		--&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;comment&quot;&gt;评论页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;App&#39;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="8">
<li><p>运行</p>
<p><strong><code>npm run dev</code></strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记08---webpack使用</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008-webpack%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本质上， webpack是一个现代JavaScript应用程序的<strong>静态模块打包器</strong>(module bundler) 。当webpack处理应用程序时， 它会递归地构建一个依赖关系图(dependency graph) ， 其中包含应用程序需要的每个模块， 然后将所有这些模块打包成一个或多个bundle.</p>
<p>​    <strong>安装Webpack</strong></p>
<pre><code>    <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">webpack</span> <span class="string">-g</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">webpack-cli</span> <span class="string">-g</span></span><br></pre></td></tr></table></figure></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/webpack_v.jpg"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>​    知其然知其所以然！</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>（1）entry：一个可执行模块或者库的入口。</p>
<p>（2）output：输出，指定Webpack把打包好的文件存放到指定的位置</p>
<p>（3）module：模块， 用于处理各种类型的文件</p>
<p>（4）plugin：扩展webpack功能的插件。在webpack构建的生命周期节点上加入扩展hook，添加功能</p>
<p>（5）resolve：设置路径指向</p>
<p>（6）watch：监听， 用于设置文件改动后直接打包</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry:<span class="string">&quot;&quot;</span>,</span><br><span class="line">	output:&#123;</span><br><span class="line">		path:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		filename:<span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="built_in">module</span>:&#123;</span><br><span class="line">		loaders:[</span><br><span class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,;\loade:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	plugins:&#123;&#125;,</span><br><span class="line">	resolve:&#123;&#125;,</span><br><span class="line">	watch:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="webpack构建流程"><a href="#webpack构建流程" class="headerlink" title="webpack构建流程"></a>webpack构建流程</h3><p>从启动构建到输出结果一系列过程：</p>
<p>（1）初始化参数：解析webpack配置参数，合并shell传入和webpack.config.js文件配置的参数，形成最后的配置结果。</p>
<p>（2）开始编译：上一步得到的参数初始化compiler对象，注册所有配置的插件，插件监听webpack构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译。</p>
<p>（3）确定入口：从配置的entry入口，开始解析文件构建AST语法树，找出依赖，递归下去。</p>
<p>（4）编译模块：递归中根据文件类型和loader配置，调用所有配置的loader对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</p>
<p>（5）完成模块编译并输出：递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据entry配置生成代码块chunk。</p>
<p>（6）输出完成：输出所有的chunk到文件系统。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li><p>创建项目(创建一个文件夹用IDEA打开)</p>
</li>
<li><p>创建modules的目录，用于放置JS模块等资源文件</p>
</li>
<li><p>在modules下创建模块文件，如hello.js，用于编写JS模块相关代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴露一个方法：sayHi</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;qzh学习ES6&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在modules下创建main.js文件，作为入口文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require 导入一个模块，就可以调用这个模块中的方法了</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi();</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目目录下创建webpack.config.js配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry:<span class="string">&quot;./modules/main.js&quot;</span>,</span><br><span class="line">	output:&#123;</span><br><span class="line">		filename:<span class="string">&quot;./js/bundle.js&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用打包好的文件，在项目目录下创建HTML页面，如index.html。导入webpack打包后的JS文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在IDEA控制台中输入webpack，回车</p>
</li>
<li><p>在浏览器中打开index.html</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/webpack_study.jpg"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记10---简单项目</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-%E7%AE%80%E5%8D%95%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><ol>
<li>创建一个名为hello-vue的工程<code>vue init webpack hello-vue</code></li>
<li>安装依赖， 我们需要安装vue-router、element-ui、sass-loader和node-sass四个插件</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工程</span></span><br><span class="line"><span class="string">vue</span> <span class="string">init</span> <span class="string">webpack</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment"># 进入工程目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment"># 安装vue-routern </span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">vue-router</span> <span class="string">--save-dev</span></span><br><span class="line"><span class="comment"># 安装element-ui</span></span><br><span class="line"><span class="string">npm</span> <span class="string">i</span> <span class="string">element-ui</span> <span class="string">-S</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="comment"># 安装SASS加载器</span></span><br><span class="line"><span class="string">cnpm</span> <span class="string">install</span> <span class="string">sass-loader</span> <span class="string">node-sass</span> <span class="string">--save-dev</span></span><br><span class="line"><span class="comment"># 启功测试</span></span><br><span class="line"><span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>npm常用命令</li>
</ol>
<ul>
<li><code>npm install moduleName</code>：安装模块到项目目录下</li>
<li><code>npm install -g moduleName</code>：-g的意思是将模块安装到全局，具体安装到磁盘哪个位置要看npm config prefix的位置</li>
<li><code>npm install --save moduleName</code>：-–save的意思是将模块安装到项目目录下， 并在package文件的dependencies节点写入依赖，-S为该命令的缩写</li>
<li><code>npm install --save-dev moduleName</code>: -–save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖，-D为该命令的缩写</li>
</ul>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/project_framework.jpg"></p>
<ul>
<li>assets：用于存放资源文件</li>
<li>components：用于存放Vue功能组件</li>
<li>views：用于存放Vue视图组件</li>
<li>router：用于存放vue-router配置</li>
</ul>
<ol>
<li>创建首页，在views创建<code>Main.vue</code>视图组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">			name:<span class="string">&quot;Main&quot;</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建登录页，在views目录下创建名为<code>Login.vue</code>视图组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span><span class="attr">class</span>=<span class="string">&quot;login-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;login-title&quot;</span>&gt;</span>欢迎登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;账号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;onSubmit(&#x27;loginForm&#x27;)&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      title=&quot;温馨提示&quot;</span><br><span class="line">      :visible.sync=&quot;dialogVisible&quot;</span><br><span class="line">      width=&quot;30%&quot;</span><br><span class="line">      :before-close=&quot;handleClose&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入账号和密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Login&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        form: &#123;</span><br><span class="line"><span class="javascript">          username: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          password: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 表单验证，需要在 el-form-item 元素中增加 prop 属性</span></span></span><br><span class="line">        rules: &#123;</span><br><span class="line">          username: [</span><br><span class="line"><span class="javascript">            &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;账号不可为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">          ],</span><br><span class="line">          password: [</span><br><span class="line"><span class="javascript">            &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;密码不可为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 对话框显示和隐藏</span></span></span><br><span class="line"><span class="javascript">        dialogVisible: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">onSubmit</span>(<span class="params">formName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为表单绑定验证功能</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用 vue-router 路由到指定页面，该方式称之为编程式导航</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$router.push(<span class="string">&quot;/main&quot;</span>);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.dialogVisible = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.login-box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#DCDFE6</span>;</span></span><br><span class="line">    width: 350px;</span><br><span class="line">    margin: 180px auto;</span><br><span class="line">    padding: 35px 35px 15px 35px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    -moz-border-radius: 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 0 0 25<span class="selector-tag">px</span> <span class="selector-id">#909399</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.login-title</span> &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 auto 40px auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#303133</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建路由，在router目录创建vue-router路由配置文件<code>index.js</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//首页</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      name: Main,</span><br><span class="line">      component: Main,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//登录页</span></span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在App.vue中使用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">    font-family: &#x27;Avenir&#x27;, Helvetica, Arial, sans-serif;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">    margin-top: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Main.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//扫描路由配置</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span></span><br><span class="line"><span class="comment">//导入elementUI</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"><span class="comment">//导入element css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),<span class="comment">//ElementUI规定这样使用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>运行</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/hello-vue_run.jpg"></p>
<p>在浏览器中输入<a href="https://localhost:8080/">https://localhost:8080</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/vue_10_run.jpg"></p>
<h2 id="错误排除"><a href="#错误排除" class="headerlink" title="错误排除"></a>错误排除</h2><p>​    <strong>运行的过程中可能会出错这个两个错误</strong></p>
<ol>
<li>出现这个错误需要把**<code>package.json</code><strong>文件中的</strong>node-sass**的版本改成4.x就可以了，我是改成4.13.1</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/error1.jpg"></p>
<ol start="2">
<li>第二个错误可能时因为sass-loader的版本过高导致的编译错误，需要退回到7.x；推荐7.13.1版本</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/error2.png"></p>
<p>注意：</p>
<p>​    修改完版本之后都要重新npm install,重新下载依赖。如果npm install 不行，就用cnpm install</p>
<h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>​    实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/route_children2.jpg"></p>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><ol>
<li>在views/user目录下创建Profile.vue的视图组件；</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;UserProFile&quot;</span>,</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在views/user目录下创建List.vue的视图组件；</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    用户列表</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;UserList&quot;</span>,</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置嵌套路由修改router目录下的index.js路由配置文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"><span class="comment">//导入子模块</span></span><br><span class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">&quot;../views/user/List&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserProfile <span class="keyword">from</span> <span class="string">&quot;../views/user/Profile&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> error <span class="keyword">from</span> <span class="string">&quot;../views/404&quot;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//首页</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      component: Main,</span><br><span class="line">      <span class="comment">// 写入子模块路由</span></span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//path接收数据</span></span><br><span class="line">          path: <span class="string">&#x27;/user/profile&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;UserProfile&#x27;</span>,</span><br><span class="line">          component: UserProfile,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          path: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;UserList&#x27;</span>,</span><br><span class="line">          component: UserList,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//登录页</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改首页，这里使用Element-UI</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;]&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-caret-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--插入的地方--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/profile&quot;</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--插入的地方--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/list&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--插入的地方--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goHome&quot;</span>&gt;</span>回到首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-caret-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>内容管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-1&quot;</span>&gt;</span>分类管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-2&quot;</span>&gt;</span>内容列表<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;text-align: right; font-size: 12px&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 15px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-dropdown-menu</span> <span class="attr">slot</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-dropdown-item</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-dropdown-item</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--在这里展示视图--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Main&quot;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.el-header</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#36cba1</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#100f0f</span>;</span></span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#100f0f</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><ol>
<li>链接传参</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--插入的地方--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name是要展示的组件的名字,params:要传递的参数,传递参数需要绑定对象，在路由中有path接收--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name: &#x27;UserProfile&#x27;,params: &#123;id: 1&#125;&#125;&quot;</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置路由传参</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//首页</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      props: <span class="literal">true</span>,</span><br><span class="line">      name: Main,</span><br><span class="line">      component: Main,</span><br><span class="line">      <span class="comment">// 写入子模块路由</span></span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//path接收数据</span></span><br><span class="line">          path: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;UserProfile&#x27;</span>,</span><br><span class="line">          component: UserProfile,</span><br><span class="line">          props: <span class="literal">true</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          path: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;UserList&#x27;</span>,</span><br><span class="line">          component: UserList,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">   </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//登录页</span></span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>组件接收参数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;&#123;id&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">&#x27;id&#x27;</span>],</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;UserProFile&quot;</span>,</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//重定向</span></span><br><span class="line">      path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      redirect: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说明：这里定义了两个路径，一个是 /main，一个是 /home，其中 /home重定向到了 /main路径。</p>
<p>使用的话，配置对应的路径即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>回到首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="路由模式与404"><a href="#路由模式与404" class="headerlink" title="路由模式与404"></a>路由模式与404</h3><p>路由模式有两种</p>
<ul>
<li>hash：路径带# 符号，比如<a href="https://localhost:8080/#/login">https://localhost:8080/#/login</a></li>
<li>history：路径不带 # 符号，比如<a href="https://localhost:8080/login">https://localhost:8080/login</a></li>
</ul>
<ol>
<li>修改路由模式</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">      ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>处理404</strong>创建<code>404.vue</code>视图组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>404<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;error&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​     修改路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> error <span class="keyword">from</span> <span class="string">&quot;../views/404&quot;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">      component: error,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="路由钩子函数与异步请求"><a href="#路由钩子函数与异步请求" class="headerlink" title="路由钩子函数与异步请求"></a>路由钩子函数与异步请求</h3><ol>
<li>路由钩子函数</li>
</ol>
<ul>
<li><strong>beforeRouteEnter</strong>：进入路由前执行(在加载组件之前执行)</li>
<li><strong>beforeRouteLeave</strong>：离开路由前执行(在离开组件之前执行)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    </span><br><span class="line">  beforeRouteEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在进入页面之前执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;进入路由之前&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  beforeRouteLeave: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在进入页面之后执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;离开路由之前&quot;</span>);</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>to ：路由将要跳转的路径信息(<strong>要去哪里</strong>)</li>
<li>from ： 路径跳转前的路径信息(<strong>从哪里来</strong>)</li>
<li>next：路由的控制参数<ul>
<li>next()：跳入下一个页面</li>
<li>next(’/path’) ：改变路由的跳转方向，跳到另一个路由</li>
<li>next(false)：返回原来的页面</li>
<li>next((vm)=&gt;{})：仅在beforeRouteEnter中可用，vm是组件实例(vm是当前Vue实例，即定义路由钩子函数的Vue实例)</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p><strong>在钩子函数中使用异步请求</strong></p>
<ol>
<li><p>安装Axios <code>cnpm install axios -s</code></p>
</li>
<li><p>在main.js中引用<strong>Axios</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueAxios,axios)</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备事件，在src目录下创建static目录用来存放静态资源，在static目录下创建data.json文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;qzh&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://baidu.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在beforeRouteEnter中进行异步请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  name: <span class="string">&quot;UserProFile&quot;</span>,</span><br><span class="line">  beforeRouteEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在进入页面之前执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;进入路由之前&quot;</span>);</span><br><span class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//vm是当前组件。调用getData()方法</span></span><br><span class="line">      vm.getData();</span><br><span class="line">    &#125;)</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在进入页面之后执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;离开路由之前&quot;</span>);</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.axios(&#123;</span><br><span class="line">        method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://localhost:8080/static/data.json&#x27;</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果</p>
<p><img src="!%5B%5D(https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/vue_run_2.jpg"></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/HuaStarOS.github.io/2020/12/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="心有感想"><a href="#心有感想" class="headerlink" title="心有感想"></a>心有感想</h2><p>​    其实对于2020年的我来是非常关键的一年，从2020年开始到现在已经过去了12个月了，现在的时间也就剩一个月不到了。今年因疫情在家待了大半年。也正是因为有了那段时间，我才选择了自己以后的方向。<br>​    我在这写一篇博客，来回忆过去两年大学生活的点点滴滴。</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/wallhaven-4dp8xm.jpg"></p>
<h2 id="我写博客的原因"><a href="#我写博客的原因" class="headerlink" title="我写博客的原因"></a>我写博客的原因</h2><hr>
<ul>
<li>见证自己成长的记录</li>
</ul>
<p>我是今年5月份开始学习Java的. 我选择Java的原因挺多的. 大二上学期的时候就学习了Java再加上我自己喜欢开发这一岗位. 我发现相较于网络安全和运维以及其他的方向, 我更喜欢开发, 在我看来通过自己所学习的知识写出一个小项目(例如:小程序或者小网站), 然后这个小项目可以帮助到他人. 我就觉得非常高兴. 所以我是真的想学好Java, 从现在开始我会开始写博客把自己所学的知识写出来, 见证自己成长的记录</p>
<ul>
<li>积累知识点</li>
</ul>
<p>我现在是把博客来当做自己学习的记录, 当然现在我才刚刚开始写博客. 俗话说：“好记性不如烂笔头”! 作为程序员来说, 学习的知识多的同时也挺杂, 如果没有一个记录, 很容易遗忘, 我之前都是把知识点记录在笔记本上的.现在我想把这些知识点写成技术博客, 那样可以更方便复习查阅，我想这应该是大部分程序员都会想到的事情。</p>
<ul>
<li>学会分享</li>
</ul>
<p>我写博客的一个原因, 也是来源于当初看到了一些优秀的博客. 当初一个bug不知道怎么解决, 或者被一道算法题给卡住了不会写, 我就去网上搜, 这个时候搜索引擎就帮我搜索出来了许多解决问题的博客, 他们的博客讲得是非常的好, 讲得很清楚, 是真正站在编程小白角度上面去写的博客. 从他们身上我学习到了分享精神. 我以后也会把我遇到的bug和一些踩过的坑都分享出来, 帮助他人让他们早点解决问题</p>
<ul>
<li>增加影响力</li>
</ul>
<p>或许有些人会问, 写博客图什么？我从网上一搜遍地都是相关文章, 一样可以解决自己的问题，反而会花大量的时间去书写一篇博客. 这样说的人只看到了表面, 他们往往忽视了写博客带来的好处, 花时间是必须承认的事情, 但你可以巩固你的知识, 同时也更方便复习查阅 , 当然也可以积累名气, 也能遇到志同道合的朋友. 这也是为什么我写博客的原因之一。另外，你去找工作，找实习，拥有一个个人博客也是加分项，我曾经阅读过关于面试的一篇博文，有个人的博客内容就是面试笔试不是特别理想，就因为看到了他的优秀博客，公司认为他只是遗忘了许多只是，要捡起来也是挺容易的，最终还是选择给了他offer！</p>
<h2 id="将来的我"><a href="#将来的我" class="headerlink" title="将来的我"></a>将来的我</h2><hr>
<p> 将来我自己也说不准, 毕竟我现在才20岁. 对于人生的感悟还有现在的一些想法其实也都不是很成熟. 但是我还是要提一下我自己现在的一些想法吧 . 是写给未来的自己 . 我现在主攻是后端开发, 我喜欢编程. 我希望能在编程这一方面有些许建树.</p>
<p> 将来的我, 你听着现在的我会好好学习的. 希望到时候的你以及是一名大牛了. 说到底, 人还是活在当下. 我不排斥活在当下 , 我反而喜欢活在当下的感觉 . 这种感觉能驱使我努力学习.其实说白了, 就是每天开心就好, 做着自己想做的事情, 乐此不疲, 不再因为一些事情给自己压力, 让自己过多的焦虑。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p> 这碗鸡汤我先干为敬</p>
<p> <code>心在哪里，收获就在哪里。</code></p>
<p> <code>人这一生能力有限，但是努力无限。</code></p>
<p> <code>努力做一个善良的人，做一个心态阳光的人，做一个积极向上的人，用正能量激发自己，也感染身边的人。</code></p>
<p> <code>用最美的心情迎接每天的朝阳！你阳光，世界也会因你而光彩。</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/pictures/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201113094846.jpg"></p>
]]></content>
      <categories>
        <category>-[日常] -[随想]</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记02---微服务架构编码构建</title>
    <url>/HuaStarOS.github.io/2021/01/05/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="微服务架构编码构建"><a href="#微服务架构编码构建" class="headerlink" title="微服务架构编码构建"></a>微服务架构编码构建</h1><p>​    <strong>编程风格：约定 &gt; 配置 &gt; 编码</strong></p>
<h2 id="创建微服务spring-cloud整体聚合父工程"><a href="#创建微服务spring-cloud整体聚合父工程" class="headerlink" title="创建微服务spring-cloud整体聚合父工程"></a>创建微服务spring-cloud整体聚合父工程</h2><ol>
<li><p>创建工程 New Project</p>
</li>
<li><p>删除src目录，并在pom中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包方式 pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--统一管理jar包版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud-version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring.cloud-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit-version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">junit-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok-version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">lombok-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid-version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">druid-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用写groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--引入spring cloud的依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--druid数据库连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot-mybatis启动器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--用于日志和测试--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>dependencyManagement与dependencies的区别</strong></p>
<p>​    Maven使用dependencyManagement元素来提供了一种管理依赖版本号的方式。通常会在一个组织或者项目的最顶层的父pom中看到dependencyManagement元素</p>
<p>​    使用pom.xml中的dependencyManagement元素能让所有在子项目中引用一个依赖而不用显式的列出版本号。<br>Maven会沿着父子层次向上走，知道找到第一个拥有dependencyManagement元素的项目，然后它就会使用这个dependencyManagement元素中指定的版本号</p>
<p>​    例如在父项目里：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>​    然后在子项目里就可以添加mysql-connector时可以不指定版本号，例如：<br>​     </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>​<br>​    这样做的好处是：如果有多个子项目都需要引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改；另外如果某个子项目需要另外的一个版本号，只需要声明version即可。<br>​<br><strong>注意</strong><br>​     </p>
<ol>
<li>dependencyManagement 里只是声明依赖，并不实现引入，因此子项目需要显式的声明需要用的依赖。<ol start="2">
<li>如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本才会从父项目中继承该项，并且version和scope都读取自父pom文件。</li>
<li>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</li>
<li>父工程创建完成后执行<code>mvn:install</code>将父工程发布到仓库方便子工程继承。</li>
</ol>
</li>
</ol>
<h2 id="Rest微服务工程构建"><a href="#Rest微服务工程构建" class="headerlink" title="Rest微服务工程构建"></a>Rest微服务工程构建</h2><p>​    最开始的订单模块</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/1.png"></p>
<h3 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h3><ol>
<li>建module</li>
<li>改pom</li>
<li>写yml</li>
<li>主启动</li>
<li>业务类</li>
<li>测试</li>
</ol>
<h3 id="创建微服务提供者模块cloud-provider-payment8001"><a href="#创建微服务提供者模块cloud-provider-payment8001" class="headerlink" title="创建微服务提供者模块cloud-provider-payment8001"></a>创建微服务提供者模块cloud-provider-payment8001</h3><ol>
<li><p>新建模块,子模块名：cloud-provider-payment8001</p>
</li>
<li><p>修改子模块的pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment-8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入自己的API通用包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spring配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springcloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.qzh.springcloud.domain</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类</p>
<ol>
<li><p>建表SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`payment`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">	<span class="string">`serial`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
</li>
<li><p>entities</p>
<p>在entities包下新建实体类Payment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>   <span class="comment">//set/get/toString/equalsAndHashCode方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//有参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">//无参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在entities包下新建CommonResult类 (json封装体，传给前端的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回给前端的通用json数据串</span></span><br><span class="line"><span class="meta">@Data</span>   <span class="comment">//set/get/toString/equalsAndHashCode方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//有参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">//无参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//泛型，对应类型的json数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义两个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>dao</p>
<p>在dao包创建Payment接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    <span class="function">Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里用增和改进行测试，有兴趣的可以自己加其他的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper</p>
<p>在resources目录下新建mapper目录，然后新建PaymentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qzh.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into payment(serial) values (#&#123;serial&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">        select * from payment where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure>
</li>
<li><p>service</p>
<p>在springcloud包下新建service.PaymentService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service包下新建impl包PaymentServiceIpml实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceIpml</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>   </span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<p>在controller包下创建PaymentController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">//日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前后端分离，所以不能直接返回对象，数据要先经过CommonResult封装再返回</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;******插入的数据为：&quot;</span> + payment);</span><br><span class="line">        log.info(<span class="string">&quot;******插入结果：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;插入成功,serverPort&quot;</span>+serverPort, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;插入失败,serverPort&quot;</span>+serverPort, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;******查询结果：&quot;</span> + payment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;查询成功,serverPort&quot;</span>+serverPort, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;查询失败，查询ID&quot;</span>+id, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>测试。这里是采用Postman工具进行测试</p>
<p>浏览器输入<code>http://localhost:8001/payment/get/1</code>，查询成功。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/2.png"></p>
<p>输入<code>http://localhost:8001/payment/create</code>发送post请求，往数据库中插入一条数据，需要把数据写到body中。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/3.png"></p>
</li>
</ol>
<h3 id="热部署Devtools-只能在开发阶段使用"><a href="#热部署Devtools-只能在开发阶段使用" class="headerlink" title="热部署Devtools(只能在开发阶段使用)"></a>热部署Devtools(只能在开发阶段使用)</h3><ol>
<li><p>在cloud-provider-payment8001项目中添加热部署依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个插件到父类总工程的pom.xml里（这一步之前也已经做了）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当修改代码之后，Build Project 按热键<code>Crtl+F9</code>。IDEA版本为2020.1，也可以按绿色的锤子</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/4.png"></p>
</li>
</ol>
<h3 id="微服务消费者订单模块cloud-consumer-order80"><a href="#微服务消费者订单模块cloud-consumer-order80" class="headerlink" title="微服务消费者订单模块cloud-consumer-order80"></a>微服务消费者订单模块cloud-consumer-order80</h3><ol>
<li><p>新建模块，命名cloud-consumer-order80</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在resources目录下新建application.yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问一个网站时，默认是80端口，给用户80端口，用户就可以不用加端口直接访问页面</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<p>com.qzh.springcloud.OrderMain80</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>复制cloud-provider-payment8001项目里的entities（里面2个实体类）到本项目（cloud-consumer-order80）的springcloud包下。</p>
</li>
<li><p>springcloud包下新建config包并创建ApplicationContextConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往容器中添加一个RestTemplate</span></span><br><span class="line">    <span class="comment">//RestTemplate 提供了多种便捷访问远程http服务的方法</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建OrderController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;********插入的数据：&quot;</span> + payment);</span><br><span class="line">        <span class="comment">//postForObject分别有三个参数：请求地址，请求参数，返回的对象类型</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;********查询的id：&quot;</span> + id);</span><br><span class="line">        <span class="comment">//getForObject两个参数：请求地址，返回的对象类型</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>测试</p>
<p>在浏览器中输入<code>http://localhost/consumer/payment/create?serial=王五</code>插入一条数据。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/5.png"></p>
<p>在浏览器中输入<code>http://localhost/consumer/payment/get/8</code>成功查询到数据。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/6.png"></p>
</li>
</ol>
<h2 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h2><p>​    多个模块中有相同的代码，应该抽离出来，变成一个独立的模块，比如上面两个工程中的实体类</p>
<ol>
<li><p>创建新模块 ：cloud-api-commons</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   一个Java工具包     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝entities到本项目中（路径一定要一样）</p>
</li>
<li><p><code>mvn:install</code>将工程发布到仓库方便其他工程使用。</p>
</li>
<li><p>删除另外两个项目中的entities包</p>
</li>
<li><p>在另外两个项目pom文件加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用定义的api通用包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新测试</p>
<p>增加</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/7.png"></p>
<p>查询</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/8.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记03---Eureka服务注册与发现</title>
    <url>/HuaStarOS.github.io/2021/01/06/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h2><h3 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h3><ul>
<li>Netflix在涉及Eureka时，遵循的就是API原则.</li>
<li>Eureka是Netflix的有个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.</li>
</ul>
<h3 id="原理理解"><a href="#原理理解" class="headerlink" title="原理理解"></a>原理理解</h3><ul>
<li><p><strong>Eureka基本的架构</strong></p>
<ul>
<li><p>Springcloud 封装了Netflix公司开发的Eureka模块来实现服务注册与发现 (对比Zookeeper).</p>
</li>
<li><p>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心.</p>
</li>
<li><p>而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑.</p>
<p>基本架构图，右边是Duddo的架构图</p>
</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/1.png"></p>
</li>
</ul>
<ul>
<li><strong>两大组件</strong><ul>
<li>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong>.</li>
<li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li>
<li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).</li>
</ul>
</li>
<li><strong>三大角色</strong><ul>
<li>Eureka Server：提供服务的注册与发现</li>
<li>Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能狗找到</li>
<li>Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到消费服务</li>
</ul>
</li>
</ul>
<h2 id="单机Eureka构建步骤"><a href="#单机Eureka构建步骤" class="headerlink" title="单机Eureka构建步骤"></a>单机Eureka构建步骤</h2><h3 id="IDEA生成eurekaServer端服务注册中心"><a href="#IDEA生成eurekaServer端服务注册中心" class="headerlink" title="IDEA生成eurekaServer端服务注册中心"></a>IDEA生成eurekaServer端服务注册中心</h3><p><strong>1. 建module</strong></p>
<p>cloud-eureka-server7001</p>
<p><strong>2. 改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- eureka-server --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 一般通用配置 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 写yml</strong></p>
<p>在resources目录下新建application.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>  <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己（想注册也可以，不过没必要）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eurekaServer交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 主启动</strong></p>
<p>在java包下新建com.qzh.springcloud.EurekaMain7001</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//表示此项目是eureka的服务注册中心</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 测试</strong></p>
<p>启动项目，在浏览器输入<code>http://localhost:7001/</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/2.png"></p>
<h3 id="将服务提供者provider-8001注册进EurekaServer"><a href="#将服务提供者provider-8001注册进EurekaServer" class="headerlink" title="将服务提供者provider-8001注册进EurekaServer"></a>将服务提供者provider-8001注册进EurekaServer</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml文件中添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己，默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主配置类上加上<code>@EnableEurekaClient</code>注解，表示这个项目是eureka的客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//表示此项目是eureka的客户端</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>启动项目，然后刷新页面，成功注册进注册中心。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/4.png"></p>
</li>
<li><p>在yml文件中application.name就是注册进注册中心时的服务名。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/5.png"></p>
</li>
</ol>
<h3 id="将服务消费者consumer80注册进EurekaServer"><a href="#将服务消费者consumer80注册进EurekaServer" class="headerlink" title="将服务消费者consumer80注册进EurekaServer"></a>将服务消费者consumer80注册进EurekaServer</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml文件中添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主配置类上加上<code>@EnableEurekaClient</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//表示此项目是eureka的客户端</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，刷新页面</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/6.png"></p>
<h2 id="集群Eureka构建步骤"><a href="#集群Eureka构建步骤" class="headerlink" title="集群Eureka构建步骤"></a>集群Eureka构建步骤</h2><p><strong>搭建Eureka注册中心集群，实现负载均衡+故障容错。</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/7.png"></p>
<p>Eureka集群：<strong>相互注册，相互守望</strong>。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/8.png"></p>
<h3 id="构建eurekaServer集群环境"><a href="#构建eurekaServer集群环境" class="headerlink" title="构建eurekaServer集群环境"></a>构建eurekaServer集群环境</h3><ol>
<li><p>参照cloud-eureka-server7001新建cloud-eureka-server7002</p>
</li>
<li><p>Windows系统修改hosts文件(在<code>C:\windows\System32\drivers\etc</code>下)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1       eureka7001.com</span><br><span class="line">127.0.0.1       eureka7002.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据电脑情况考虑是否要加中一项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">127.0.0.1		eureka7003.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改7001的yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span>  <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机</span></span><br><span class="line">      <span class="comment">#defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment">#集群版  相互注册，相互守望</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line"><span class="comment">#集群版  如果是三个的话就向其他两个注册</span></span><br><span class="line"><span class="comment"># defaultZone: http://eureka7002.com:7002/eureka/, http://eureka7003.com:7003/eureka/ </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改7002的yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span>  <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群版  相互注册，相互守望</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后启动这三个项目</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/10.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/9.png"></p>
<h3 id="将服务提供者provider-8001和服务消费者consumer80注册到集群配置中"><a href="#将服务提供者provider-8001和服务消费者consumer80注册到集群配置中" class="headerlink" title="将服务提供者provider-8001和服务消费者consumer80注册到集群配置中"></a>将服务提供者provider-8001和服务消费者consumer80注册到集群配置中</h3><p>把两个项目的yml文件中的defaultZone改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#集群版</span></span><br><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure>

<p>启动4个项目进行测试：（先启动集群，再启动8001，最后启动80）<br>集群后台截图：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/12.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/13.png"></p>
<h3 id="构建服务提供者集群环境"><a href="#构建服务提供者集群环境" class="headerlink" title="构建服务提供者集群环境"></a>构建服务提供者集群环境</h3><ol>
<li><p>按照8001新建8002。（除了yml文件中需要改端口号和主配置类，其他直接复制8001的，<code>yml文件中的应用名不需要改，因为是集群，所以应用名需要一致</code>）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="comment">#spring配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 向注册中心 Eureka Server注册服务</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 向注册中心请求服务，单节点无所谓，集群必须设置为true才能配合Ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> </span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>分别在所有的服务提供者的修改PaymentController（这个@Value是spring的注解）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*********插入结果&quot;</span> + result);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;插入成功,serverPort&quot;</span>+serverPort, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;插入失败,serverPort&quot;</span>+serverPort, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;*********查询结果&quot;</span> + payment);</span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;查询成功,serverPort&quot;</span>+serverPort, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;查询失败，查询ID&quot;</span>+id, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改消费者的OrderController，把写死的url改为服务名称：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在消费者的ApplicationContextConfig里的restTemplate方法上加上<code>@LoadBalanced</code>，开启负载均衡功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动eurekaServer集群，启动提供者集群，启动消费者。如果启动提供者后出现，这个错误：<code>Public Key Retrieval is not allowed</code>请在yml文件中的datasource.datasource.url后加上<code>&amp;allowPublicKeyRetrieval=true</code>即可解决。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/14.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/15.png"></p>
</li>
</ol>
<p>   在浏览器中输入<code>http://localhost/consumer/payment/get/1</code>，多次刷新可以看到，提供服务的应用在不同的切换，实现负载均衡的效果。</p>
<p>   <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/16.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/20.png"></p>
<h2 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h2><p>修改三个微服务的yml文件：</p>
<ol>
<li><p>cloud-consumer-order80</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment">#instance要和client对齐</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">order80</span> <span class="comment">#修改显示的主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示IP地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cloud-provider-payment-8001</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment">#instance要和client对齐</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#修改显示的主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示IP地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cloud-provider-payment-8002</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment">#instance要和client对齐</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8008</span> <span class="comment">#修改显示的主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示IP地址</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>修改前:</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/aduix.png"></p>
<p>修改后：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/22.png"></p>
<h2 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h2><p><strong>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息。</strong></p>
<h3 id="修改提供者集群的controller"><a href="#修改提供者集群的controller" class="headerlink" title="修改提供者集群的controller"></a>修改提供者集群的controller</h3><ol>
<li><p>在主配置类上加上<code>@EnableDiscoveryClient</code>注解，启用发现客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在两个提供者的PaymentController中加入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;	<span class="comment">//springframework的DiscoveryClient（不要导错包了）</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取服务列表的信息</span></span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*******element：&quot;</span> + element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取CLOUD-PAYMENT-SERVICE服务的所有具体实例</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            <span class="comment">//getServiceId服务器id getHost主机名称 getPort端口号  getUri地址</span></span><br><span class="line">            log.info(instance.getServiceId() + <span class="string">&quot;\t&quot;</span> + instance.getHost() + <span class="string">&quot;\t&quot;</span> + instance.getPort() + <span class="string">&quot;\t&quot;</span> + instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>对8001进行测试，在浏览器输入：<code>http://localhost:8001/payment/discovery</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/23.png"></p>
<p>在IDEA中</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/24.png"></p>
</li>
</ol>
<h2 id="Eureka自我保护"><a href="#Eureka自我保护" class="headerlink" title="Eureka自我保护"></a>Eureka自我保护</h2><p>​    一句话总结就是：<strong>某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！</strong></p>
<ul>
<li><p>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：<code>EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.</code>从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</p>
</li>
<li><p>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</p>
</li>
<li><p>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：<code>eureka.server.enable-self-preservation=false</code>【不推荐关闭自我保护机制】</p>
<p><strong>开启了自我保护机制</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/25.png"></p>
</li>
</ul>
<h4 id="禁止自我保护"><a href="#禁止自我保护" class="headerlink" title="禁止自我保护"></a>禁止自我保护</h4><p>先把cloud-eureka-server7001和cloud-provider-payment8001都切回单机版测试禁止自我保护。</p>
<p>cloud-eureka-server7001的yml文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  client</span></span><br><span class="line"><span class="comment">#  	...		server与client对齐</span></span><br><span class="line"> <span class="attr">server:</span></span><br><span class="line">  <span class="comment">#关闭自我保护，默认为true</span></span><br><span class="line">   <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#心跳的间隔时间，单位毫秒</span></span><br><span class="line">   <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<p>cloud-provider-payment8001的yml文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Eureka客户端向服务端发送心跳的时间间隔，单位秒（默认30秒）</span></span><br><span class="line"><span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#Eureka服务端在收到最后一次心跳后等待的时间上限，单位秒（默认90秒），超时剔除服务</span></span><br><span class="line"><span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>启动注册中心和服务提供者：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/26.png"></p>
<p>然后关闭提供者（模拟网络延时），服务提供者直接被剔除。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/27.png"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记04---Zookeeper和Consul</title>
    <url>/HuaStarOS.github.io/2021/01/06/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-Zookeeper%E5%92%8CConsul/</url>
    <content><![CDATA[<h2 id="Zookeeper服务注册于发现"><a href="#Zookeeper服务注册于发现" class="headerlink" title="Zookeeper服务注册于发现"></a>Zookeeper服务注册于发现</h2><p>​    zookeeper，它是一个<strong>分布式服务框架</strong>，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。<strong>可以实现注册中心功能</strong></p>
<h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><ol>
<li><p>新建工程cloud-provider-payment-8004</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--因为接下来不会用到数据库，所以不导入数据库相关的依赖（防止没配置而报错）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud 整合zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--再添加合本机zookeeper客户端一样的版本(如果跟本机的版本运行报错，就降低版本)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         	<span class="comment">&lt;!--排除jar包自带的Slf4j 不然会报错--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#服务别名——注册到zookeeper注册中心的名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@EnableDiscoveryClient</span> 这个注解用于向使用consul或者zookeeper作为注册中心的时候注册服务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务,创建controller.PaymentController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentZK</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动zookeeper注册中心，在zookeeper安装包下的bin目录中</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/1.png"></p>
</li>
<li><p>启动cloud-provider-payment-8004，并在zkCli.cmd中查看是否注册成功，输入<code>ls /services</code>即可查看</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/2.png"></p>
<ol start="8">
<li><p>测试，在浏览器中输入<code>http://localhost:8004/payment/zk</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/3.jpg"></p>
</li>
</ol>
<h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><ol>
<li><p>新建cloud-consumerzk-order80</p>
</li>
<li><p>改pom,pom文件内容和8004一样</p>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名称-----注册zookeeper到注册中心的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-payment</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderZKMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>创建config.ApplicationContextConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>   <span class="comment">//负载均衡</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建controller.OrderZKController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/zk&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<ol start="6">
<li><p>启动项目，在并在zkCli.cmd中查看是否注册成功，输入<code>ls /services</code>即可查看</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/4.png"></p>
</li>
<li><p>测试，在浏览器中输入<code>http://localhost/consumer/payment/zk</code></p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/5.png"></p>
<h2 id="Consul服务注册与发现"><a href="#Consul服务注册与发现" class="headerlink" title="Consul服务注册与发现"></a>Consul服务注册与发现</h2><p>​    Consul官网：<a href="https://www.consul.io/">https://www.consul.io/</a><br>​    Consul中文文档：<a href="https://www.springcloud.cc/spring-cloud-consul.html">https://www.springcloud.cc/spring-cloud-consul.html</a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    Consul是一种服务网格解决方案，提供具有服务发现，配置和分段功能的全功能控制平面。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建完整的服务网格。Consul需要一个数据平面，并支持代理和本机集成模型。Consul附带了一个简单的内置代理，因此一切都可以直接使用，还支持Envoy等第三方代理集成。</p>
<p><strong>主要特定</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/6.png"></p>
<ul>
<li><p>服务发现：Consul的客户端可以注册服务，例如 api或mysql，其他客户端可以使用Consul来发现给定服务的提供者。使用DNS或HTTP，应用程序可以轻松找到它们依赖的服务。</p>
</li>
<li><p>健康检测：领事客户端可以提供任意数量的运行状况检查，这些检查可以与给定服务（“ Web服务器是否返回200 OK”）或本地节点（“内存利用率低于90％”）相关。操作员可以使用此信息来监视群集的运行状况，服务发现组件可以使用此信息将流量从不正常的主机发送出去。</p>
</li>
<li><p>KV存储：应用程序可以将Consul的分层键/值存储用于多种目的，包括动态配置，功能标记，协调，领导者选举等。简单的HTTP API使其易于使用。</p>
</li>
<li><p>安全的服务通信：领事可以为服务生成并分发TLS证书，以建立相互TLS连接。 意图 可用于定义允许哪些服务进行通信。可以使用可以实时更改的意图轻松管理服务分段，而不必使用复杂的网络拓扑和静态防火墙规则。</p>
</li>
<li><p>多数据中心：Consul开箱即用地支持多个数据中心。这意味着Consul的用户不必担心会构建其他抽象层以扩展到多个区域。</p>
<p> Consul旨在对DevOps社区和应用程序开发人员友好，使其非常适合现代，灵活的基础架构。</p>
</li>
</ul>
<h3 id="使用Consul"><a href="#使用Consul" class="headerlink" title="使用Consul"></a>使用Consul</h3><ol>
<li><p>下载Consul安装包，下载地址<code>https://www.consul.io/downloads</code>下载好并解压，在exe文件的所在的目录中进入cmd,输入<code>consul agnet -dev</code>启动consul</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/7.png"></p>
</li>
</ol>
<ol start="2">
<li><p>在浏览器中输入<code>http://localhost:8500</code>进入consul管理界面</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/8.png"></p>
</li>
</ol>
<h3 id="服务提供者-1"><a href="#服务提供者-1" class="headerlink" title="服务提供者"></a>服务提供者</h3><ol>
<li><p>新建工程cloud-provider-payment-8006</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--因为接下来不会用到数据库，所以不导入数据库相关的依赖（防止没配置而报错）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!--spring cloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># consul注册中心</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@EnableDiscoveryClient</span> 这个注解用于向使用consul或者zookeeper作为注册中心的时候注册服务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8006</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8006.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务,创建controller.PaymentController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，在浏览器中输入<code>http://localhost:8500/</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/9.png"></p>
<p>测试，在浏览器中输入<code>http://localhost:8006/payment/consul</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/10.png"></p>
</li>
</ol>
<h3 id="服务消费者-1"><a href="#服务消费者-1" class="headerlink" title="服务消费者"></a>服务消费者</h3><ol>
<li><p>新建模块cloud-consumer-consul-order80</p>
</li>
<li><p>pom（与8006相同）</p>
</li>
<li><p>yml（端口号为80，应用名为consul-consumer-order，其他和8006相同）</p>
</li>
<li><p>主启动类（与8006相同）</p>
</li>
<li><p>config（和zk的消费者相同）</p>
</li>
<li><p>controller.OrderConsulController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://consul-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/consul&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/11.png"></p>
<p>测试，在浏览器中输入<code>http://localhost/consumer/payment/consul</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/12.png"></p>
</li>
</ol>
<h2 id="三者的异同点"><a href="#三者的异同点" class="headerlink" title="三者的异同点"></a>三者的异同点</h2><table>
<thead>
<tr>
<th align="center">组件名</th>
<th align="center">语言</th>
<th align="center">CAP</th>
<th align="center">服务健康检查</th>
<th>对外暴露接口</th>
<th>Spring Cloud基成</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Eureka</td>
<td align="center">Java</td>
<td align="center">AP</td>
<td align="center">可配支持</td>
<td>HTTP</td>
<td>已集成</td>
</tr>
<tr>
<td align="center">Consul</td>
<td align="center">GO</td>
<td align="center">CP</td>
<td align="center">支持</td>
<td>HTTP|DNS</td>
<td>已集成</td>
</tr>
<tr>
<td align="center">Zookeeper</td>
<td align="center">Java</td>
<td align="center">CP</td>
<td align="center">支持</td>
<td>客户端</td>
<td>已集成</td>
</tr>
</tbody></table>
<h3 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a>CAP原则</h3><ol>
<li><p><strong>C (Consistency) 一致性</strong> :</p>
<p>​    一致性指的是所有节点在同一时间的数据完全一致。</p>
</li>
<li><p><strong>A (Availability) 可用性</strong> :</p>
<p>​    可用性指服务一直可用，保证每个请求不管成功或者失败都有响应，而且是正常响应时间。</p>
</li>
<li><p><strong>P (Partition tolerance) 分区容错性</strong> :</p>
<p>​    分区容错性指在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/14.png"></p>
<p>​    CAP原则又称CAP定理，指的是在一个分布式系统中，一致性 (Consistency)、可用性(Availability) 、分区容错性(Partition tolerance)。CAP原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p>
<p>​    CAP的三进二: CA、AP、CP</p>
<h3 id="CAP原则的核心"><a href="#CAP原则的核心" class="headerlink" title="CAP原则的核心"></a>CAP原则的核心</h3><ol>
<li>一个分布式系统不可能同时很好的满足<strong>一致性</strong>，<strong>可用性</strong>和<strong>分区容错性</strong>这三个需求</li>
<li>根据CAP原则,将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类:<ul>
<li>CA:单点集群，满足一致性，可用性的系统，通常可扩展性较差</li>
<li>CP:满足一致性,分区容错性的系统，通常性能不是特别高</li>
<li>AP:满足可用性,分区容错性的系统，通常可能对一致性要求低一些</li>
</ul>
</li>
</ol>
<h3 id="作为服务注册中心，Eureka比Zookeeper好在哪里"><a href="#作为服务注册中心，Eureka比Zookeeper好在哪里" class="headerlink" title="作为服务注册中心，Eureka比Zookeeper好在哪里?"></a>作为服务注册中心，Eureka比Zookeeper好在哪里?</h3><p>​    <code>著名的CAP理论指出，一个分布式系统不可能同时满足C (一致性)、A (可用性)、P (容错性)。由于分区容错性P在分布式系统中是必须要保证的，因此我们只能在A和C之间进行权衡。</code></p>
<p>**Zookeeper保证的是CP **</p>
<p>​    当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。<strong>但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时,剩余节点会重新进行leader选举。问题在于，选举leader的时间太长,30~120s，且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。</strong>在云部署的环境下，因为网络问题使得zk集群失去master’节点是较大概率会发生的事件，虽然服务最终能够恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p>
<p><strong>Eureka保证的是AP</strong></p>
<p>​    Eureka看明白了这一点, 因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在, 就能保住注册服务的可用性,只不过查到的信息可能不是最新的，除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况:</p>
<ol>
<li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</li>
<li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上(即保证当前节点依然可用)</li>
<li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li>
</ol>
<p>  <strong>因此,Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像Zookeeper那样使整个注册服务瘫痪</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记07---服务网关Gateway</title>
    <url>/HuaStarOS.github.io/2021/01/26/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3GateWay/</url>
    <content><![CDATA[<h1 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h1><p>​    服务网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。服务网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。服务网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。</p>
<p><strong>服务网关是什么</strong></p>
<ul>
<li><p>网关统一服务入口，可方便实现对平台众多服务接口进行管控，对访问服务的身份认证、防报文重放与防数据篡改、功能调用的业务鉴权、响应数据的脱敏、流量与并发控制，甚至基于API调用的计量或者计费等等。</p>
</li>
<li><p>网关 = 路由转发 + 过滤器<code>路由转发：接收一切外界请求，转发到后端的微服务上去； </code>在服务网关中可以完成一系列的横切功能，例如权限校验、限流以及监控等，这些都可以通过过滤器完成</p>
</li>
</ul>
<p><strong>服务网关有什么用</strong></p>
<ul>
<li><p>网关可以实现服务的统一管理</p>
</li>
<li><p>网关可以解决微服务中通用代码的冗余问题</p>
</li>
</ul>
<p><strong>服务网关有哪些功能</strong></p>
<ul>
<li>性能：API高可用，负载均衡，容错机制。</li>
<li>安全：权限身份认证、脱敏，流量清洗，后端签名（保证全链路可信调用）,黑名单（非法调用的限制）。</li>
<li>日志：日志记录（spainid,traceid）一旦涉及分布式，全链路跟踪必不可少。</li>
<li>缓存：数据缓存。</li>
<li>监控：记录请求响应数据，api耗时分析，性能监控。</li>
<li>限流：流量控制，错峰流控，可以定义多种限流规则。</li>
<li>灰度：线上灰度部署，可以减小风险。</li>
<li>路由：动态路由规则</li>
</ul>
<p>目前，比较流行的网关有：Nginx 、 Kong 、Orange等等，还有微服务网关Zuul 、Spring Cloud Gateway等等</p>
<h1 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h1><p>​    Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如：熔断、限流、重试等。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/1.png" alt="image-20210126113608116"></p>
<p>​    Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>
<p>​    Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，Spring Cloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p>
<p>​    Spring Cloud Gateway 的目标，不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p>
<p><strong>Spring Cloud Gateway 使用Webflux中的reactor-netty响应式编程组件，底层使用了高性能的通信框架Netty</strong>。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol>
<li>反向代理</li>
<li>权限检查</li>
<li>流量控制</li>
<li>熔断</li>
<li>日志监控</li>
</ol>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>Spring Cloud官方，对Spring Cloud Gateway 特征介绍如下：</p>
<ul>
<li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0进行构建</li>
<li>动态路由：能够匹配如何请求属性</li>
<li>集成 Hystrix 断路器</li>
<li>集成 Spring Cloud DiscoveryClient</li>
<li>Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters</li>
<li>具备一些网关的高级功能：限流、路径重写</li>
</ul>
<h2 id="源码架构"><a href="#源码架构" class="headerlink" title="源码架构"></a>源码架构</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/2.png" alt="image-20210126120011844"></p>
<h2 id="Spring-Cloud-Gateway-与-Zuul的区别"><a href="#Spring-Cloud-Gateway-与-Zuul的区别" class="headerlink" title="Spring Cloud Gateway 与 Zuul的区别"></a>Spring Cloud Gateway 与 Zuul的区别</h2><ol>
<li><p>Zuul 1.x 基于Servlet 2.5使用阻塞架构它不支持任何长连接(如 WebSocket) Zuul 的设计模式和Nginx较像，每次1/ O 操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx 用C++实现，Zuul 用 Jaya 实现，而JVM 本身会有第一次加载较慢的情况，使得Zuul 的性能相对较差。</p>
</li>
<li><p>Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。 Zuul 2.x的性能较 Zuul 1.× 有较大提升。在性能方面，根据官方提供的基准测试，Spring Cloud Gateway 的 RPS（每秒请求数）是Zuul 的 1. 6 倍。</p>
</li>
<li><p>Spring Cloud Gateway 建立在 Spring Framework 5、 Project Reactor 和 Spring Boot 2 之上，使用非阻塞 API。</p>
</li>
<li><p>Spring Cloud Gateway 还支持 WebSocket，并且与Spring紧密集成拥有更好的开发体验</p>
</li>
</ol>
<h3 id="Zuul的IO模型"><a href="#Zuul的IO模型" class="headerlink" title="Zuul的IO模型"></a><strong>Zuul的IO模型</strong></h3><p>Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型。</p>
<p>大家知道，servlet由servlet container进行生命周期管理。</p>
<ol>
<li>container启动时构造servlet对象并调用servlet init()进行初始化；</li>
<li>container关闭时调用servlet destory()销毁servlet；</li>
<li>container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。</li>
</ol>
<p>弊端：servlet是一个简单的网络IO模型，当请求进入servlet container时，servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的，但是一旦并发上升，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单的业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/3.png" alt="image-20210126120500575"></p>
<h3 id="Webflux框架"><a href="#Webflux框架" class="headerlink" title="Webflux框架"></a><strong>Webflux框架</strong></h3><p>​    传统的Web框架，比如说：struts2，springmve等都是基于Servlet API与Servlet容器基础之上运行的。</p>
<p>​    但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程（Spring5必须让你使用java8)。</p>
<p>​    Spring WebFlux 是 Spring 5.0 引入的新的响应式框架，区别于 Spring MVC，它不需要依赖Servlet API，它是完全异步非阻塞的，并且基于 Reactor 来实现响应式流规范。</p>
<p>​    Webflux模式替换了旧的Servlet线程模型。<strong>用少量的线程处理request和response io操作</strong>，这些线程称为Loop线程，而业务交给响应式编程框架处理，响应式编程是非常灵活的，用户可以将业务中阻塞的操作提交到响应式框架的work线程中执行，而不阻塞的操作依然可以在Loop线程中进行处理，大大提高了Loop线程的利用率。官方结构图：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/4.png" alt="image-20210126121554155"></p>
<h2 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a>三大核心概念</h2><p><strong>Route（路由）</strong>： 路由是网关的基本组件。它由ID、目标URI、以及一系列的断言和过滤器组成。如果断言为true，则匹配路由</p>
<p><strong>Predicate（断言）</strong> ： <code>参考的是Java8的java.util.funlction.Predicate</code>。开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数),如果请求与断言相匹配则进行路由<code>(也就是转发)</code></p>
<p><strong>Filter（过滤）</strong> ： 是GatewayFilter的一个实例，使用过滤器，可以在路由之前或之后修改请求和响应</p>
<h3 id="总体"><a href="#总体" class="headerlink" title="总体"></a><strong>总体</strong></h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/5.png" alt="image-20210126123205938"></p>
<p>​    Web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。</p>
<p>​    predicate就是我们的匹配条件；而filter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了。</p>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/6.png" alt="image-20210126142857071"></p>
<p>​    客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p>
<p>​    Filter在“pre”可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在“post”可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p>
<h2 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h2><ol>
<li><p>新建模块cloud-gateway-gateway9527</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client(通过微服务名实现动态路由)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayMain9527.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置路由，修改yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route</span> 		 <span class="comment"># 路由的id,没有规定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span> <span class="comment"># 匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> 	 <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span> 	<span class="comment"># 断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>各字段含义如下：</p>
<p>id：我们自定义的路由 ID，保持唯一</p>
<p>uri：目标服务地址</p>
<p>predicates：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。</p>
<p>上面这段配置的意思是，配置了一个 id 为 url-proxy-1的URI代理规则，路由的规则为：</p>
<p>当访问地址<code>http://localhost:9527/get/11</code>时，就会路由到地址<code>http://localhost:8001/get/11</code>。</p>
<p>当访问地址<code>http://localhost:9527/lb</code>时，就会路由到地址<code>http://localhost:8001/lb</code>。</p>
</li>
</ol>
<ol start="6">
<li><p>进行测试，启动7001，8001，9527</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/7.png" alt="image-20210126145404679"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/8.png" alt="image-20210126145452614"></p>
</li>
</ol>
<p><strong>总结：</strong> 通过测试结果可以看出Gateway网关会根据<code>断言predicates</code>进行匹配，匹配成功之后会将请求路由到真实地址。这样我们可以隐藏我们真实的服务端口</p>
<h2 id="Gateway网关的路由配置方式"><a href="#Gateway网关的路由配置方式" class="headerlink" title="Gateway网关的路由配置方式"></a>Gateway网关的路由配置方式</h2><h3 id="基于yml文件配置方式"><a href="#基于yml文件配置方式" class="headerlink" title="基于yml文件配置方式"></a>基于yml文件配置方式</h3><p>即在yml配置文件中进行配置，例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route</span> 		 <span class="comment"># 路由的id,没有规定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span> <span class="comment"># 匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> 	 <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span> 	<span class="comment"># 断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="基于代码的配置方式"><a href="#基于代码的配置方式" class="headerlink" title="基于代码的配置方式"></a>基于代码的配置方式</h3><p>即在代码中编写路由配置再注入容器中使用。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">&quot;path_route_angenin&quot;</span>,  <span class="comment">//id</span></span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>)  <span class="comment">//访问 http://localhost:9527/guonei</span></span><br><span class="line">                        .uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>));  <span class="comment">//就会转发到 http://news.baidu.com/guonei</span></span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">&quot;path_route_angenin2&quot;</span>,  <span class="comment">//id</span></span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guoji&quot;</span>)  <span class="comment">//访问 http://localhost:9527/guoji</span></span><br><span class="line">                        .uri(<span class="string">&quot;http://news.baidu.com/guoji&quot;</span>));  <span class="comment">//就会转发到 http://news.baidu.com/guonji</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost:9527/guonei</code>就会转发到<code>http://news.baidu.com/guonei</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/9.png" alt="image-20210126150652048"></p>
<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>​    <strong>通过微服务名实现动态路由</strong>：默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能。</p>
<p>​    在uri的schema协议部分为自定义的lb:类型，表示从微服务注册中心（如Eureka）订阅服务<code>即获取服务的信息（比如：端口号和IP地址）</code>，并且启用Gateway的负载均衡功能。</p>
<p><strong>修改yml文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名称进行路由(默认false)</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route</span> <span class="comment">#路由的id,没有规定规则但要求唯一,建议配合服务名</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:8001  #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route2</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:8001</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span> <span class="comment">#断言,路径相匹配的进行路由</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/10.png" alt="image-20210126152325509"></p>
<p><strong>测试</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/11.png" alt="image-20210126152440709"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/12.png" alt="image-20210126152452517"></p>
<h2 id="路由匹配规则"><a href="#路由匹配规则" class="headerlink" title="路由匹配规则"></a>路由匹配规则</h2><p>​    Spring Cloud Gateway 的功能很强大，我们仅仅通过 Predicates 的设计就可以看出来，前面我们只是使用了 predicates 进行了简单的条件匹配，其实 Spring Cloud Gataway 帮我们内置了很多 Predicates 功能。</p>
<p>​    Spring Cloud Gateway 是通过 Spring WebFlux 的 HandlerMapping 做为底层支持来匹配到对应的路由，Spring Cloud Gateway 内置了很多 Predicates Factory，这些 Predicates Factory通过不同的 HTTP 请求参数来匹配，多个 Predicates Factory可以组合使用。</p>
<p>​    在启动Gateway的时候，可以发现：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/13.png" alt="image-20210126154126248"></p>
<p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.6.RELEASE/reference/html/#gateway-request-predicates-factories">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.6.RELEASE/reference/html/#gateway-request-predicates-factories</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/14.png" alt="image-20210126154917776"></p>
<p>​    Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。</p>
<p>​    Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个RoutePredicate工厂可以进行组合</p>
<p>​    Spring Cloud Gateway 创建 Route 对象时，使用 Route Predicate Factories创建 Predicate 对象，Predicate 对象可以赋值给Route。 Spring Cloud Gateway 包含许多内置的Route Predicate Factories。</p>
<p>​    所有这些Predicate 都匹配HTTP请求的不同属性。多种Predicate Factories可以组合，并通过逻辑and。</p>
<h3 id="常用的Route-Predicate"><a href="#常用的Route-Predicate" class="headerlink" title="常用的Route Predicate"></a><strong>常用的Route Predicate</strong></h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/15.png" alt="image-20210126162011774"></p>
<p>​    说白了 Predicate 就是为了实现一组匹配规则，方便让请求过来找到对应的 Route 进行处理，接下来我们接下 Spring Cloud GateWay 内置几种 Predicate 的使用。</p>
<ul>
<li>转发规则（predicates），假设 转发uri都设定为<a href="http://localhost:8001/">http://localhost:8001</a></li>
</ul>
<table>
<thead>
<tr>
<th align="center">规则</th>
<th align="center">实例</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Path</td>
<td align="center">- Path=/get/**</td>
<td align="center">请求的路径要有/get时，才会转发到<a href="http://localhost:8001服务器上">http://localhost:8001服务器上</a></td>
</tr>
<tr>
<td align="center">Before</td>
<td align="center">- Before=2020-10-20T17:42:47.789-07:00[America/Denver]</td>
<td align="center">在某个时间之前的请求才会被转发到 <a href="http://localhost:8001服务器上">http://localhost:8001服务器上</a></td>
</tr>
<tr>
<td align="center">After</td>
<td align="center">- After=2020-10-20T17:42:47.789-07:00[America/Denver]</td>
<td align="center">在某个时间之后的请求才会被转发</td>
</tr>
<tr>
<td align="center">Between</td>
<td align="center">- Between=2020-10-20T17:42:47.789-07:00[America/Denver],2020-10-21T17:42:47.789-07:00[America/Denver]</td>
<td align="center">在某个时间段之间的才会被转发</td>
</tr>
<tr>
<td align="center">Cookie</td>
<td align="center">- Cookie=username, qzh</td>
<td align="center">请求带Cookie，并且cookie名为username且值为qzh</td>
</tr>
<tr>
<td align="center">Header</td>
<td align="center">- Header=X-Request-Id, \d+</td>
<td align="center">请求头携带参数X-Request-Id或者满足\d+的请求头才会匹配</td>
</tr>
<tr>
<td align="center">Host</td>
<td align="center">- Host=<a href="http://www.qzh.com/">www.qzh.com</a></td>
<td align="center">当主机名为<a href="http://www.qzh.com的时候直接转发到http//localhost:8001%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A">www.qzh.com的时候直接转发到http://localhost:8001服务器上</a></td>
</tr>
<tr>
<td align="center">Method</td>
<td align="center">- Method=GET</td>
<td align="center">只有GET方法才会匹配转发请求，还可以限定POST、PUT等请求方式</td>
</tr>
<tr>
<td align="center">Query</td>
<td align="center">-Query=username,\d+</td>
<td align="center">请求参数中必须要有username并且值还要为整数才能转发请求</td>
</tr>
</tbody></table>
<p><strong>测试</strong></p>
<p><strong>Header</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span>   <span class="comment">#请求头要有X-Request-Id属性并且值要为整数,  /d+ 是正则表达式</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/16.png" alt="image-20210126163251635"></p>
<p><strong>Cookie</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Cookie=username,qzh</span> <span class="comment">#请求带Cookie，并且cookie名为username且值为qzh才能路由</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/17.png" alt="image-20210126163233370"></p>
<p><strong>Host</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Host=**.HuaStarOS.com</span>     <span class="comment">#主机地址必须是**.HuaStarOS.com  才能进行路由 </span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/18.png" alt="image-20210126163321615"></p>
<p><strong>Query</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Query=username,\d+</span>        <span class="comment">#请求参数中必须要有username并且值还要为整数才能路由</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/19.png" alt="image-20210126163337419"></p>
<p>其他的Predicates都是类似的。这里就不在赘述</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    <strong>说白了，Predicate就是为了实现一组匹配规则，让请求过来之后找到对应的Route进行处理</strong></p>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>​    路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway 内置了多种路由过滤器，他们都由Gateway Filter的工厂类来产生。</p>
<p>​    spring cloud提供的过滤器有GatewayFilter（31种）Global Filter（10种）一个41种，下面列举了一些例子，有兴趣的同学，可以查看官网。</p>
<p><strong>filter的生命周期</strong></p>
<p>​    pre：在业务逻辑之前</p>
<p>​    post：在业务逻辑之后</p>
<p><strong>filter的种类</strong></p>
<p>​    GatewayFilter：单一</p>
<p>​    GlobalFilter：全局</p>
<h3 id="过滤器规则（Filter）"><a href="#过滤器规则（Filter）" class="headerlink" title="过滤器规则（Filter）"></a>过滤器规则（Filter）</h3><table>
<thead>
<tr>
<th align="left">过滤规则</th>
<th align="left">实例</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PrefixPath</td>
<td align="left">- PrefixPath=/app</td>
<td align="left">在请求路径前加上app</td>
</tr>
<tr>
<td align="left">RewritePath</td>
<td align="left">- RewritePath=/test, /app/test</td>
<td align="left">访问localhost:9022/test,请求会转发到localhost:8001/app/test</td>
</tr>
<tr>
<td align="left">SetPath</td>
<td align="left">SetPath=/app/{path}</td>
<td align="left">通过模板设置路径，转发的规则时会在路径前增加app，{path}表示原请求路径</td>
</tr>
<tr>
<td align="left">RedirectTo</td>
<td align="left"></td>
<td align="left">重定向</td>
</tr>
<tr>
<td align="left">RemoveRequestHeader</td>
<td align="left"></td>
<td align="left">去掉某个请求头信息</td>
</tr>
</tbody></table>
<p><strong>注：当配置多个filter时，优先定义的会被调用，剩余的filter将不会生效</strong></p>
<h3 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h3><p><strong>PrefixPath</strong>对所有的请求路径添加前缀：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">prefixpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PrefixPath=/mypath</span></span><br></pre></td></tr></table></figure>

<p>访问/hello的请求被发送到<a href="https://qzh.com/mypath/hello%E3%80%82">https://qzh.com/mypath/hello。</a></p>
<p><strong>RedirectTo</strong>重定向，配置包含重定向的返回码和地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">redirectTo_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RedirectTo=302,</span> <span class="string">https://www.baidu.com</span></span><br></pre></td></tr></table></figure>

<p><strong>RemoveRequestHeader</strong>去掉某个请求头信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestHeader=X-Request-qzh</span></span><br></pre></td></tr></table></figure>

<p>去掉请求头信息 X-Request-qzh</p>
<p>**RemoveResponseHeader **去掉某个响应头信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveResponseHeader=X-Request-qzh</span></span><br></pre></td></tr></table></figure>

<p>**RemoveRequestParameter **去掉某个请求参数信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestparameter_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestParameter=red</span></span><br></pre></td></tr></table></figure>

<p><strong>RewritePath</strong> 改写路径：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewrite_filter</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/where/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/where(?&lt;segment&gt;/?.*),</span> <span class="string">/test(?&lt;segment&gt;/?.*)</span></span><br></pre></td></tr></table></figure>

<p>/where/… 改成 test/…</p>
<h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><p>自定义全局过滤器要实现两个接口<code> GlobalFilter</code>、<code>Ordered </code>。</p>
<p>自定义过滤器的功能 ：全局日志记录、统一网关鉴权等等·····</p>
<p>创建MyLogGateWayFilter类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;**************come in MyLogGateWayFilter：&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//获取request中的username参数</span></span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;*******用户名为null，非法用户！！&quot;</span>);</span><br><span class="line">            <span class="comment">//设置响应，不被接受</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">			<span class="comment">//拒绝请求</span></span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回chain.filter(exchange)，放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回值是过滤器的优先级，越小优先级越高（最小-2147483648，最大2147483648）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p>在浏览器中输入<code>http://localhost:9527/payment/lb?username=111</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/20.png" alt="image-20210126174746564"></p>
<p>在浏览器中输入<code>http://localhost:9527/payment/lb</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/21.png"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记05---服务调用Ribbon和OpenFeign</title>
    <url>/HuaStarOS.github.io/2021/01/08/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-Ribbon%E5%92%8COpenFeign/</url>
    <content><![CDATA[<h2 id="Ribbon负载均衡服务调用"><a href="#Ribbon负载均衡服务调用" class="headerlink" title="Ribbon负载均衡服务调用"></a>Ribbon负载均衡服务调用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</li>
<li>Spring-Cloud-Ribbon 作为微服务框架的负载均衡组件，默认使用<strong>RestTemplate接口</strong>调用外部服务接口。</li>
<li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法</li>
</ul>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul>
<li><p>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</p>
</li>
<li><p><strong>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。</strong></p>
</li>
<li><p>常见的负载均衡软件有 Nginx、Lvs 等等。</p>
</li>
<li><p>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</p>
</li>
<li><p>负载均衡简单分类：</p>
<ul>
<li><p>集中式LB</p>
<ul>
<li>即在服务的提供方和消费方之间使用独立的LB设施，如<strong>Nginx(反向代理服务器)**，客户端所有的请求都会交给 **Nginx</strong>,然后由 <strong>Nginx</strong>实现请求的转发，即负载均衡是由服务器实现的(<strong>Nginx</strong>)</li>
</ul>
</li>
<li><p>进程式 LB</p>
<ul>
<li>将LB逻辑集成到服务消费者，服务消费者从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器进行调用。</li>
<li><strong>Ribbon 就属于进程内LB</strong>，它只是一个类库，集成于服务消费者进程，服务消费者通过它来获取到服务提供者的地址！  </li>
</ul>
</li>
</ul>
</li>
<li><p>在调用服务提供者暴露的接口的时候，<strong>Ribbon</strong>会在注册中心上获取到服务提供者的信息列表(比如：IP地址和端口号等等)，之后再缓存到<strong>JVM</strong>本地。然后再从这些地址中选出一个合适的服务器进行调用。从而在<strong>本地实现HTTP远程调用</strong>，默认是30秒刷新一次。</p>
</li>
</ul>
<p>  回顾一些之前的学习，当在<code>RestTemplate</code>上加了<code>@LoadBalanced</code>之后。就能通过服务名称   <code>http://cloud-payment-service</code>调用服务提供者暴露的方法了。注意一个细节当服务消费者发起请求的时候，查看控制台输出的日志，可以知道在调用服务提供者暴露的接口的时候，<strong>Ribbon</strong>会在注册中心上获取到服务提供者的信息列表(比如：IP地址和端口号等等)，然后再从这些地址中选出一个合适的服务器进行调用。</p>
<p>  <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/1.png" alt="image-20210108032155292"></p>
<h3 id="使用Ribbon"><a href="#使用Ribbon" class="headerlink" title="使用Ribbon"></a>使用Ribbon</h3><p>​    <strong>Ribbon</strong>其实就是一个软负载均衡的客户端组件。它可以和其他发起请求的客户端结合使用，和<strong>Eureka</strong>结合只是其中的一个实例。</p>
<ol>
<li><p><strong>Ribbon原理图</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/2.png" alt="image-20210108033334005"></p>
</li>
<li><p><strong>Ribbon</strong>在工作的时候分成两步</p>
<ol>
<li><p>第一步先选择<strong>Eureka Server</strong>(注册中心集群)，它优先选择在同一个区域内负载较少的<strong>Server</strong>（注册中心）</p>
</li>
<li><p>第二步再根据指定的负载均衡策略，在从注册中心取到的服务提供者列表中选择一个地址进行调用。</p>
<p>其中<strong>Ribbon</strong>提供了多种负载均衡策略：比如轮询、随机和根据响应时间加权</p>
</li>
</ol>
</li>
</ol>
<ol start="3">
<li><p>在项目中使用<strong>Ribbon</strong></p>
<p>新版的eureka依赖以及集成了Ribbon依赖，所以可以不引用。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/3.png" alt="image-20210108040215352"></p>
<p>当然也可以引用在<strong>pom</strong>文件添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ribbon的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><p><code>@LoadBalanced</code>注解给RestTemplate开启负载均衡的能力。</p>
<p>官方文档：<a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p>
<p><strong>getForObject/getForEntity方法</strong><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/4.png" alt="image-20210108041742361"></p>
<h4 id="测试getForEntity方法"><a href="#测试getForEntity方法" class="headerlink" title="测试getForEntity方法"></a>测试getForEntity方法</h4><p>​    getForObject已经用过了，所以只测试getForEntity方法。 在消费者cloud-consumer-order80的OrderController方法中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/getEntity/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;********查询的id：&quot;</span> + id);</span><br><span class="line">    <span class="comment">//getForObject两个参数：请求地址，返回的对象类型</span></span><br><span class="line">    <span class="comment">//return restTemplate.getForObject(PAYMENT_URL + &quot;/payment/get/&quot; + id, CommonResult.class);</span></span><br><span class="line">    ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getStatusCode获取状态码，is2xxSuccessful如果是状态码是2xx</span></span><br><span class="line">    <span class="keyword">if</span>(entity.getStatusCode().is2xxSuccessful())&#123;</span><br><span class="line">        <span class="comment">//返回响应体body</span></span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入<code>http://localhost/consumer/payment/getForEntity/8</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/5.png" alt="image-20210108042128482"></p>
<h4 id="测试postForEntity方法"><a href="#测试postForEntity方法" class="headerlink" title="测试postForEntity方法"></a>测试postForEntity方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment2/create&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create2</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;CommonResult&gt; entity = restTemplate.postForEntity(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入<code>http://localhost/consumer/payment2/create?serial=JAVA</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/6.png" alt="image-20210108042527573"></p>
<h3 id="Ribbon核心组件IRule"><a href="#Ribbon核心组件IRule" class="headerlink" title="Ribbon核心组件IRule"></a>Ribbon核心组件IRule</h3><p>IRUle接口的实现类：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/7.png" alt="image-20210108042836547"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/8.png" alt="image-20210108043359760"></p>
<p><strong>默认为RoundRobinRule轮询</strong></p>
<p>替换</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/9.png" alt="image-20210108045023083"></p>
<p><strong>Ribbon的自定义配置类不推荐放在@ComponentScan所扫描的当前包下以及子包下</strong>，否则这个自定义配置类就会被所有的Ribbon客户端共享，达不到为指定的Ribbon定制配置，<strong>而@SpringBootApplication注解里就有@ComponentScan注解</strong>，所以不可以放在主启动类所在的包下。（因为Ribbon是客户端（消费者）这边的，所以Ribbon的自定义配置类是在客户端（消费者）添加，不需要在提供者或注册中心添加）</p>
<ol>
<li><p>Ribbon的自定义配置类不能放在springcloud包下，要在qzh包下再新建一个myrule包。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/10.png" alt="image-20210108045300134"></p>
</li>
<li><p>在此包下新建MySelfRule自定义配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyselfRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类上添加</p>
<p><code>@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MySelfRule.class)</code><br>name为指定的服务名（服务名必须与注册中心显示的服务名大小写一致）<br>configuration为指定服务使用自定义配置（自定义负载均衡机制）</p>
</li>
<li><p>启动eurekaserver集群，提供者集群，消费者。</p>
</li>
<li><p>浏览器输入<code>http://localhost/consumer/payment/get/8</code>，多次刷新实现负载均衡为随机。</p>
</li>
</ol>
<h3 id="Ribbon负载均衡—轮询算法"><a href="#Ribbon负载均衡—轮询算法" class="headerlink" title="Ribbon负载均衡—轮询算法"></a>Ribbon负载均衡—轮询算法</h3><h4 id="RoundRobinRule原理"><a href="#RoundRobinRule原理" class="headerlink" title="RoundRobinRule原理"></a>RoundRobinRule原理</h4><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/11.png" alt="image-20210108045634122"></p>
<h4 id="RoundRobinRule源码"><a href="#RoundRobinRule源码" class="headerlink" title="RoundRobinRule源码"></a>RoundRobinRule源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobinRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">	<span class="comment">//AtomicInteger原子整形类</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger nextServerCyclicCounter;</span><br><span class="line">	...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundRobinRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//初始化nextServerCyclicCounter,并指定值为0</span></span><br><span class="line">        nextServerCyclicCounter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">//选择负载均衡机制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//如果传入的ILoadBalancer负载均衡器为空，返回null</span></span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;no load balancer&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//进行选择server</span></span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        	<span class="comment">//lb.getReachableServers()从注册中心获取所有状态是up的服务实例</span></span><br><span class="line">            List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">            <span class="comment">//lb.getAllServers()从注册中心获取所有服务实例</span></span><br><span class="line">            List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">            <span class="comment">//状态为up的服务实例的数量</span></span><br><span class="line">            <span class="keyword">int</span> upCount = reachableServers.size();</span><br><span class="line">            <span class="comment">//所有服务实例的数量</span></span><br><span class="line">            <span class="keyword">int</span> serverCount = allServers.size();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//如果up的服务实例数量为0或者服务实例为0，返回null</span></span><br><span class="line">            <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;No up servers available from load balancer: &quot;</span> + lb);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//确定要选择哪个服务实例，通过下标选择</span></span><br><span class="line">            <span class="keyword">int</span> nextServerIndex = incrementAndGetModulo(serverCount);</span><br><span class="line">            <span class="comment">//获取服务实例</span></span><br><span class="line">            server = allServers.get(nextServerIndex);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//如果服务实例为空</span></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//线程让步，线程会让出CPU执行权，让其它的线程运行。（让步后，CPU的执行权也有可能又是当前线程）</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="comment">//进入下次循环</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获取的server还活着并且还能工作，则返回该server</span></span><br><span class="line">            <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//否则server改为空</span></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//选择次数超过10次，返回null</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span></span><br><span class="line">                    + lb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//CAS加自旋锁</span></span><br><span class="line">    	<span class="comment">//CAS（Conmpare And Swap）：是用于实现多线程同步的原子指令。CAS机制当中使用了3个基本操作数：内存地址V，预期值A，要修改的新值B。更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为B。</span></span><br><span class="line">    	<span class="comment">//自旋锁：是指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。 </span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        	<span class="comment">//获取value，即0</span></span><br><span class="line">            <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">            <span class="comment">//取余，为1</span></span><br><span class="line">            <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">            <span class="comment">//进行CAS判断，如果此时在value的内存地址中，如果value和current相同，则为true，返回next的值，否则就一直循环，直到结果为true</span></span><br><span class="line">            <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="手写一个轮询算法"><a href="#手写一个轮询算法" class="headerlink" title="手写一个轮询算法"></a>手写一个轮询算法</h4><ol>
<li><p>在8001和8002的PaymentController中加上这个方法，用于测试我们的自定义轮询算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/lb&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> serverPort;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务消费者cloud-consumer-order80改造</p>
<ol>
<li><p>去掉config包中ApplicationContextConfig里getRestTemplate方法上的<code>@LoadBalanced</code>注解。</p>
</li>
<li><p>在springcloud包下新建loadbalancer.MyLoadBalancer接口（自定义负载均衡机制（面向接口））</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyLoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入服务实例的集合，返回选中的服务实例</span></span><br><span class="line">    <span class="function">ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstance)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在lb包下新建自定义MyLoadBalancer接口的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//加入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLB</span> <span class="keyword">implements</span> <span class="title">ILoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建一个原子整形类</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取选中的服务实例的下标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            current = <span class="keyword">this</span>.atomicInteger.get();</span><br><span class="line">            <span class="comment">//如果current是Integer的最大值，重新计算，否则加1（防止越界）</span></span><br><span class="line">            next = current &gt;= Integer.MAX_VALUE ? <span class="number">0</span> : current + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行CAS判断，如果不为true，进行自旋</span></span><br><span class="line">        &#125;<span class="keyword">while</span> (!<span class="keyword">this</span>.atomicInteger.compareAndSet(current, next));</span><br><span class="line">        System.out.println(<span class="string">&quot;****第几次访问，次数next：&quot;</span> + next);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstance)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//非空判断</span></span><br><span class="line">        <span class="keyword">if</span>(serviceInstance.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行取余</span></span><br><span class="line">        <span class="keyword">int</span> index = getAndIncrement() % serviceInstance.size();</span><br><span class="line">        <span class="comment">//返回选中的服务实例</span></span><br><span class="line">        <span class="keyword">return</span> serviceInstance.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在OrderController添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> MyLoadBalancer myLoadBalancer;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">      	</span><br><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/lb&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取CLOUD-PAYMENT-SERVICE服务的所有具体实例</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(instances == <span class="keyword">null</span> || instances.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    ServiceInstance serviceInstance = myLoadBalancer.instances(instances);</span><br><span class="line">    URI uri = serviceInstance.getUri();</span><br><span class="line">    System.out.println(uri);</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(uri + <span class="string">&quot;/payment/lb&quot;</span>, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中输入<code>http://localhost/consumer/payment/lb</code>，多次刷新，实现自定义轮询算法。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/12.png" alt="image-20210108052138269"></p>
</li>
</ol>
</li>
</ol>
<h2 id="OpenFeign服务接口调用"><a href="#OpenFeign服务接口调用" class="headerlink" title="OpenFeign服务接口调用"></a>OpenFeign服务接口调用</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p>
<p><strong>只需要创建一个接口，然后添加注解即可~</strong></p>
<p>Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法</p>
<ol>
<li>微服务名字 【ribbon】</li>
<li>接口和注解 【feign】</li>
</ol>
<p><strong>Feign能干什么？</strong></p>
<ul>
<li>Feign旨在使编写Java Http客户端变得更容易</li>
<li>前面在使用<strong>Ribbon</strong> + <strong>RestTemplate</strong>时，利用<strong>RestTemplate</strong>对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，<strong>Feign</strong>在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li>
</ul>
<p><strong>Feign默认集成了Ribbon</strong></p>
<ul>
<li>利用<strong>Ribbon</strong>维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与<strong>Ribbon</strong>不同的是，通过<strong>Feign</strong>只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li>
</ul>
<p>官方文档：<a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html">https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html</a></p>
<p><strong>Feign与OpenFeign的区别</strong></p>
<table>
<thead>
<tr>
<th align="center">Feign</th>
<th align="center">OpenFeign</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Feign是Spring Cloud组件中的一个轻量级RESTfu的HTTP服务客户端。Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口就可以调用服务注册中心的服务</td>
<td align="center">OpenFeign是Spring Cloud 在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td>
</tr>
<tr>
<td align="center"><dependency>     <groupId>org.springframework.cloud</groupId>     <artifactId>spring-cloud-starter-feign</artifactId>                        </dependency></td>
<td align="center"><dependency>     <groupId>org.springframework.cloud</groupId>     <artifactId>spring-cloud-starter-openfeign</artifactId>                  </dependency></td>
</tr>
</tbody></table>
<h3 id="OpenFeign的使用-在服务消费者端"><a href="#OpenFeign的使用-在服务消费者端" class="headerlink" title="OpenFeign的使用(在服务消费者端)"></a>OpenFeign的使用(在服务消费者端)</h3><ol>
<li><p>新建模块cloud-consumer-feign-order80</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--引入 openfeign --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--引入 eureka-client --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--引入自己的API通用包--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启FeignClient客户端功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>在springcloud包下新建service.PaymentFeignService接口，在接口上添加注解<code>@FeignClient</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//openFeign整合了Ribbon和RestTemplate，实现负载均衡和发送请求</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span>    <span class="comment">//作为feign客户端，找CLOUD-PAYMENT-SERVICE服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接复制8001的方法</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在springcloud包下新建controller.OrderFeignController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/getFeign/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//open-feign 整合了ribbon，消费者客户端一般默认等待一秒钟</span></span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.paymentFeignTimeout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>测试，在浏览器输入<code>http://localhost/consumer/payment/get/1</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/13.png" alt="image-20210108055130361"></p>
</li>
</ol>
<p><strong>总结：</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/14.png" alt="image-20210108060351054"></p>
<p>​    <strong>openfeign是通过feign接口的方法是的<code>@RequestMapping</code>注解来绑定服务提供者中具体的方法。</strong></p>
<h3 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h3><p>提供者在处理服务时用了3秒，提供者认为花3秒是正常，而消费者只愿意等1秒，1秒后，提供者会没返回数据，消费者就会造成超时调用报错。<strong>所以需要双方约定好时间，不使用默认的</strong>。</p>
<p><strong>模拟超时出错的情况</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/15.png" alt="image-20210108060631001"></p>
<ol>
<li><p>在服务提供者8001的PaymentController里添加：（模拟服务处理时间长）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//暂停执行几秒钟线程</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> serverPort;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务消费者80的PaymentFeignService中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务消费者80的OrderFeignController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//open-feign 整合了ribbon，消费者客户端一般默认等待一秒钟</span></span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.paymentFeignTimeout();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，因为只修改8001了，所以只启动8001，不然会报错</p>
<p>在浏览器中输入<code>http://localhost/consumer/payment/feign/timeout</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/16.png" alt="image-20210108061515612"></p>
</li>
</ol>
<p>​    <strong>默认Feign客户端只等待一秒钟，但是服务端处理需要超过1秒钟，导致Feign客户端不想等待了，直接返回报错。为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。在yml文件中开启</strong></p>
<ol start="5">
<li><p>在服务消费者80的yml中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#没提示不管它，可以设置</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#指的是建立连接使用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新访问<code>http://localhost/consumer/payment/feign/timeout</code>，3秒后显示。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/17.png" alt="image-20210108062128449"></p>
</li>
</ol>
<h3 id="OpenFeign日志打印功能"><a href="#OpenFeign日志打印功能" class="headerlink" title="OpenFeign日志打印功能"></a>OpenFeign日志打印功能</h3><p>Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign 中 Http 请求的细节。说白了就是<strong>对Feign接口的调用情况进行监控和输出</strong></p>
<h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><p>NONE：默认的，不显示任何日志；</p>
<p>BASIC：仅记录请求方法、URL、响应状态码及执行时间;</p>
<p>HEADERS：除了 BASIC 中定义的信息之外，还有请求和响应的头信息；</p>
<p>FULL：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据,</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li><p>配置日志bean对象，在服务消费者80的springcloud包下新建config.FeignConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;	<span class="comment">//不要导错包</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//打印最详细的日志</span></span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml文件中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.qzh.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，在浏览器中输入<code>http://localhost/consumer/payment/getFeign/8</code></p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/18.png" alt="image-20210108062940514"></p>
<h2 id="Feign和Ribbon如何选择？"><a href="#Feign和Ribbon如何选择？" class="headerlink" title="Feign和Ribbon如何选择？"></a>Feign和Ribbon如何选择？</h2><p><strong>根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢面向接口风格使用Feign.</strong></p>
<p>Feign 本质上也是实现了 Ribbon，只不过后者是在调用方式上，为了满足一些开发者习惯的接口调用习惯！</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记09-消息驱动[Stream]与分布式请求链路追踪[Sleuth]</title>
    <url>/HuaStarOS.github.io/2021/01/29/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8%5BStream%5D%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%5BSleuth%5D/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Steam消息驱动"><a href="#Spring-Cloud-Steam消息驱动" class="headerlink" title="Spring Cloud Steam消息驱动"></a>Spring Cloud Steam消息驱动</h1><p>​    <strong>通过之前的学习，我们都可以知道每种技术都是为了解决某一问题而诞生的。</strong></p>
<p>​    那为什么要引进<code>SpringCloud Steam消息驱动</code>这一技术呢？解决的痛点是什么？</p>
<p>​    目前主流的消息中间件有以下四种：</p>
<p>​        <code>ActiveMQ、RabbitMQ、RocketMQ、Kafka</code>等四种</p>
<p>​    这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰。我们如果用了四个消息队列的其中一种，后面的业务需求，想要使用另外一种消息队列进行通信，这时候无疑就是一个灾难性的，两种消息队列的使用必然会加大对项目维护和开发的难度。增加了开发人员的负担。这时候<code>SpringCloud Stream</code>给我们提供了一种解决方案。</p>
<h2 id="什么是Spring-Cloud-Stream"><a href="#什么是Spring-Cloud-Stream" class="headerlink" title="什么是Spring Cloud Stream"></a>什么是Spring Cloud Stream</h2><p>​    官方定义<code>Spring Cloud Stream</code>是一个<strong>构建消息驱动微服务的框架</strong>。</p>
<p>​    应用程序通过inputs或者outputs来与Spring Cloud Stream中binder对象交互。通过我们配置来binding(绑定)而Spring Cloud Stream的binder对象负责与消息中间件交互。所以，我们只需要搞清楚如何与Spring Cloud Stream 交互就可以方便使用消息驱动的方式。</p>
<p>​    通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。Spring Cloud Stream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。<br><code>目前仅支持RabbitMQ、Kafka.</code></p>
<p> <strong>简单来说：屏蔽底层消息中间件的差异，降低切换的成本。统一消息的模型。</strong></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/1.png" alt="image-20210129141227893"></p>
<p>官方文档：<a href="https://spring.io/projects/spring-cloud-stream#overview">https://spring.io/projects/spring-cloud-stream#overview</a></p>
<p>API：<a href="https://docs.spring.io/spring-cloud-stream/docs/3.1.0/reference/html/">https://docs.spring.io/spring-cloud-stream/docs/3.1.0/reference/html/</a></p>
<p>中文指导手册：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p>
<p>​    <code>Spring Cloud Stream</code>是用于构建与共享消息传递系统连接的高度可伸缩的<strong>事件驱动微服务框架</strong>，该框架提供了一个<strong>灵活的编程模型</strong>，它建立在已经建立和熟悉的Spring熟语和最佳实践上，包括支持持久化的发布/门订阅、消费组以及消息分区这三个核心概念。</p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><h3 id="标准MQ"><a href="#标准MQ" class="headerlink" title="标准MQ"></a>标准MQ</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/2.png"></p>
<p>标准MQ的设计思想是：</p>
<ol>
<li>消息生产者和消息消费者之间靠<strong>消息媒介</strong>传递消息内容 <code>Message</code></li>
<li>消息必须走特定的<strong>通道</strong> <code>消息通道MessageChannel</code></li>
<li>消息通道里的消息如何被消费呢，谁负责收发<strong>处理</strong><code>消息通道MessageChannel的子接口SubscribableChannel进行接收,由MessageHandler消息处理器进行处理</code></li>
</ol>
<h3 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h3><p>比方说我们用到了RabbitMQ和Kafka,由于这两个消息中间件的架构上的不同,</p>
<p>像RabbitMQ有exchange，kafka有 Topic和Partitions分区,</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/3.png" alt="image-20210129151745803"></p>
<p>​    在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行消息交互的时候，由于各消息中间件构建的初衷不同,它们的实现细节上会有较大的差异性。<code>通过定义绑定器作为中间层</code>，完美地实现了应用程序与消息中间件细节之间的隔离。通过向应用程序暴露统一的Channel通道， 使得应用程序不需要再考虑各种不同的消息中间件实现。</p>
<p>​    <strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/4.png" alt="image-20210129153405754"></p>
<p>​    <strong>Binder是什么</strong></p>
<p>​    在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行消息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性.<strong>通过定义绑定器作为中间层</strong>，<code>完美地实现了应用程序与消息中间件细节之间的隔离</code>。Stream对消息中间件的进一步封装.可以做到代码层面对中间件的无感知，甚至于动态的切换中间件(rabbitmq切换为kafka),使得微服务开发的高度解耦，服务可以关注更多自己的业务流程。</p>
<p>​    <strong>INPUT对应于消费者</strong></p>
<p>​    <strong>OUTPUT对应于生产者</strong></p>
<p>​    <strong>Spring Cloud Stream架构图</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/5.png" alt="image-20210129154637218"></p>
<p>​    Spring Cloud Stream中的消息通信方式遵循了发布-订阅模式，通过Topic主题进行广播。在RabbitMQ就是Exchange，在Kafka中就是Topic。</p>
<h2 id="Spring-Cloud-Stream标准流程套路"><a href="#Spring-Cloud-Stream标准流程套路" class="headerlink" title="Spring Cloud Stream标准流程套路"></a>Spring Cloud Stream标准流程套路</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/6.png" alt="image-20210129155258982"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/7.png" alt="image-20210129155503972"></p>
<p><code>Binder</code>：很方便的连接中间件，屏蔽差异。</p>
<p><code>Channel</code>：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过对Channel对队列进行配置</p>
<p><code>Source和Sink</code>：简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入</p>
<h2 id="编码API和常用注解"><a href="#编码API和常用注解" class="headerlink" title="编码API和常用注解"></a>编码API和常用注解</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/8.png" alt="image-20210129160323533"></p>
<h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ol>
<li>准备好RabbitMQ环境</li>
<li>工程中新建三个子模块<ul>
<li>cloud-stream-rabbitmq-provider-8801,作为生产者进行发消息模块</li>
<li>cloud-stream-rabbitmq-consumer-8802,作为消息接收模块</li>
<li>cloud-stream-rabbitmq-consumer-8803,作为消息接收模块</li>
</ul>
</li>
</ol>
<h3 id="消息驱动之生产者"><a href="#消息驱动之生产者" class="headerlink" title="消息驱动之生产者"></a>消息驱动之生产者</h3><ol>
<li><p>新建模块cloud-stream-rabbitmq-provider-8801</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--stream rabbit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment">#在此处配置要绑定的rabbitmq的服务消息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment">#表示定义的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment">#消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment">#设置rabbitmq的相关环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span>  <span class="comment">#RabbitMQ在本机的用localhost，在服务器的用服务器的ip地址</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment">#这个名字是一个通道的名称,说明是消息生产者</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称定义，一个消息主题</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，本文要设置为“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置（爆红不影响使用，位置没错）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment">#设置心跳的时间间隔（默认是30S)</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment">#如果超过5S间隔就注销节点 默认是90s</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span> <span class="comment">#在消息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8801</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8801.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类</p>
<ol>
<li><p>新建service.IMessageProvider接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在service下新建impl.IMessageProviderImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableBinding(Source.class)</span>    <span class="comment">//定义消息的推送管道（Source是spring的）</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;  <span class="comment">//消息发送管道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());     <span class="comment">//MessageBuilder是spring的integration.support.MessageBuilder</span></span><br><span class="line">        log.info(<span class="string">&quot;*********serial: &quot;</span>+serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建controller.SendMessageController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider iMessageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iMessageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>测试，启动7001，RabbitMQ，8801</p>
<p>查看RabbitMQ后台可以看到新定义的交换机（即消息主题）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/9.png" alt="image-20210130174508338"></p>
<p>然后在浏览器输入：<code>http://localhost:8801/sendMessage</code>，多次刷新</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/10.png" alt="image-20210130174633636"></p>
<p>查看RabbitMQ后台</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/11.png" alt="image-20210130174834935"></p>
</li>
</ol>
<h3 id="消息驱动之消费者"><a href="#消息驱动之消费者" class="headerlink" title="消息驱动之消费者"></a>消息驱动之消费者</h3><ol>
<li><p>新建模块cloud-stream-rabbitmq-provider-8801</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--stream rabbit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment">#在此处配置要绑定的rabbitmq的服务消息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment">#表示定义的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment">#消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment">#设置rabbitmq的相关环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span>  <span class="comment">#RabbitMQ在本机的用localhost，在服务器的用服务器的ip地址</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment">#这个名字是一个通道的名称,说明是消息生产者</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称定义，一个消息主题</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，本文要设置为“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置（爆红不影响使用，位置没错）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment">#设置心跳的时间间隔（默认是30S)</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment">#如果超过5S间隔就注销节点 默认是90s</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span> <span class="comment">#在消息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8802</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8802.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类，新建controller.ReceiveMessageListenerController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveMessageListenerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line">    </span><br><span class="line"> 	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@StreamListener</span> 注解会监听通道中的消息 ，一旦有消息进入通道就会调用方法进行处理。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;消费者1号，-----&gt;接受到的消息：&quot;</span>+message.getPayload()+<span class="string">&quot;\t port&quot;</span>+ serverPort);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，启动8802</p>
<ol>
<li><p>在浏览器中<code>http://localhost:8801/sendMessage</code>（8801发送消息）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/12.png" alt="image-20210130180200676"></p>
</li>
<li><p>8802接收到的消息：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/13.png" alt="image-20210130180254845"></p>
</li>
</ol>
</li>
</ol>
<h2 id="分组消费与持久化"><a href="#分组消费与持久化" class="headerlink" title="分组消费与持久化"></a>分组消费与持久化</h2><ol>
<li><p>依照8802，clone出来一份运行8803</p>
</li>
<li><p>启动8803</p>
</li>
<li><p>进行测试</p>
<ol>
<li><p>在浏览器中<code>http://localhost:8801/sendMessage</code>（8801发送消息）</p>
</li>
<li><p>查看8802和8803的后台</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/14.png" alt="image-20210130180933139"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/15.png" alt="image-20210130180953371"></p>
</li>
</ol>
</li>
</ol>
<p>​    通过测试可以发现，当8801发送消息之后，8802和8803都消费了消息。也就是出现<strong>重复消费</strong>的情况。但是在一些的业务场景下。应该避免重复消费的出现。比如在如下场景中，订单系统我们做集群部署,都会从RabbitMQ中获取订单消息,那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况。<code>这时我们就可以使用Stream中的消息分组来解决</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/17.png" alt="image-20210130183020016" style="zoom:50%;" />

<p><strong>重复消费出现的原因是什么呢？</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/16.png" alt="image-20210130182259742"></p>
<p>​    这是因为8802和8802不在同一组里面，RabbitMQ会将消息发送给不同组。即给每个组发送一次消息。<strong>只要将8802和8803放在同一个组内，就可以解决重复消费的问题了</strong>。同一个组内的消息消费者会发生竞争关系，只有一个消费者可以消费消息。默认情况下同一组的消息消费者采用<strong>轮询</strong>的方式来决定谁来消费消息。</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>​    <strong>注意在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。不同组是可以消费的(重复消费)，</strong></p>
<h4 id="设置不同分组"><a href="#设置不同分组" class="headerlink" title="设置不同分组"></a>设置不同分组</h4><p>修改8802的yml文件,加入group</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">       <span class="attr">input:</span> <span class="comment">#这个名字是一个通道的名称.表示是消息消费者</span></span><br><span class="line">         <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称定义</span></span><br><span class="line">         <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，本文要设置为“text/plain”</span></span><br><span class="line">         <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置（爆红不影响使用，位置没错）</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">qzh1</span>            <span class="comment"># 指定分组</span></span><br></pre></td></tr></table></figure>

<p>修改8803的yml文件,加入group</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">       <span class="attr">input:</span> <span class="comment">#这个名字是一个通道的名称.表示是消息消费者</span></span><br><span class="line">         <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称定义</span></span><br><span class="line">         <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，本文要设置为“text/plain”</span></span><br><span class="line">         <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置（爆红不影响使用，位置没错）</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">qzh2</span>            <span class="comment"># 指定分组</span></span><br></pre></td></tr></table></figure>

<p>查看RabbitMQ后台：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/18.png" alt="image-20210130183819465"></p>
<p>进行测试</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/19.png" alt="image-20210130183819465"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/20.png" alt="image-20210130183819465"></p>
<p><strong>结论：</strong></p>
<p>​    虽然进行了分组，但并没有将8802和8803分在同一个分组内，所以还存在<strong>重复消费</strong>的情况。</p>
<p>​    分布式微服务应用为了实现高可用和负载均衡，实际上都会部署多个实例，本例启动了两个消费微服务(8802/8803)多数情况，生产者发送消息给某个具体微服务时只希望被消费一次, 按照上面我们启动两个应用的例子,虽然它们同属一个应用，但是这个消息出现了被重复消费两次的情况。为了解决这个问题，在Spring Cloud Stream中提供了<code>消费组</code>的概念。</p>
<h4 id="设置相同分组"><a href="#设置相同分组" class="headerlink" title="设置相同分组"></a>设置相同分组</h4><p><code>设置相同分组的方法也很简单，只要yml文件中的group值相同即可</code></p>
<ol>
<li><p>8802 yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">group:</span> <span class="string">qzh1</span>            <span class="comment"># 指定分组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>8803 yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">group:</span> <span class="string">qzh1</span>            <span class="comment"># 指定分组</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>测试</p>
<ol>
<li><p>在浏览器中<code>http://localhost:8801/sendMessage</code>（8801发送消息）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/21.png" alt="image-20210130185516666"></p>
</li>
<li><p>查看8802和8803的后台</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/22.png" alt="image-20210130185619109"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/23.png" alt="image-20210130185648676"></p>
</li>
<li><p>查看RabbitMQ后台</p>
<ul>
<li>qzh1分组</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/24.png" alt="image-20210130190831071"></p>
<ul>
<li>qzh2分组</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/25.png" alt="image-20210130190926459"></p>
</li>
</ol>
<p><strong>结论：</strong>可以发现重复消费的情况解决了。<code>同一个组的多个微服务实例，每次只会有一个拿到</code>。</p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>​    持久化指的是，消费者组订阅是持久的。也就是说，binder实现确保组订阅是持久的，一旦一个组中创建了一个订阅，就算这个组里边的所有应用都挂掉了,这个组也会受到消息。匿名者组订阅是不持久的。</p>
<p>​    <code>简单来说，就是一旦指定了group属性。就算是这个分组内的所有微服务实例都挂了，在恢复正常状态后就能接收到消息。但是如果没有指定group属性，则无法接收到消息。因为binder会保存发送给分组的消息</code></p>
<p>​    <strong>指定group属性的话 就自动支持持久化了。</strong></p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol>
<li><p>停掉8802和8803，去掉8803的<code>group: qzh1</code>。</p>
</li>
<li><p>在浏览器中<code>http://localhost:8801/sendMessage</code>（8801发送消息）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/26.png" alt="image-20210130191828273"></p>
</li>
<li><p>启动8802，有分组属性配置，后台有消息</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/27.png" alt="image-20210130192023106"></p>
</li>
<li><p>启动8803，无分组属性配置，后台没有消息</p>
</li>
</ol>
<h1 id="Spring-Cloud-Sleuth分布式请求链路追踪"><a href="#Spring-Cloud-Sleuth分布式请求链路追踪" class="headerlink" title="Spring Cloud Sleuth分布式请求链路追踪"></a>Spring Cloud Sleuth分布式请求链路追踪</h1><p>​    在微服务框架中，一个客户端发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后的请求结果，每一个前端请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p>
<p>​    SpringCloud Sleuth 提供了一套完整的服务跟踪的解决方案，在分布式系统中提供追踪解决方案并且兼容支持了zipkin。<code>Spring Cloud Sleuth 是分布式系统中跟踪服务间调用的工具，它可以直观地展示出一次请求的调用过程，</code></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/28.png" alt="image-20210130193255301"></p>
<p>官方文档：<a href="https://cloud.spring.io/spring-cloud-sleuth/reference/html/">https://cloud.spring.io/spring-cloud-sleuth/reference/html/</a></p>
<h2 id="搭建链路监控"><a href="#搭建链路监控" class="headerlink" title="搭建链路监控"></a>搭建链路监控</h2><h3 id="下载Zipkin"><a href="#下载Zipkin" class="headerlink" title="下载Zipkin"></a>下载Zipkin</h3><p>​    Zipkin是一个 开放源代码分布式的跟踪系统，每个服务向zipkin报告计时数据，zipkin会根据调用<br>关系通过Zipkin U性成依赖关系图。Zipkin提供了可插拔数据存储方式: In-Memory、 MySq|. Cassandra以及Elasticsearch。 为了方便在开发环境我直接采用了In-Memory方式进行存储，生产数据量大的情况则推荐使用<br>Elasticsearch。</p>
<p>​    下载jar包：<a href="http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/29.png" alt="image-20210130194016407"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/30.png" alt="image-20210130194032511"></p>
<p>下载完后，终端jar包的目录里，然后输入：<code>java -jar zipkin-server-2.12.9-exec.jar</code>运行。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/31.png" alt="image-20210130194223933"><br>浏览器输入：<code>http://localhost:9411/zipkin/</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/32.png" alt="image-20210130194350594"></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>下面通过一张图来看一下一个简单的微服务调用链：</p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/33.png" alt="image-20210130194643707"></p>
<p>一条链路通过Trace ld唯-标识，Span标识发起的请求信息，各span通过parent id关联起来</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/34.png" alt="image-20210130194738001"></p>
<p>整个链路的依赖关系如下:</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/35.png" alt="image-20210130194824060"></p>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p><strong>服务提供者cloud-provider-payment8001</strong></p>
<ol>
<li><p>在pom中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line"><span class="attr">sleuth:</span></span><br><span class="line">  <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">probability:</span> <span class="number">1</span>  <span class="comment">#采样率。值介于0到1之间，1则表示全部采集（一般不为1，不然对性能会有影响）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在PaymentController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;paymentZipkin...&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>服务消费者cloud-consumer-order80</strong></p>
<ol>
<li><p>在pom中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line"><span class="attr">sleuth:</span></span><br><span class="line">  <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">probability:</span> <span class="number">1</span>  <span class="comment">#采样率。值介于0到1之间，1则表示全部采集（一般不为1，不然对性能会有影响）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在OrderController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String result = restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span> + <span class="string">&quot;/payment/zipkin&quot;</span>, String.class);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>测试</strong></p>
<ol>
<li><p>浏览器输入：<code>http://localhost/consumer/payment/zipkin</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/36.png" alt="image-20210130195535506"></p>
</li>
<li><p>查看请求链路</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/37.png" alt="image-20210130195920013"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/38.png" alt="image-20210130195952624"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/39.png" alt="image-20210130200019914"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记08---服务配置[Config]与服务总线[Bus]</title>
    <url>/HuaStarOS.github.io/2021/01/26/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%5BConfig%5D%E4%B8%8E%E6%9C%8D%E5%8A%A1%E6%80%BB%E7%BA%BF%5BBus%5D/</url>
    <content><![CDATA[<h1 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h1><p>如果微服务架构中没有使用统一配置中心时，所存在的问题：</p>
<ul>
<li>配置文件分散在各个项目里，大量的配置文件，不方便维护</li>
<li>配置内容安全与权限，实际开发中，开发人员是不知道线上环境的配置的</li>
<li>更新配置后，项目需要重启</li>
</ul>
<p>​    微服务意味着要将单体应用拆分成一个个子服务。每个服务的粒度相对较小，因此系统中会出现大量的服务，每个服务都要有自己都一些配置信息，或者相同的配置信息，可能不同环境每个服务也有单独的一套配置，这种情况导致配置文件数量比较庞大，维护起来相当费劲，举个栗子：<br>​    在开发的过程中，一般数据库是开发环境数据库，所有服务DB的IP配置为：192.168.10.1，突然老大说，开发环境换了，DB的IP要修改，这下可不好受了，所有微服务挨个修改DB的配置，可能有上百个微服务。就问你难受不难受？这个时候分布式配置中心就发挥了很大的优势，只需要修改配置中心配置，所有服务即可自动生效。</p>
<h1 id="SpringCloud-Config分布式配置中心"><a href="#SpringCloud-Config分布式配置中心" class="headerlink" title="SpringCloud Config分布式配置中心"></a>SpringCloud Config分布式配置中心</h1><p>​    <code>Spring Cloud Config</code>为微服务框架中的的微服务提供集中化的外部化配置支持。<strong>配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</strong></p>
<p>​    配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。当然也提供本地化文件系统的存储方式。</p>
<p>​    使用 spring Cloud 进行集中式配置管理，将以往的配置文件从项目中摘除后放到Git 或svn中集中管理，并在需要变更的时候，可以通知到各应用程序，应用程序刷新配置不需要重启。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>​    SpringCloud Config分为<strong>服务端和客户端两部分。</strong></p>
<p>​    服务端也称为<strong>分布式配置中心</strong>，<strong>它是一个独立的微服务应用</strong>，用来连接配置服务器并为客户端提供配置信息，加密/解密信息等访问接口</p>
<p>​    客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p>
<p>​    由于SpringCloud Canfig默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件),但最推荐的还是Git，而且使用的是http/https访问的形式。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol>
<li>集中管理配置文件</li>
<li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li>
<li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>
<li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li>
<li>将配置信息以REST接口的形式暴露</li>
</ol>
<h2 id="Config服务端使用实例"><a href="#Config服务端使用实例" class="headerlink" title="Config服务端使用实例"></a>Config服务端使用实例</h2><ol>
<li><p>GitHub创建仓库，用于存放配置文件</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/1.png" alt="image-20210127155234438"></p>
</li>
<li><p>将仓库克隆到本地，在Git Bash中输入 <code>git clone https://github.com/用户名/仓库名.git</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/2.png" alt="image-20210127155521733"></p>
</li>
<li><p>创建模块cloud-config-center-3344作为config服务端，即分布式配置中心</p>
<ol>
<li><p>创建cloud-config-center-3344模块</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--config server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/angenin/springcloud-config.git</span>  <span class="comment">#git的仓库地址</span></span><br><span class="line">          <span class="attr">search-paths:</span>   <span class="comment">#搜索目录</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span>   <span class="comment">#读取的分支</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span>   <span class="comment">#服务注册到的eureka地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//添加@EnableConfigServer注解，启用配置中心</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>编辑GitHub中的配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#config-dev.yml</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;main branch,springcloud-config/config-dev.yml version=1&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#######################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#config-prod.yml</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;main branch,springcloud-config/config-prod.yml version=1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#config-test.yml</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;main branch,springcloud-config/config-test.yml version=1&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动7001、3344进行测试，在浏览器中输入<code>http://localhost:3344/main/config-dev.yml</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/3.png"></p>
</li>
</ol>
<h3 id="配置读取规则"><a href="#配置读取规则" class="headerlink" title="配置读取规则"></a>配置读取规则</h3><p>http请求地址和资源文件映射如下:</p>
<ul>
<li>/{application}/{profile}[/{label}]</li>
<li>/{application}-{profile}.yml</li>
<li>/{label}/{application}-{profile}.yml</li>
<li>/{application}-{profile}.properties</li>
<li>/{label}/{application}-{profile}.properties</li>
</ul>
<p><strong>注意：</strong></p>
<p>​    label：分支（branch）</p>
<p>​    application：服务名</p>
<p>​    profile：环境（dev/test/prod）</p>
<ol>
<li><p>/{label}/{application}-{profile}.yml：<code>http://localhost:3344/main/config-dev.yml</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/3.png"></p>
</li>
<li><p>/{application}/{profile}[/{label}]：<code>http://localhost:3344/config/dev/main</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/4.png" alt="image-20210127162332692"></p>
</li>
</ol>
<h2 id="Config客户端使用实例"><a href="#Config客户端使用实例" class="headerlink" title="Config客户端使用实例"></a>Config客户端使用实例</h2><ol>
<li><p>新建模块cloud-config-client-3355</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--config client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写bootstrap.yml</p>
<p> <strong>applicaiton.yml是用户级的资源配置项</strong> </p>
<p> <strong>bootstrap.yml是系统级的，优先级更高</strong></p>
<p>​    SpringCloud会创建一个BootstrapContext”，作为Spring应用的ApplicationContext的父上下文。初始化的时候，Bootstrap Context负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。</p>
<p>​    Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。Bootstrapcontex和Application Context有着不同的约定所以新增了一个bootstrapyml文件，保证BootstrapContext和Application Context配置的分离。</p>
<p>​    要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的,<br>​    因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span> 		  <span class="comment">#config客户端配置</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span>     <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span>    <span class="comment">#配置文件名称      </span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>    <span class="comment">#配置文件的后缀名称       </span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span>  <span class="comment">#配置中心地址</span></span><br><span class="line"> 	  <span class="comment"># 上面4个变量综合起来的意思就是在 http://localhost:3344 配置中心 读取 main分支上的config-dev.yml的配置文件</span></span><br><span class="line">      <span class="comment"># 即访问 http://localhost:3344/main/config-dev.yml并将配置加载到当前项目中</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span>   <span class="comment">#服务注册到的eureka地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类 controller(读取配置文件)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span>	</span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/5.png" alt="image-20210127163927555"><strong>注意：</strong><code>在项目初始化时，要先从配置中心获取配置，获取配置之后，才能保证项目的正常启动</code></p>
</li>
</ol>
<h2 id="动态刷新问题"><a href="#动态刷新问题" class="headerlink" title="动态刷新问题"></a>动态刷新问题</h2><ol>
<li><p>改GitHub上的config-dev.yml文件的版本号为2。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/6.png" alt="image-20210127164500695"></p>
</li>
<li><p>刷新<code>http://localhost:3344/main/config-dev.yml</code>，版本号发生改变。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/7.png" alt="image-20210127164723498"></p>
</li>
<li><p>刷新<code>http://localhost:3355/configInfo</code>，版本号没有发生改变。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/8.png" alt="image-20210127165006235"></p>
</li>
<li><p>重启3355，刷新<code>http://localhost:3355/configInfo</code>，版本号发生改变。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/9.png" alt="image-20210127165328937"></p>
</li>
</ol>
<p>​    从上面我我们可以发现。修改GitHub上的配置文件内容做调整。刷新3344，发现ConfigServer配置中心立刻响应。刷新3355，发现ConfigClient客户端没有任何响应。3355没有变化除非自己重启或者重新加载。如果每次修改配置文件，客户端都需要重启才能刷新配置，那将是噩梦！！！</p>
<h2 id="Config客户端之动态刷新"><a href="#Config客户端之动态刷新" class="headerlink" title="Config客户端之动态刷新"></a>Config客户端之动态刷新</h2><ol>
<li><p>往config客户端3355在pom中添加（上面已经加了）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在bootstrap.yml中添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在ConfigClientController类上加上<code>@RefreshScope</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">//Spring cloud 原生注解，实现动态刷新功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改GitHub上文件的版本号，然后访问3344和3355。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/10.png" alt="image-20210127172139517"></p>
</li>
<li><p>刷新<code>http://localhost:3344/main/config-dev.yml</code>，版本号发生改变。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/11.png" alt="image-20210127172227332"></p>
</li>
<li><p><code>http://localhost:3355/configInfo</code>（没读取到，需要发送post请求刷新3355才能生效）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/12.png" alt="image-20210127172330676"></p>
</li>
<li><p>打开终端，输入<code>curl -X POST &quot;http://localhost:3355/actuator/refresh&quot;</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/13.png" alt="image-20210127172730008"></p>
</li>
<li><p>刷新<code>http://localhost:3355/configInfo</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/14.png" alt="image-20210127172817747"></p>
</li>
</ol>
<p><strong>想想还有什么问题：</strong>通过上述的方法确实可以解决动态刷新的问题。但是试想一下。如果有很多个微服务的话，那岂不是每个微服务都需要执行一次post请求，手动刷新效率太低了。那有没有可能可以大范围的自动刷新，只需要发送一次post请求就好了</p>
<h1 id="Spring-Cloud-Bus消息总线"><a href="#Spring-Cloud-Bus消息总线" class="headerlink" title="Spring Cloud Bus消息总线"></a>Spring Cloud Bus消息总线</h1><p>​    <strong>Spring Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新。</strong>Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控。</p>
<p>​    在微服务架构中，通常会使用轻量级的消息代理来构建一个共用的消息主题来连接各个微服务实例，它广播的消息会被所有在注册中心的微服务实例监听和消费，也称消息总线。 </p>
<p>​    <strong>Bus支持两种消息代理：RabbitMQ和Kafka</strong></p>
<h2 id="RabbitMQ环境配置"><a href="#RabbitMQ环境配置" class="headerlink" title="RabbitMQ环境配置"></a>RabbitMQ环境配置</h2><ol>
<li><p>安装Erlang，下载地址：<code>http://erlang.org/download/otp_win64_21.3.exe</code></p>
</li>
<li><p>安装RabbitMQ，下载地址：<code>https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe</code></p>
</li>
<li><p>进入RabbitMQ安装目录下的sbin目录，进入命令行界面输入<code>rabbitmq-plugins enable rabbitmq_management</code>下载可视化插件</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/15.png" alt="image-20210127175052034"></p>
<p>执行之后，可以发现。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/16.png" alt="image-20210127175144750"></p>
<p>双击start，打开RabbitMQ</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/17.png" alt="image-20210127175403311"></p>
<p>在浏览器中输入<code>http://localhost:15672/</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/18.png" alt="image-20210127175515860"></p>
<p>输入用户名和密码，用户名和密码都是guest</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/19.png" alt="image-20210127175744308"></p>
</li>
</ol>
<h2 id="SpringCloud-Bus动态刷新全局广播"><a href="#SpringCloud-Bus动态刷新全局广播" class="headerlink" title="SpringCloud Bus动态刷新全局广播"></a>SpringCloud Bus动态刷新全局广播</h2><p><strong>全局广播有两种实现方案：</strong></p>
<ol>
<li><p>利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/20.png" alt="image-20210127185240711"></p>
</li>
<li><p>利用消息总线触发一个服务端ConfigServer的/bus/refresh端点,而刷新所有客户端的配置（更加推荐）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/21.png" alt="image-20210127185408073"></p>
</li>
</ol>
<p><strong>从上面可以发现第二种的架构显然更加合适，第一种不适合的原因如下</strong></p>
<ol>
<li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新职责</li>
<li>破坏了微服务各节点的对等性</li>
<li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li>
</ol>
<h2 id="给Config服务端3344添加消息总线支持"><a href="#给Config服务端3344添加消息总线支持" class="headerlink" title="给Config服务端3344添加消息总线支持"></a>给Config服务端3344添加消息总线支持</h2><ol>
<li><p>在pom文件中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ的支持--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml文件中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># rabbitmq相关的配置 15672是web管理界面的端口、5672是跟RabbitMQ进行通信的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># rabbitmq相关的配置,暴露bus刷新配置的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="comment"># 暴露bus刷新配置的端点</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="给客户端3355和3366添加消息总线支持"><a href="#给客户端3355和3366添加消息总线支持" class="headerlink" title="给客户端3355和3366添加消息总线支持"></a>给客户端3355和3366添加消息总线支持</h2><p>​    演示广播效果，增加复杂度，再以3355为模板再制作一个3366</p>
<ol>
<li><p>pom添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># rabbitmq相关的配置 15672是web管理界面的端口、5672是跟RabbitMQ进行通信的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li><p>启动7001，3344，3355，3366。</p>
</li>
<li><p>修改GitHub上配置文件的版本号。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/22.png" alt="image-20210127190731144"></p>
</li>
<li><p>在终端输入：<code>curl -X POST &quot;http://localhost:3344/actuator/bus-refresh&quot;</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/23.png" alt="image-20210127190832273"></p>
</li>
<li><p>在浏览器输入<code>http://localhost:3355/configInfo</code>，<code>http://localhost:3366/configInfo</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/24.png" alt="image-20210127190904643"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/25.png" alt="image-20210127190930596"></p>
</li>
</ol>
<h2 id="SpringCloud-Bus动态刷新定点通知"><a href="#SpringCloud-Bus动态刷新定点通知" class="headerlink" title="SpringCloud Bus动态刷新定点通知"></a>SpringCloud Bus动态刷新定点通知</h2><p>​    指定具体某一个实例生效而不是全部，<code>公式：http://localhost:配置中心的端口号/actuator/bus-refresh/&#123;destination&#125;</code>。/bus/refresh请求不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例。</p>
<ol>
<li><p>修改GitHub的文件版本号。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/26.png" alt="image-20210127191240921"></p>
</li>
<li><p>在终端输入：<code>curl -X POST &quot;http://localhost:3344/actuator/bus-refresh/config-client:3355&quot;</code><br>多加了服务名:端口号即可定点通知。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/27.png" alt="image-20210127191337043"></p>
</li>
<li><p>在浏览器中在浏览器输入<code>http://localhost:3355/configInfo</code>，<code>http://localhost:3366/configInfo</code>查看</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/28.png" alt="image-20210127191433968"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/29.png" alt="image-20210127191445682"></p>
<p><strong>总结</strong>：通过<code>公式：http://localhost:配置中心的端口号/actuator/bus-refresh/&#123;destination&#125;</code>实现了定点刷新的功能。</p>
</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/30.png" alt="image-20210127191710498"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记10---Nacos服务注册与配置中心</title>
    <url>/HuaStarOS.github.io/2021/02/04/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-Nacos%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Alibaba"><a href="#Spring-Cloud-Alibaba" class="headerlink" title="Spring Cloud Alibaba"></a>Spring Cloud Alibaba</h1><p>​    Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>
<p>​    依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p>
<h2 id="诞生背景"><a href="#诞生背景" class="headerlink" title="诞生背景"></a>诞生背景</h2><p>​    <strong><code>Netflix进入维护模式</code></strong></p>
<p>​    官网文档：<code>https://github.com/spring-cloud/spring-cloud-netflix</code><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/1.png"><strong>什么是维护模式：</strong></p>
<p>​    将模块置于维护模式，意味着Spring Cloud团队将不会再向模块添加新功能。我们将修复block级别的bug以及安全问题，我们也会考虑并审查社区的小型pull request。</p>
<p><strong>进入维护模式意味着：</strong><br>    <code>Spring Cloud Netflix将不再开发新的组件。</code><br>    我们都知道Spring Cloud版本迭代算是比较快的，因而出现了很多重大ISSUE都还来不及Fix就又推另- 个Release了. 进入维护模式意思就是目前以后一段时间Spring Cloud Netflix提供的服务和功能就这么多了,不在开发新的组件和功能了.以后将以维护和Merge分支Full Request为主<br>    <code>新组件功能将以其他替代平代替的方式实现。</code></p>
<p><strong>更换</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/2.png"></p>
<h2 id="Spring-Cloud-Alibaba简介"><a href="#Spring-Cloud-Alibaba简介" class="headerlink" title="Spring Cloud Alibaba简介"></a>Spring Cloud Alibaba简介</h2><p>​    2018.10.31, Spring Cloud Alibaba正式入驻了Spring Cloud官方孵化器，并在Maven中央库发布了第一个版本。</p>
<p>​    Spring Cloud for Albaba,它是由一 些阿里巴巴的开源组件和云产 品组成的。这个项目的目的是为了让大家所熟知的Spring框架，其优秀的设计模式和抽象理念，以给使用阿里巴巴产品的Java开发者带来使用Spring Boot和<br>Spring Cloud的更多便利。</p>
<p>Spring官网：<code>https://spring.io/projects/spring-cloud-alibaba</code><br>GitHub：<code>https://github.com/alibaba/spring-cloud-alibaba</code><br>GitHub中文文档：<code>https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md</code><br>Spring Cloud Alibaba参考文档：<code>https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</code></p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li><p><strong>服务限流降级</strong>：默认支持 WebServlet、WebFlux, OpenFeign、RestTemplate、Spring Cloud Gateway, Zuul, Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</p>
</li>
<li><p><strong>服务注册与发现</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</p>
</li>
<li><p><strong>分布式配置管理</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</p>
</li>
<li><p><strong>消息驱动能力</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</p>
</li>
<li><p><strong>分布式事务</strong>：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</p>
</li>
<li><p><strong>阿里云对象存储</strong>：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>
</li>
<li><p><strong>分布式任务调度</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</p>
</li>
<li><p><strong>阿里云短信服务</strong>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p>
</li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>**<a href="https://github.com/alibaba/Sentinel">Sentinel</a>**：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p>**<a href="https://github.com/alibaba/Nacos">Nacos</a>**：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p>
<p>**<a href="https://rocketmq.apache.org/">RocketMQ</a>**：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</p>
<p>**<a href="https://github.com/apache/dubbo">Dubbo</a>**：Apache Dubbo™ 是一款高性能 Java RPC 框架。</p>
<p>**<a href="https://github.com/seata/seata">Seata</a>**：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</p>
<p><strong><a href="https://www.aliyun.com/product/oss">Alibaba Cloud OSS</a></strong>: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</p>
<p><strong><a href="https://help.aliyun.com/document_detail/43136.html">Alibaba Cloud SchedulerX</a></strong>: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</p>
<p><strong><a href="https://www.aliyun.com/product/sms">Alibaba Cloud SMS</a></strong>: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="如何引入依赖"><a href="#如何引入依赖" class="headerlink" title="如何引入依赖"></a>如何引入依赖</h4><p>如果需要使用已发布的版本，在 <code>dependencyManagement</code> 中添加如下配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>dependencies</code> 中添加自己所需使用的依赖即可使用。</p>
<h1 id="SpringCloud-Alibaba-Nacos服务注册和配置中心"><a href="#SpringCloud-Alibaba-Nacos服务注册和配置中心" class="headerlink" title="SpringCloud Alibaba Nacos服务注册和配置中心"></a>SpringCloud Alibaba Nacos服务注册和配置中心</h1><h2 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h2><p><strong>什么是nacos：</strong></p>
<p>​    <code>nacos一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</code></p>
<p><strong>为什么叫nacos：</strong></p>
<p>​    <code>前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service.</code></p>
<p><strong>能干嘛：</strong></p>
<ul>
<li><code>替代Eureka做服务注册中心</code></li>
<li><code>替代Config做服务配置中心</code></li>
</ul>
<p><strong>Nacos就是注册中心+配置中心的组合等价于 Nacos = Eureka+Config +Bus</strong></p>
<p>官网：<code>https://nacos.io/zh-cn/</code><br>GitHub：<code>https://github.com/alibaba/Nacos</code></p>
<p><strong>各个注册中心比较</strong></p>
<table>
<thead>
<tr>
<th align="center">服务注册与发现框架</th>
<th align="center">CAP模型</th>
<th align="center">控制台管理（界面管理）</th>
<th align="center">社区活跃度</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Eureka</td>
<td align="center">AP</td>
<td align="center">支持</td>
<td align="center">低（2.x版本闭源）</td>
</tr>
<tr>
<td align="center">Zookeeper</td>
<td align="center">CP</td>
<td align="center">不支持</td>
<td align="center">中</td>
</tr>
<tr>
<td align="center">Consul</td>
<td align="center">CP</td>
<td align="center">支持</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center">Nacos</td>
<td align="center">AP</td>
<td align="center">支持</td>
<td align="center">高</td>
</tr>
</tbody></table>
<h3 id="Nacos-地图"><a href="#Nacos-地图" class="headerlink" title="Nacos 地图"></a>Nacos 地图</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/3.png"></p>
<h3 id="Nacos-生态图"><a href="#Nacos-生态图" class="headerlink" title="Nacos 生态图"></a>Nacos 生态图</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/4.png" alt="image-20210204223801893"></p>
<h2 id="安装并运行Nacos"><a href="#安装并运行Nacos" class="headerlink" title="安装并运行Nacos"></a>安装并运行Nacos</h2><p> <strong>下载nacos</strong> </p>
<p>​    官网下载地址：<a href="https://github.com/alibaba/nacos/tags">https://github.com/alibaba/nacos/tags</a> </p>
<p>​    官网下载速度比较慢，这里我分享一下安装包 ：<a href="https://pan.baidu.com/s/1Pu0C5bB9UKv1rAOhjwliXw">https://pan.baidu.com/s/1Pu0C5bB9UKv1rAOhjwliXw</a>                 提取码：c8mx </p>
<p><strong>运行nacos</strong></p>
<p>​    在nacos的bin目录下，进入命令行界面。输入<code>startup.cmd</code><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/5.png"></p>
<p>在浏览器输入：<code>http://localhost:8848/nacos/</code><br>账号和密码都是<code>nacos</code>。登录成功界面。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/6.png"></p>
<h2 id="Nacos作为服务注册中心演示"><a href="#Nacos作为服务注册中心演示" class="headerlink" title="Nacos作为服务注册中心演示"></a>Nacos作为服务注册中心演示</h2><p>官方文档：<a href="https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html">https://spring-cloud-alibaba-group.github.io/github-pages/greenwich/spring-cloud-alibaba.html</a></p>
<h3 id="基于Nacos的服务提供者"><a href="#基于Nacos的服务提供者" class="headerlink" title="基于Nacos的服务提供者"></a>基于Nacos的服务提供者</h3><ol>
<li><p>新建模块cloudalibaba-provider-payment-9001</p>
</li>
<li><p>修改pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud Alibaba nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#配置nacos地址，即注册中心的地址，这样才能将服务提供者9001注册进nacos中</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类</p>
<ul>
<li>新建controller.PaymentController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nacos registry, serverPort: &quot;</span> + serverPort + <span class="string">&quot;\t id: &quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，启动服务提供者9001</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/7.png" alt="image-20210204230144872"></p>
</li>
</ol>
<ol start="7">
<li><p>参照9001新建9002，建立服务提供者集群。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/8.png" alt="image-20210204230335983"></p>
</li>
</ol>
<h3 id="基于Nacos的服务消费者"><a href="#基于Nacos的服务消费者" class="headerlink" title="基于Nacos的服务消费者"></a>基于Nacos的服务消费者</h3><ol>
<li><p>新建模块cloudalibaba-consumer-nacos-order83</p>
</li>
<li><p>修改pom文件（nacos集成了ribbon，实现负载均衡）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud Alibaba nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/9.png" alt="image-20210204230619394"></p>
</li>
<li><p>写yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">83</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#配置Nacos服务注册中心的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者要访问的微服务名称（成功注册进nacos的服务提供者）</span></span><br><span class="line"><span class="attr">service-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosMain83</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderNacosMain83.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类</p>
<ul>
<li><p>新建config.ApplicationContextConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建controller.OrderNacosController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNacosController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;service-url.nacos-user-service&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverURL;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/nacos/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(serverURL + <span class="string">&quot;/payment/nacos/&quot;</span> + id, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>测试，启动服务消费者83</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/10.png" alt="image-20210204231223769"></p>
</li>
<li><p>在浏览器输入：<code>http://localhost:83/consumer/payment/nacos/1</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/11.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/12.png"></p>
</li>
</ol>
<h3 id="各服务注册中心对比"><a href="#各服务注册中心对比" class="headerlink" title="各服务注册中心对比"></a>各服务注册中心对比</h3><p><strong>nacos生态图</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/4.png" alt="image-20210204223801893"></p>
<p><strong>nacos和CAP</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/13.png" alt="image-20210209142758901"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/14.png" alt="image-20210209142926720"></p>
<p><strong>Nacos支持AP和CP模式的切换</strong><br><code>C是所有节点在同一时间看到的数据是一致的: 而A的定义是所有的请求都会收到响应。</code></p>
<p><strong>何时选择使用何种模式?</strong><br>    一般来说，如果不需要存储服务级别的信息且服务实例是通过nacos client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如Spring cloud和Dubbo服务，都适用于AP模式，AP模式为了服务的可能性而减弱了一致性， 因此AP模式下只支持注册临时实例。</p>
<p>​    如果需要在服务级别编辑或者存储配置信息，那么CP是必须，K8S服务和DNS服务则适用于CP模式。<br>CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式，该模式下注册实例之前必须先注册服务，如果服务不存在,则会返回错误。</p>
<p><strong>Nacos默认AP。切换CP：</strong> <code>curl -X PUT &#39;$NACOS_ SERVER:8848/nacos/v1/ns/operator/switches?entry= serverMode&amp;value=CP&#39;</code></p>
<h2 id="Nacos作为配置中心演示"><a href="#Nacos作为配置中心演示" class="headerlink" title="Nacos作为配置中心演示"></a>Nacos作为配置中心演示</h2><h3 id="Nacos作为配置中心-—-基础配置"><a href="#Nacos作为配置中心-—-基础配置" class="headerlink" title="Nacos作为配置中心 —- 基础配置"></a>Nacos作为配置中心 —- 基础配置</h3><ol>
<li><p>新建模块cloudalibaba-config-nacos-client3377</p>
</li>
<li><p>修改pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nacos config--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- openfeign --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringCloud Alibaba nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml文件（<code>要写两个yaml文件</code>）</p>
<p>Nacos同springcloud-config-样, 在项目初始化时,要保证先从配置中心进行配置获取，获取配置之后，才能保证项目的正常启动。springboot中配置文件的加载是存在优先级顺序的，bootstrap优先级高于application</p>
<ul>
<li><p>bootstrap.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3377</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span>        <span class="comment"># 指定要获取的配置文件格式</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">f4ebcf14-0ed3-4903-a106-6bebcf8e8100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nacos 读取配置文件规则：$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span></span><br><span class="line"><span class="comment"># 也就是会在nacos配置中心读取  nacos-config-client-dev.yaml配置文件</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment"># 表示是开发环境</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfigClientMain3377</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosConfigClientMain3377.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span>  <span class="comment">// 支持Nacos动态刷新功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/config/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Nacos中添加配置信息</p>
<p>官方文档：<a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/15.png" alt="image-20210209203052224"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/16.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/17.png"></p>
<p>创建成功</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/18.png"></p>
</li>
<li><p>测试、启动3377。浏览器输入：<code>http://localhost:3377/config/info</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/19.png"></p>
</li>
<li><p>在nacos后台修改yml文件的版本号</p>
<p>刷新页面，动态刷新</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/20.png"></p>
</li>
</ol>
<h3 id="Nacos作为配置中心-—-分类配置"><a href="#Nacos作为配置中心-—-分类配置" class="headerlink" title="Nacos作为配置中心 —- 分类配置"></a>Nacos作为配置中心 —- 分类配置</h3><h4 id="在实际开发中会出现多环境多项目管理的问题"><a href="#在实际开发中会出现多环境多项目管理的问题" class="headerlink" title="在实际开发中会出现多环境多项目管理的问题"></a><strong>在实际开发中会出现多环境多项目管理的问题</strong></h4><ul>
<li><p><strong>问题1</strong></p>
<p>实际开发中，通常一个系统会准备多种环境，例如：</p>
<ol>
<li><p>dev开发环境</p>
</li>
<li><p>test测试环境</p>
</li>
<li><p>prod生产环境。</p>
</li>
</ol>
<p>如何保证指定环境启动时服务能正确读取到Nacos.上相应环境的配置文件呢?</p>
</li>
<li><p><strong>问题2</strong></p>
<p>一个大型分布式微服务系统会有很多微服务子项目,每个微服务项目又都会有相应的开发环境、测试环境、预发环境、正式环境….<strong>那怎么对这些微服务配置进行管理呢?</strong></p>
</li>
</ul>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>​    <code>nacos提供了解决多环境多项目管理的问题的方案</code>，**<code>使用Namespace+Group+DataID的组合解决了解决多环境多项目管理的问题。</code>**</p>
<p><strong>Namespace+Group+DataID三者的关系</strong></p>
<p>​    **<code>类似Java里面的package名和类名</code>**。<code>最外层的namespace是可以用于区分部署环境的，Group和DatalD逻辑上区分两个目标对象。</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/21.png" alt="image-20210209223318856" style="zoom: 50%;" />

<ol>
<li>Nacos默认的命名空间是public， Namespace主要用来实现隔离。比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个Namespace,不同的Namespace之间是隔离的。</li>
<li>Group默认是DEFAULT_ GROUP, Group可以把不同的微服务划分到同一个分组里面去。Service就是微服务一个Service可以包含多个Cluster (集群)， Nacos默认Cluster是DEFAULT, Cluster是 对指定微服务的一个虚拟划分。</li>
<li>比方说为了容灾，将Service微服务分别部署在了杭州机房和广州机房。这时就可以给杭州机房的Service微服务起一个集群名称 (HZ)。给广州机房的Service微服务起一个集群名称 (GZ)。还可以尽量让同一个机房的微服务互相调用，以提升性能。</li>
<li>最后是Instance,就是微服务的实例。</li>
</ol>
<p>默认情况：Namespace= public、Group= DEFAULT_ GROUP、Cluster默认是DEFAULT。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/29.png" alt="image-20210209230547409"></p>
<h4 id="三种方案加载配置"><a href="#三种方案加载配置" class="headerlink" title="三种方案加载配置"></a>三种方案加载配置</h4><p>​    <code>三种方案加载配置：Group方案、Namespace方案、DatalD方案。</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/22.png" alt="image-20210209224351985"  />



<h5 id="DatalD方案"><a href="#DatalD方案" class="headerlink" title="DatalD方案"></a>DatalD方案</h5><ol>
<li><p>新建DataId（test）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/23.png" alt="image-20210209224926734"></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/24.png" style="zoom:80%;" />
</li>
<li><p>修改3377的application.yml的active为<code>test</code>。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment">#active: dev # 表示是开发环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">test</span> <span class="comment"># 表示是测试环境</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试、启动3377。在浏览器中输入<code>http://localhost:3377/config/info</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/25.png" alt="image-20210209225411355"></p>
</li>
</ol>
<h5 id="Group方案"><a href="#Group方案" class="headerlink" title="Group方案"></a>Group方案</h5><p><code>Group默认DEFAULT_GROUP。</code></p>
<ol>
<li><p>新建配置nacos-config-client-info.yml（DEV_GROUP）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/26.png" alt="image-20210209225533968"></p>
</li>
<li><p>新建配置时nacos-config-client-info.yml（TEST_GROUP）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/27.png" alt="image-20210209225901120"></p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/28.png" alt="image-20210209230236335"></p>
<ol start="3">
<li><p>bootstrap.yml的config下新增<code>group: TEST_GROUP</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">	<span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos作为配置中心地址</span></span><br><span class="line">	<span class="attr">file-extension:</span> <span class="string">yaml</span>        <span class="comment"># 指定要获取的配置文件格式</span></span><br><span class="line">	<span class="attr">group:</span> <span class="string">TEST_GROUP</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改application.yml的active为<code>active: info</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启3377、<code>http://localhost:3377/config/info</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/30.png" alt="image-20210210011852450"></p>
</li>
<li><p>修改bootstrap.yml的group为<code>DEV_GROUP</code></p>
</li>
<li><p>热部署3377之后，刷新浏览器</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/31.png" alt="image-20210210012042979"></p>
</li>
</ol>
<h5 id="Namespace方案"><a href="#Namespace方案" class="headerlink" title="Namespace方案"></a>Namespace方案</h5><p>Namespace默认有一个public。（不可删除）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/32.png" alt="image-20210210012619362"></p>
<ol>
<li><p>新建dev和test的Namespace</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/33.png" alt="image-20210210012820837"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/34.png" alt="image-20210217180629601"></p>
</li>
<li><p>给dev命名空间新增四个DataId，分三个Group。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/35.png" alt="image-20210217181012458"></p>
</li>
<li><p>在bootstrap.yml的config里添加<code>namespace: xx</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos服务注册中心地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos作为配置中心地址</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span>        <span class="comment"># 指定要获取的配置文件格式</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">DEV_GROUP</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">f4ebcf14-0ed3-4903-a106-6bebcf8e8100</span>  <span class="comment">#命名空间的ID</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启3377。在浏览器中输入<code>http://localhost:3377/config/info</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/36.png" alt="image-20210217181543543"></p>
</li>
</ol>
<h2 id="Nacos集群和持久化配置（重要）"><a href="#Nacos集群和持久化配置（重要）" class="headerlink" title="Nacos集群和持久化配置（重要）"></a>Nacos集群和持久化配置（重要）</h2><p>​    Nacos默认使用嵌入式数据库实现数据的存储。所以,如果启动多个默认配置下的Nacos节点,数据存储是存在一致性问题的。为了解决这个问题，Nacos采用了集中式存储的方式来支持集群化部署，目前只支持MySQL的存储。</p>
<p>官网说明：<a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html</a></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/37.png" alt="image-20210217182715571" style="zoom:150%;" />

<h3 id="集群部署架构图"><a href="#集群部署架构图" class="headerlink" title="集群部署架构图"></a>集群部署架构图</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/38.png"></p>
<p><strong>在真实情况下是这样的</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/39.png"></p>
<h3 id="Nacos持久化配置"><a href="#Nacos持久化配置" class="headerlink" title="Nacos持久化配置"></a>Nacos持久化配置</h3><p>​    Nacos默认自带的是嵌入式数据库derby，官方文档：<a href="https://github.com/alibaba/nacos/blob/develop/config/pom.xml">https://github.com/alibaba/nacos/blob/develop/config/pom.xml</a></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/40.png" alt="image-20210217205321178"></p>
<p><strong>derby到mysql切换配置步骤</strong>：</p>
<ol>
<li><p>nacos-server-1.1.4\nacos\conf目录下找到sql脚本，执行sql脚脚本</p>
</li>
<li><p>nacos-server-1.1.4\nacos\conf目录下找到application.properties，修改配置信息，加上这些属性即可</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">db.url.0</span>=<span class="string">jdbc:mysql://11.162.196.16:3306/nacos_devtest?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span></span><br><span class="line"><span class="meta">db.user</span>=<span class="string">nacos_devtest</span></span><br><span class="line"><span class="meta">db.password</span>=<span class="string">youdontknow</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动nacos，可以看到是个全新的空记录界面，以前是记录进derby</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/41.png" alt="image-20210217205805579"></p>
</li>
<li><p>测试是否切换成功，创建配置信息，然后查看数据库</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/42.png" alt="image-20210217210307738"></p>
</li>
</ol>
<h3 id="Linux版Nacos-MySQL生产环境配置"><a href="#Linux版Nacos-MySQL生产环境配置" class="headerlink" title="Linux版Nacos+MySQL生产环境配置"></a>Linux版Nacos+MySQL生产环境配置</h3><p>​    配置Linux版Nacos+MySQL生产环境，预计需要，1个nginx+3个nacos注册中心+1个mysql。</p>
<p>​    Nacos下载linux版本，下载地址：<a href="https://github.com/alibaba/nacos/releases/tag/1.1.4">https://github.com/alibaba/nacos/releases/tag/1.1.4</a></p>
<h4 id="集群配置步骤（重点）"><a href="#集群配置步骤（重点）" class="headerlink" title="集群配置步骤（重点）"></a>集群配置步骤（重点）</h4><ol>
<li><p>Linux服务器上mysql数据库配置</p>
</li>
<li><p>application.properties配置</p>
</li>
<li><p>Linux服务器上nacos的集群配置cluster.conf</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/43.png" alt="image-20210217210959805" style="zoom: 65%;" />
</li>
<li><p>编辑Nacos的启动脚本startup.sh，使它能够接受不同的启动端</p>
<table>
<thead>
<tr>
<th align="center">修改之前</th>
<th align="center">修改之后</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/44.png" alt="image-20210217211224217"></td>
<td align="center"><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/45.png" alt="image-20210217211232669"></td>
</tr>
<tr>
<td align="center"><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/46.png" alt="image-20210217211316358"></td>
<td align="center"><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/47.png" alt="image-20210217211321015"></td>
</tr>
</tbody></table>
</li>
<li><p>修改Nginx的配置，由它作为负载均衡器</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/48.png" alt="image-20210217211526793"></p>
</li>
<li><p>启动，测试</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/49.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud10/50.png" alt="image-20210217211748072"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记06---服务熔断Hystrix</title>
    <url>/HuaStarOS.github.io/2021/01/10/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%ADHystrix/</url>
    <content><![CDATA[<h1 id="Hystrix-断路器"><a href="#Hystrix-断路器" class="headerlink" title="Hystrix: 断路器"></a>Hystrix: 断路器</h1><h2 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h2><p>​    <strong><code>复杂分布式体系结构中的应用程序有数十个依赖更新，每个依赖关系在某些时候将不可避免地失败！</code></strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/1.png" alt="image-20210110152551919"></p>
<h3 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h3><p>​    多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的<strong>“扇出”</strong>，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，那么对微服务A的调用就会占用越来越多的系统资源，因为微服务A一直在等待其他微服务的结果。进而引起系统崩溃，所谓的<strong>“雪崩效应”</strong></p>
<p>​    对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。<strong>这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行</strong>。</p>
<p>​    所以,通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</p>
<h2 id="什么是Hystrix"><a href="#什么是Hystrix" class="headerlink" title="什么是Hystrix?"></a>什么是Hystrix?</h2><p>​    <strong>Hystrix</strong>是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，<strong>Hystrix</strong><code> 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</code></p>
<p>​    “<strong>断路器</strong>”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<p>​    功能： <strong>服务降级</strong>，<strong>服务熔断</strong>，<strong>接近实时的监控</strong>，限流，隔离等。</p>
<p>​    <strong>官网资料</strong>：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p>
<h2 id="Hystrix重要概念"><a href="#Hystrix重要概念" class="headerlink" title="Hystrix重要概念"></a>Hystrix重要概念</h2><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>​    提供者和消费者都可以进行服务降级。（一般都是放在客户端（消费者））</p>
<p>​    <strong>服务降级</strong>是从整个系统的负荷情况出发和考虑的，对某些负荷会比较高的情况，为了预防某些功能（业务场景）出现负荷过载或者响应慢的情况，<strong>保证核心交易正常运作或高效运作</strong>（弃车保帅）。<strong>在其内部暂时舍弃对一些非核心的接口和数据的请求，而是直接返回一个提前准备好的fallback（退路）错误处理信息。</strong>这样，虽然提供的是一个有损的服务，但却保证了整个系统的稳定性和可用性。</p>
<p>​    简单来说：服务器负荷过载或者响应慢，导致服务不可用了，请稍后再试，不让客户端盲目等待占用资源并立刻返回一个友好提示—<code>fallback(一个提前准备好的错误处理信息)</code></p>
<p>​    如果还是不理解，那么可以举个例子：假如目前有很多人想要给我付钱，但我的服务器除了正在运行支付的服务之外，还有一些其它的服务在运行，比如搜索、定时任务和详情等等。然而这些不重要的服务就占用了JVM的不少内存与CPU资源，为了能把钱都收下来（钱才是目标），当调用不重要的服务直接返回一个友好提示（<strong>fallback</strong>），这样处理后的后端处理收钱的服务就有更多的资源来收钱了（收钱速度更快了），这就是一个简单的服务降级的使用场景。</p>
<p>​    <strong>哪些情况会出现服务降级</strong></p>
<ul>
<li><p>程序运行异常</p>
</li>
<li><p>超时</p>
</li>
<li><p>服务熔断触发服务降级</p>
</li>
<li><p>线程池/信号量用完了（没有资源可以使用了）也会导致服务降级</p>
<p>………</p>
</li>
</ul>
<h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>​    <strong>熔断机制是阻止雪崩效应的一种微服务链路保护机制</strong>。</p>
<p>​    当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，默认情况下当失败的调用到一定阀值缺省是<strong>5秒内20次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：<code>@HystrixCommand</code>。</p>
<p>​    服务熔断解决如下问题：</p>
<ul>
<li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li>
<li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复</li>
</ul>
<p>​    流程步骤</p>
<ul>
<li>​    <strong>服务的降级 –&gt; 进而熔断 –&gt; 恢复调用链路</strong></li>
</ul>
<h3 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h3><p>​    服务限流其实是指当系统资源不够，不足以应对大量请求，即系统资源与访问量出现矛盾的时候，我们为了保证有限的资源能够正常服务，因此对系统按照预设的规则进行流量限制或功能限制的一种方法。</p>
<p>简单来说：禁止大量请求一起过来，大家排队，一秒钟通过N个请求，有序进行</p>
<h2 id="Hystrix使用"><a href="#Hystrix使用" class="headerlink" title="Hystrix使用"></a>Hystrix使用</h2><h3 id="构建工程"><a href="#构建工程" class="headerlink" title="构建工程"></a>构建工程</h3><h4 id="构建提供者8001项目"><a href="#构建提供者8001项目" class="headerlink" title="构建提供者8001项目"></a>构建提供者8001项目</h4><p>把注册中心7001，切换改为单机版，方便测试。</p>
<ol>
<li><p>新建项目cloud-provider-hystrix-payment8001</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">&lt;!-- hystrix--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">&lt;!-- 引用自己定义的api通用包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--   一个Java工具包     --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line">	</span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">      <span class="comment">#集群版</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常访问方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;\tpaymentInfo_OK，id：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//超时访问方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; paymentInfo_TimeOut , id&quot;</span> + id + <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;**********info&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;**********info&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<p>先启动7001，在启动8001</p>
<p><code>http://localhost:8001/payment/hystrix/ok/31</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/2.png" alt="image-20210110162732485"></p>
<p><code>http://localhost:8001/payment/hystrix/timeout/33</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/3.png" alt="image-20210110162813630"></p>
</li>
</ol>
<p>在此项目基础上，从正确 -&gt; 错误 -&gt; 降级熔断 -&gt; 恢复</p>
</li>
</ol>
<h4 id="高并发测试"><a href="#高并发测试" class="headerlink" title="高并发测试"></a>高并发测试</h4><ul>
<li><p><strong>安装JMeter</strong></p>
<p>JMeter下载地址：<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/4.png" alt="image-20210110163609506"></p>
</li>
<li><p>进入解压后的目录的bin目录，找到jmeter.properties文件，修改语言zh_CN。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/5.png" alt="image-20210110164136124"></p>
</li>
<li><p>在bin目录下，双击<code>jmeter.bat</code>运行</p>
<p>修改成中文</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/6.png" alt="image-20210110164359140"></p>
<p><strong>进行高并发测试</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/7.png" alt="image-20210110164708249"></p>
<p>然后去访问<code>http://localhost:8001/payment/hystrix/ok/1</code>，访问速度变慢了。</p>
<p><strong>JMeter压测结论</strong></p>
<p>上面还是服务提供者8001自己测试，假如此时外部的消费者80也来访问,那消费者只能干等，最终导致消费端80不满意，服务端8001直接被拖死</p>
</li>
</ul>
<h4 id="构建消费者80项目"><a href="#构建消费者80项目" class="headerlink" title="构建消费者80项目"></a>构建消费者80项目</h4><ol>
<li><p>新建cloud-consumer-feign-hystrix-order80</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- openfeign --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   hystrix     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"><span class="comment">#需要加上，否则会报错</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">4000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">4000</span>      </span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-provide-hystrix-payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;**********info&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;**********info&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>启动80，进行测试</p>
<p>在浏览器中输入<code>http://localhost/consumer/payment/hystrix/ok/31</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/8.png" alt="image-20210110170518852"></p>
</li>
<li><p>启动JMeter,然后再进行测试，可以发现不是在转圈圈等待就是超时报错</p>
</li>
</ol>
<h4 id="故障现象、导致原因以及解决"><a href="#故障现象、导致原因以及解决" class="headerlink" title="故障现象、导致原因以及解决"></a>故障现象、导致原因以及解决</h4><ul>
<li><p>现象</p>
<p>当有大量请求访问8001的接口服务的时候，同一层次的其他接口服务会响应缓慢，因为tomcat线程池里面的工作线程已经被挤占完毕，导致80调用8001时，响应缓慢，在转圈圈</p>
</li>
<li><p>解决</p>
<p><strong>正是因为有故障现象，才有服务降级/熔断/限流等技术诞生。</strong></p>
<p>解决方案：<strong>服务降级</strong></p>
<ol>
<li>超时导致服务变慢———&gt;则超时不再等待，直接返回fallback</li>
<li>出错(宕机或者程序运行出错)———-&gt; 出错要有兜底(falback)</li>
</ol>
<p><code>对方服务（8001）超时了，调用者（80）不能一直等待，必须要服务降级。</code></p>
<p><code>对方服务（8001）down机了，调用者（80）不能一直等待，必须要服务降级。</code></p>
<p><code>对方服务（8001）OK,调用者（80）自己出故障或者有自我要求（自己的等待时间小于服务提供者的等待时间）自己处理降级。</code></p>
</li>
</ul>
<h3 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h3><p>​    服务降级需要使用到<code>@HystrixCommand</code>注解。</p>
<h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p>​    给服务提供者8001的服务设置调用超时的峰值，峰值内可以正常运作，超时了需要有兜底的方法处理，作为服务降级的fallback</p>
<ol>
<li><p>然后在8001的主启动类上添加<code>@EnableCircuitBreaker</code>注解，启用断路器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//是否开启断路器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>修改8001中PaymentService的<code>paymentInfo_TimeOut</code>方法，并添加<code>paymentInfo_TimeOutHandler</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(</span></span><br><span class="line"><span class="meta">    //fallbackMethod 指定服务降级，兜底的方法</span></span><br><span class="line"><span class="meta">    fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta"> //设置自身超时调用时间的峰值为3秒，峰值内可以正常运行，超过了就调用fallbackMethod指定的方法</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;4000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber = <span class="number">3000</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; paymentInfo_TimeOut , id&quot;</span> + id + <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 系统繁忙，请稍后再试 , id&quot;</span> + id + <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动7001和8001，测试8001的fallback，<code>http://localhost/consumer/payment/hystrix/ok/31</code>成功进入fallback方法。（并且fallback方法是用Hystrix的线程池）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/9.png" alt="image-20210110212644980"></p>
</li>
<li><p>去掉sleep,添加<code>int age = 10/0</code>，模拟运行错误。<code>http://localhost/consumer/payment/hystrix/ok/31</code>也可以进入fallback方法。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/9.png" alt="image-20210110212644980"></p>
</li>
</ol>
<p><strong>总结：</strong></p>
<p>​    <strong>一旦调用服务方法失败或者超时，抛出了错误信息后会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/10.png" alt="image-20210110213632461"></p>
<p>​    <strong>fallback方法一定要和<code>@HystrixCommand</code>在同一个类里面</strong>，通过源代码可以发现</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/14.png" alt="image-20210110222744091"></p>
<h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><ol>
<li><p>在80的yml中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类添加<code>@EnableHystrix</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span> <span class="comment">//启动Hystrix功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改OrderHystrixController的paymentInfo_TimeOut方法，并添加paymentTimeOutFallbackMethod方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//int age = 10 / 0;</span></span><br><span class="line">        String result = service.paymentInfo_TimeOut(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是服务消费者80，对方支付系统繁忙请10秒钟后再试一下或者系统出错&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>http://localhost/consumer/payment/hystrix/timeout/1</code>（如果提供者和消费者都设置了服务降级，会优先进入消费者的fallback）</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/11.png" alt="image-20210110215140939"></p>
<p>​    添加<code>int age = 10/0</code>,模拟运行异常</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/11.png" alt="image-20210110215140939"></p>
<h3 id="目前的问题和解决方法"><a href="#目前的问题和解决方法" class="headerlink" title="目前的问题和解决方法"></a>目前的问题和解决方法</h3><p><strong>目前的问题：</strong></p>
<ol>
<li>每个业务方法对应一个兜底的方法，代码膨胀。要把统一和自定义的分开</li>
<li>兜底方法和业务逻辑混在一起，代码混乱</li>
</ol>
<h4 id="代码膨胀的解决方法"><a href="#代码膨胀的解决方法" class="headerlink" title="代码膨胀的解决方法"></a>代码膨胀的解决方法</h4><p><strong>解决方法：设置全局fallback方法</strong></p>
<ol>
<li><p>在80的<code>OrderHystrixController</code>中添加全局fallback方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局fallback方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_Global_FallbackMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Global异常处理信息，请稍后再试&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>并在<code>OrderHystrixController</code>类上加上<code>@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</code>，设置全局fallback方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ....   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个<code>paymentInfo_TimeOut2</code>方法测试全局fallback方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout2/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//没有指定fallback就使用全局fallback方法</span></span><br><span class="line">   <span class="meta">@HystrixCommand</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//int age = 10 / 0;</span></span><br><span class="line">       String result = service.paymentInfo_TimeOut(id);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>进行测试，在浏览器中输入<code>http://localhost/consumer/payment/hystrix/timeout2/33</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/12.png" alt="image-20210110221841156"></p>
</li>
<li><p><strong>总结</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/13.png" alt="image-20210110222237789"></p>
</li>
</ol>
<h4 id="代码混乱的解决方法"><a href="#代码混乱的解决方法" class="headerlink" title="代码混乱的解决方法"></a>代码混乱的解决方法</h4><p><strong>解决方法</strong>：<strong>在重新新建一个类（<code>PaymentHystrixServiceImpl</code>）实现<code>feign</code>（<code>PaymentHystrixService</code>）接口,<code>统一为接口里面的方法定义对应的fallback方法</code></strong></p>
<ol>
<li><p>在80的<code>service</code>包下新建<code>PaymentFallbackServiceImpl</code>类，实现<code>PaymentHystrixService</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 统一为接口里面的方法定义对应的fallback方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----------PaymentHystrixServiceImpl fall back-----paymentInfo_OK   出错&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----------PaymentHystrixServiceImpl fall back-----paymentInfo_TimeOut   出错&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要在yml中加上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后给PaymentHystrixService接口的@FeignClient注解加上<code>fallback = PaymentFallbackService.class</code>属性，用于出错时进行fallback处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-provide-hystrix-payment&quot;,fallback = PaymentHystrixServiceImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中<code>http://localhost/consumer/payment/hystrix/ok/31</code> , 成功访问</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/15.png" alt="image-20210110223731255"></p>
</li>
<li><p>关掉8001，模拟提供者宕机，刷新一下</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/16.png" alt="image-20210110224001713"></p>
</li>
</ol>
<h3 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>​    在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，默认情况下当失败的调用到一定阀值缺省是<strong>5秒内20次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：<code>@HystrixCommand</code>。</p>
<h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><ol>
<li><p>在8001的PaymentService中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">@HystrixProperty(name =&quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),//是否开启断路器</span></span><br><span class="line"><span class="meta">@HystrixProperty(name =&quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),//请求次数</span></span><br><span class="line"><span class="meta">@HystrixProperty(name =&quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),//时间窗口期</span></span><br><span class="line"><span class="meta">@HystrixProperty(name =&quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),//失败率达到多少后开启断路器 60---是指60%</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;*******id不能为负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String serialNumber = IdUtil.simpleUUID();</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;调用成功，流水号&quot;</span> + serialNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//fallback方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;id 不能为负数，请稍后再试&quot;</span> + <span class="string">&quot;id&quot;</span>+id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在8001的PaymentController中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">       String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">       log.info(<span class="string">&quot;*****result: &quot;</span> + result);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类上加上<code>@EnableCircuitBreaker</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//是否开启断路器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器输入</p>
<p><code>http://localhost:8001/payment/circuit/11</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/17.png" alt="image-20210110225124662"></p>
<p><code>http://localhost:8001/payment/circuit/-11</code>（输入超过6次进入熔断）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/18.png" alt="image-20210110225343472"></p>
<p>熔断10秒内就算是正确的请求也返回错误信息。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/19.png" alt="image-20210110225632681"></p>
<p>10秒后进入半开模式，会让一次请求通过，此时如果是正确的请求，那么就关闭熔断，否则再次进入熔断，10秒后再次开启半开模式，会让一次请求通过，直到半开模式处理到正确请求。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/20.png" alt="image-20210110225825248"></p>
</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>大师论文：</strong><a href="https://martinfowler.com/bliki/CircuitBreaker.html">https://martinfowler.com/bliki/CircuitBreaker.html</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/21.png" alt="image-20210110230205890"></p>
<p><strong>总结</strong>：如果请求次数的错误率超过指定值，开启熔断，经过一段时间后，变为半开模式，然后放进一个请求进行处理，如果请求处理成功，关闭熔断；如果还是报错，继续进入熔断，再经过一段时间后，变为半开模式，再进行对下一个请求进行处理，一直在熔断，半开模式来回切换，直到请求成功，关闭熔断。</p>
<p>​    <strong>熔断类型</strong></p>
<p>​    熔断打开：请求不再进行调用当前服务，内部设罩时钟一般为MTTR（平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态熔断关闭。</p>
<p>   熔断关闭：不会对服务进行熔断。</p>
<p>   熔断半开：部分请求根据规则调用当前服务，如果请求成功目符合规则则认为当前服务恢复正常，关闭熔断。</p>
<p>​    <strong>官网步骤：</strong><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/22.png" alt="image-20210110235007719"></p>
<p>断路器在什么情况下开始起作用：</p>
<p><strong>官方文档：</strong><a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/23.png" alt="image-20210110235357330"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),//是否开启断路器</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),//请求次数，如果请求次数超过了请求总数阀值，熔断器将会开启</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),//时间窗口期</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),//失败率达到多少后开启熔断器 60---是指60%</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(Integer id)</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>涉及到断路器的三个重要参数： 快照时间窗、请求总数阀值、错误百分比阀值。</strong></p>
<ol>
<li><p><strong>快照时间窗</strong>：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。</p>
</li>
<li><p><strong>请求总数阀值</strong>：在快照时间窗内，<strong>必须满足请求总数阀值才有资格熔断</strong>。默认为20，意味着在10秒内，如果该<strong>hystrix命令的调用次数不足20次,即使所有的请求都超时或其他原因失败，断路器都不会打开</strong>。如果请求次数超过了<strong>请求总数阀值</strong>，<strong>熔断器将会开启</strong></p>
</li>
<li><p><strong>错误百分比阀值</strong>：当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</p>
</li>
</ol>
<p><strong>断路器开启或关闭的条件：</strong></p>
<ol>
<li>当满足一定的阀值的时候（默认10秒内超过20个请求次数）</li>
<li>当失败率达到一定的时候（默认10秒内超过50%的请求失败）</li>
<li>到达以上阀值，断路器将会开启</li>
<li>当开启的时候，所有请求都不会进行转发</li>
<li>一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。</li>
<li>如果成功，断路器会关闭，若失败，继续开启。重复4和5</li>
</ol>
<p><strong>断路器打开之后：</strong></p>
<ol>
<li><p><strong>再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback</strong>，通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</p>
</li>
<li><p><strong>原来的主逻辑要如何恢复呢？</strong></p>
<p>对于这一问题，hystrix也为我们实现了自动恢复功能。<strong>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计</strong></p>
</li>
</ol>
<h3 id="服务限流-1"><a href="#服务限流-1" class="headerlink" title="服务限流"></a>服务限流</h3><p>​    <strong>会在alibaba的Sentinel补充。</strong></p>
<h3 id="Hystrix工作流程"><a href="#Hystrix工作流程" class="headerlink" title="Hystrix工作流程"></a>Hystrix工作流程</h3><p><strong>官方文档：</strong><a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/29.png" alt="image-20210111031121811"></p>
<p>官方图示例：</p>
<p>  <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/24.png" alt="image-20210110235942356"></p>
<h3 id="服务监控HystrixDashboard"><a href="#服务监控HystrixDashboard" class="headerlink" title="服务监控HystrixDashboard"></a>服务监控HystrixDashboard</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>​    除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p>
<h4 id="配置Dashboard"><a href="#配置Dashboard" class="headerlink" title="配置Dashboard"></a>配置Dashboard</h4><ol>
<li><p>新建模块cloud-consumer-hystrix-dashboard9001</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   hystrix仪表盘图形化     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//启用Hystrix仪表板</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboard9001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboard9001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动9001，在浏览器中输入<code>http://localhost:9001/hystrix</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/25.png" alt="image-20210111001402342"></p>
</li>
<li><p>注意：所有微服务提供者都需要在pom中引入监控依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在8001的主启动类中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment">   * ServletRegistrationBean因为SpringBoot的默认路径不是 “/hystrix.stream&quot;</span></span><br><span class="line"><span class="comment">   * 只要在自己的项目里配置上下的servlet就可以了</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet() ;</span><br><span class="line">      ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">      registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">      registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">      registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>  registrationBean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="监控测试"><a href="#监控测试" class="headerlink" title="监控测试"></a>监控测试</h4><ol>
<li><p>9001监控8001</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/26.png" alt="image-20210111030406609"></p>
</li>
<li><p>在浏览器输入<code>http://localhost:8001/payment/circuit/11</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/27.png" alt="image-20210111030601126"></p>
<p>多次输入<code>http://localhost:8001/payment/circuit/-11</code>错误的访问。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/28.png" alt="image-20210111030815528"></p>
<p>稍等一会，过了一个时间窗口期，输入正确的访问<code>http://localhost:8001/payment/circuit/11</code>，熔断就会关闭。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/30.png" alt="image-20210111031237366"></p>
</li>
</ol>
<h4 id="如何看图"><a href="#如何看图" class="headerlink" title="如何看图"></a>如何看图</h4><ul>
<li><p><strong>7色</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/31.png" alt="image-20210111031844509"></p>
</li>
<li><p><strong>1圈</strong></p>
<p>​    实心圆：共有两种含义。它通过颜色的变化代表了实例的健康程度，它的健康度从绿色、黄色、橙色红、色递减。</p>
<p>​    该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例。</p>
</li>
<li><p><strong>1线</strong></p>
<p>​    曲线：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。</p>
</li>
<li><p><strong>整体说明</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/32.png" alt="image-20210111032121738"></p>
</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/33.png" alt="image-20210111032220585"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记12-分布式事务处理Seata</title>
    <url>/HuaStarOS.github.io/2021/03/04/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B012-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86Seata/</url>
    <content><![CDATA[<h1 id="Seata-分布式事务处理"><a href="#Seata-分布式事务处理" class="headerlink" title="Seata 分布式事务处理"></a>Seata 分布式事务处理</h1><h2 id="分布式事务问题"><a href="#分布式事务问题" class="headerlink" title="分布式事务问题"></a>分布式事务问题</h2><p>​    当单体应用被拆分成微服务应用，原来的三个模块被拆分成三个独立的应用，分别使用三个独立的数据源,业务操作需要调用三个服务来完成。<code>此时每个服务内部的数据一致性由本地事务来保证，但是全局的数据一致性问题没法保证。</code>                    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/1.png" alt="image-20210304063539242"></p>
<p><strong>一次业务操作需要跨多个数据源或需要跨多个系统进行远程调用， 就会产生分布式事务问题</strong></p>
<h2 id="Seata-简介"><a href="#Seata-简介" class="headerlink" title="Seata 简介"></a>Seata 简介</h2><p>​    <code>Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</code></p>
<p>官网：<a href="http://seata.io/zh-cn/">http://seata.io/zh-cn/</a></p>
<h3 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h3><ul>
<li><p><strong>TC (Transaction Coordinator) - 事务协调者</strong></p>
<ul>
<li>维护全局和分支事务的状态，驱动全局事务提交或回滚。</li>
</ul>
</li>
<li><p><strong>TM (Transaction Manager) - 事务管理器</strong></p>
<ul>
<li>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</li>
</ul>
</li>
<li><p><strong>RM (Resource Manager) - 资源管理器</strong></p>
<ul>
<li>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</li>
</ul>
</li>
</ul>
<h3 id="分布式事务处理过程"><a href="#分布式事务处理过程" class="headerlink" title="分布式事务处理过程"></a>分布式事务处理过程</h3><p>​    <code>分布式事务处理是通过一个ID+三个组件模型实现的</code>。ID指的是<strong>全局唯一的事务ID</strong>。三个组件指的是<strong>TC、TM、RM</strong></p>
<p><strong>处理过程</strong></p>
<ol>
<li>TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的事务ID (XID);</li>
<li>XID 在微服务调用链路的上下文中传播;</li>
<li>RM向TC注册分支事务,将其纳入XID对应全局事务的管辖;</li>
<li>TM向TC发起针对XID的全局提交或回滚决议;</li>
<li>TC调度XID下管辖的全部分支事务完成提交或回滚请求。</li>
</ol>
<img src="https://img.alicdn.com/tfs/TB1rDpkJAvoK1RjSZPfXXXPKFXa-794-478.png" alt="img" style="zoom:85%;" />

<h2 id="Seata-Server安装"><a href="#Seata-Server安装" class="headerlink" title="Seata-Server安装"></a>Seata-Server安装</h2><ol>
<li><p>下载地址：<a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a></p>
</li>
<li><p>seata-server-0.9.0.zip解压到指定目录并修改conf目录下的file.conf配置文件</p>
<ul>
<li><p>先备份原始file.conf文件</p>
</li>
<li><p>主要修改：自定义事务组名称+事务日志存储模式为db+数据库连接信息</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/2.png" style="zoom:67%;" />

<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/3.png" alt="image-20210304064635910" style="zoom:67%;" />

<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/4.png" style="zoom:67%;" />
</li>
</ul>
</li>
<li><p>mysq|5.7数据库新建库seata</p>
</li>
<li><p>在seata库里建表</p>
<ul>
<li>建表db_store.sql在\seata-server-0.9.0\seata\conf目录里面的<code>db_store.sql</code></li>
</ul>
</li>
<li><p>修改seata-server-0.9.0\seata\conf目录下的registry.conf配置文件</p>
<ul>
<li><p>目的是:指明注册中心为nacos，及修改nacos连接信息</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/5.png" style="zoom:67%;" />
</li>
</ul>
</li>
<li><p>先启动nacos</p>
</li>
<li><p>再启动seata-server</p>
</li>
</ol>
<h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><p>​    这里我们会创建三个服务, 一个订单服务, 一个库存服务, 一个账户服务。</p>
<p>​    当用户下单时，会在订单服务中创建一 个订单,然后通过远程调用库存服务来扣减下单商品的库存,再通过远程调用账户服务来扣减用户账户里面的余额,最后在订单服务中修改订单状态为已完成。</p>
<p>​    <code>业务需求: 下订单-&gt;减库存-&gt;扣余额-&gt;改(订单状态)</code></p>
<p>​    <strong>该操作跨越二三个数据库,有两次远程调用，很明显会有分布式事务问题。</strong></p>
<h3 id="订单-库存-账户业务数据库创建"><a href="#订单-库存-账户业务数据库创建" class="headerlink" title="订单/库存/账户业务数据库创建"></a>订单/库存/账户业务数据库创建</h3><ol>
<li><p>创建订单数据库<code>seata_order</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> seata_order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> seata_order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_order(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line"><span class="string">`product_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>)<span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line"><span class="string">`count`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line"><span class="string">`money`</span> <span class="built_in">DECIMAL</span>(<span class="number">11</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;金额&#x27;</span>,</span><br><span class="line"><span class="string">`status`</span> <span class="built_in">INT</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;订单状态: 0:创建中; 1:已完结&#x27;</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">7</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t_order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`undo_log`</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`branch_id`</span>     <span class="built_in">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;branch transaction id&#x27;</span>,</span><br><span class="line">    <span class="string">`xid`</span>           <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;global transaction id&#x27;</span>,</span><br><span class="line">    <span class="string">`context`</span>       <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;undo_log context,such as serialization&#x27;</span>,</span><br><span class="line">    <span class="string">`rollback_info`</span> LONGBLOB     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;rollback info&#x27;</span>,</span><br><span class="line">    <span class="string">`log_status`</span>    <span class="built_in">INT</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;0:normal status,1:defense status&#x27;</span>,</span><br><span class="line">    <span class="string">`log_created`</span>   DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;create datetime&#x27;</span>,</span><br><span class="line">    <span class="string">`log_modified`</span>  DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;modify datetime&#x27;</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>, <span class="string">`branch_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  AUTO_INCREMENT = <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COMMENT</span> =<span class="string">&#x27;AT transaction mode undo table&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建库存数据库<code>seata_storage</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> seata_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> seata_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_storage(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`product_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;产品id&#x27;</span>,</span><br><span class="line"><span class="string">`total`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;总库存&#x27;</span>,</span><br><span class="line"><span class="string">`used`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;已用库存&#x27;</span>,</span><br><span class="line"><span class="string">`residue`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;剩余库存&#x27;</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_storage(<span class="string">`id`</span>,<span class="string">`product_id`</span>,<span class="string">`total`</span>,<span class="string">`used`</span>,<span class="string">`residue`</span>)<span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;100&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`undo_log`</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`branch_id`</span>     <span class="built_in">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;branch transaction id&#x27;</span>,</span><br><span class="line">    <span class="string">`xid`</span>           <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;global transaction id&#x27;</span>,</span><br><span class="line">    <span class="string">`context`</span>       <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;undo_log context,such as serialization&#x27;</span>,</span><br><span class="line">    <span class="string">`rollback_info`</span> LONGBLOB     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;rollback info&#x27;</span>,</span><br><span class="line">    <span class="string">`log_status`</span>    <span class="built_in">INT</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;0:normal status,1:defense status&#x27;</span>,</span><br><span class="line">    <span class="string">`log_created`</span>   DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;create datetime&#x27;</span>,</span><br><span class="line">    <span class="string">`log_modified`</span>  DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;modify datetime&#x27;</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>, <span class="string">`branch_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  AUTO_INCREMENT = <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COMMENT</span> =<span class="string">&#x27;AT transaction mode undo table&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建账户数据库<code>seata_account</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> seata_account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> seata_account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_account(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line"><span class="string">`user_id`</span> <span class="built_in">BIGINT</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line"><span class="string">`total`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;总额度&#x27;</span>,</span><br><span class="line"><span class="string">`used`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;已用余额&#x27;</span>,</span><br><span class="line"><span class="string">`residue`</span> <span class="built_in">DECIMAL</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;剩余可用额度&#x27;</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_account(<span class="string">`id`</span>,<span class="string">`user_id`</span>,<span class="string">`total`</span>,<span class="string">`used`</span>,<span class="string">`residue`</span>)<span class="keyword">VALUES</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;1000&#x27;</span>,<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;1000&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_account;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`undo_log`</span></span><br><span class="line">(</span><br><span class="line">    <span class="string">`branch_id`</span>     <span class="built_in">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;branch transaction id&#x27;</span>,</span><br><span class="line">    <span class="string">`xid`</span>           <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;global transaction id&#x27;</span>,</span><br><span class="line">    <span class="string">`context`</span>       <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;undo_log context,such as serialization&#x27;</span>,</span><br><span class="line">    <span class="string">`rollback_info`</span> LONGBLOB     <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;rollback info&#x27;</span>,</span><br><span class="line">    <span class="string">`log_status`</span>    <span class="built_in">INT</span>(<span class="number">11</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;0:normal status,1:defense status&#x27;</span>,</span><br><span class="line">    <span class="string">`log_created`</span>   DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;create datetime&#x27;</span>,</span><br><span class="line">    <span class="string">`log_modified`</span>  DATETIME(<span class="number">6</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;modify datetime&#x27;</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`ux_undo_log`</span> (<span class="string">`xid`</span>, <span class="string">`branch_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span></span><br><span class="line">  AUTO_INCREMENT = <span class="number">1</span></span><br><span class="line">  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8 <span class="keyword">COMMENT</span> =<span class="string">&#x27;AT transaction mode undo table&#x27;</span>;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="订单-库存-账户业务微服务准备"><a href="#订单-库存-账户业务微服务准备" class="headerlink" title="订单/库存/账户业务微服务准备"></a>订单/库存/账户业务微服务准备</h3><p>官方列举的常见问题：<a href="https://seata.io/zh-cn/docs/overview/faq.html">https://seata.io/zh-cn/docs/overview/faq.html</a></p>
<h4 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h4><ol>
<li><p>新建模块seata-order-service-2001</p>
</li>
<li><p>pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">pom</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- seata--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-seata<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.seata<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seata-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">seata-order-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alibaba:</span></span><br><span class="line">      <span class="attr">seata:</span></span><br><span class="line">        <span class="comment"># 自定义事务组名称需要与seata-server中的对应</span></span><br><span class="line">        <span class="attr">tx-service-group:</span> <span class="string">fsp_tx_group</span></span><br><span class="line">        <span class="attr">service:</span></span><br><span class="line">          <span class="attr">vgroupMapping:</span></span><br><span class="line">            <span class="comment">#要和tx-service-group的值一致</span></span><br><span class="line">            <span class="attr">fsp_tx_group:</span> <span class="string">default</span></span><br><span class="line">          <span class="attr">grouplist:</span></span><br><span class="line">            <span class="comment"># seata seaver的 地址配置，此处可以集群配置是个数组</span></span><br><span class="line">            <span class="attr">default:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8091</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#nacos</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment"># 当前数据源操作类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment"># mysql驱动类</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/seata_order?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">io:</span></span><br><span class="line">      <span class="attr">seata:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建file.conf文件<code>（在resources目录下）</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">transport</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # tcp udt unix-domain-socket</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;TCP&quot;</span></span><br><span class="line"><span class="comment">  #NIO NATIVE</span></span><br><span class="line">  <span class="attr">server</span> = <span class="string">&quot;NIO&quot;</span></span><br><span class="line"><span class="comment">  #enable heartbeat</span></span><br><span class="line">  <span class="attr">heartbeat</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">  #thread factory for netty</span></span><br><span class="line">  <span class="meta">thread-factory</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">boss-thread-prefix</span> = <span class="string">&quot;NettyBoss&quot;</span></span><br><span class="line">    <span class="meta">worker-thread-prefix</span> = <span class="string">&quot;NettyServerNIOWorker&quot;</span></span><br><span class="line">    <span class="meta">server-executor-thread-prefix</span> = <span class="string">&quot;NettyServerBizHandler&quot;</span></span><br><span class="line">    <span class="meta">share-boss-worker</span> = <span class="string">false</span></span><br><span class="line">    <span class="meta">client-selector-thread-prefix</span> = <span class="string">&quot;NettyClientSelector&quot;</span></span><br><span class="line">    <span class="meta">client-selector-thread-size</span> = <span class="string">1</span></span><br><span class="line">    <span class="meta">client-worker-thread-prefix</span> = <span class="string">&quot;NettyClientWorkerThread&quot;</span></span><br><span class="line"><span class="comment">    # netty boss thread size,will not be used for UDT</span></span><br><span class="line">    <span class="meta">boss-thread-size</span> = <span class="string">1</span></span><br><span class="line"><span class="comment">    #auto default pin or 8</span></span><br><span class="line">    <span class="meta">worker-thread-size</span> = <span class="string">8</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">shutdown</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # when destroy server, wait seconds</span></span><br><span class="line">    <span class="attr">wait</span> = <span class="string">3</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">serialization</span> = <span class="string">&quot;seata&quot;</span></span><br><span class="line">  <span class="attr">compressor</span> = <span class="string">&quot;none&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">service</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  #vgroup-&gt;rgroup</span></span><br><span class="line">  <span class="meta">vgroup_mapping.fsp_tx_group</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line"><span class="comment">  #only support single node</span></span><br><span class="line">  <span class="meta">default.grouplist</span> = <span class="string">&quot;127.0.0.1:8091&quot;</span></span><br><span class="line"><span class="comment">  #degrade current not support</span></span><br><span class="line">  <span class="attr">enableDegrade</span> = <span class="string">false</span></span><br><span class="line"><span class="comment">  #disable</span></span><br><span class="line">  <span class="attr">disable</span> = <span class="string">false</span></span><br><span class="line"><span class="comment">  #unit ms,s,m,h,d represents milliseconds, seconds, minutes, hours, days, default permanent</span></span><br><span class="line">  <span class="meta">max.commit.retry.timeout</span> = <span class="string">&quot;-1&quot;</span></span><br><span class="line">  <span class="meta">max.rollback.retry.timeout</span> = <span class="string">&quot;-1&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">client</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="meta">async.commit.buffer.limit</span> = <span class="string">10000</span></span><br><span class="line">  <span class="attr">lock</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">retry.internal</span> = <span class="string">10</span></span><br><span class="line">    <span class="meta">retry.times</span> = <span class="string">30</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="meta">report.retry.count</span> = <span class="string">5</span></span><br><span class="line">  <span class="meta">tm.commit.retry.count</span> = <span class="string">1</span></span><br><span class="line">  <span class="meta">tm.rollback.retry.count</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## transaction log store</span></span><br><span class="line"><span class="attr">store</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  ## store mode: file、db</span></span><br><span class="line">  <span class="attr">mode</span> = <span class="string">&quot;db&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">  ## file store</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">dir</span> = <span class="string">&quot;sessionStore&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">    # branch session size , if exceeded first try compress lockkey, still exceeded throws exceptions</span></span><br><span class="line">    <span class="meta">max-branch-session-size</span> = <span class="string">16384</span></span><br><span class="line"><span class="comment">    # globe session size , if exceeded throws exceptions</span></span><br><span class="line">    <span class="meta">max-global-session-size</span> = <span class="string">512</span></span><br><span class="line"><span class="comment">    # file buffer size , if exceeded allocate new buffer</span></span><br><span class="line">    <span class="meta">file-write-buffer-cache-size</span> = <span class="string">16384</span></span><br><span class="line"><span class="comment">    # when recover batch read size</span></span><br><span class="line">    <span class="meta">session.reload.read_size</span> = <span class="string">100</span></span><br><span class="line"><span class="comment">    # async, sync</span></span><br><span class="line">    <span class="meta">flush-disk-mode</span> = <span class="string">async</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">  ## database store</span></span><br><span class="line">  <span class="attr">db</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    ## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</span></span><br><span class="line">    <span class="attr">datasource</span> = <span class="string">&quot;dbcp&quot;</span></span><br><span class="line"><span class="comment">    ## mysql/oracle/h2/oceanbase etc.</span></span><br><span class="line">    <span class="meta">db-type</span> = <span class="string">&quot;mysql&quot;</span></span><br><span class="line">    <span class="meta">driver-class-name</span> = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">    <span class="attr">url</span> = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/seata&quot;</span></span><br><span class="line">    <span class="attr">user</span> = <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">password</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="meta">min-conn</span> = <span class="string">1</span></span><br><span class="line">    <span class="meta">max-conn</span> = <span class="string">3</span></span><br><span class="line">    <span class="meta">global.table</span> = <span class="string">&quot;global_table&quot;</span></span><br><span class="line">    <span class="meta">branch.table</span> = <span class="string">&quot;branch_table&quot;</span></span><br><span class="line">    <span class="meta">lock-table</span> = <span class="string">&quot;lock_table&quot;</span></span><br><span class="line">    <span class="meta">query-limit</span> = <span class="string">100</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">lock</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  ## the lock store mode: local、remote</span></span><br><span class="line">  <span class="attr">mode</span> = <span class="string">&quot;remote&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">local</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    ## store locks in user&#x27;s database</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">remote</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    ## store locks in the seata&#x27;s server</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"><span class="attr">recovery</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  #schedule committing retry period in milliseconds</span></span><br><span class="line">  <span class="meta">committing-retry-period</span> = <span class="string">1000</span></span><br><span class="line"><span class="comment">  #schedule asyn committing retry period in milliseconds</span></span><br><span class="line">  <span class="meta">asyn-committing-retry-period</span> = <span class="string">1000</span></span><br><span class="line"><span class="comment">  #schedule rollbacking retry period in milliseconds</span></span><br><span class="line">  <span class="meta">rollbacking-retry-period</span> = <span class="string">1000</span></span><br><span class="line"><span class="comment">  #schedule timeout retry period in milliseconds</span></span><br><span class="line">  <span class="meta">timeout-retry-period</span> = <span class="string">1000</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">transaction</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="meta">undo.data.validation</span> = <span class="string">true</span></span><br><span class="line">  <span class="meta">undo.log.serialization</span> = <span class="string">&quot;jackson&quot;</span></span><br><span class="line">  <span class="meta">undo.log.save.days</span> = <span class="string">7</span></span><br><span class="line"><span class="comment">  #schedule delete expired undo_log in milliseconds</span></span><br><span class="line">  <span class="meta">undo.log.delete.period</span> = <span class="string">86400000</span></span><br><span class="line">  <span class="meta">undo.log.table</span> = <span class="string">&quot;undo_log&quot;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## metrics settings</span></span><br><span class="line"><span class="attr">metrics</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">enabled</span> = <span class="string">false</span></span><br><span class="line">  <span class="meta">registry-type</span> = <span class="string">&quot;compact&quot;</span></span><br><span class="line"><span class="comment">  # multi exporters use comma divided</span></span><br><span class="line">  <span class="meta">exporter-list</span> = <span class="string">&quot;prometheus&quot;</span></span><br><span class="line">  <span class="meta">exporter-prometheus-port</span> = <span class="string">9898</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">support</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  ## spring</span></span><br><span class="line">  <span class="attr">spring</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">    # auto proxy the DataSource bean</span></span><br><span class="line">    <span class="meta">datasource.autoproxy</span> = <span class="string">false</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建registry.conf文件<code>（在resources目录下）</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">registry</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost:8848&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">eureka</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serviceUrl</span> = <span class="string">&quot;http://localhost:8761/eureka&quot;</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">weight</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">redis</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost:6379&quot;</span></span><br><span class="line">    <span class="attr">db</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">zk</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    <span class="meta">session.timeout</span> = <span class="string">6000</span></span><br><span class="line">    <span class="meta">connect.timeout</span> = <span class="string">2000</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">consul</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8500&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">etcd3</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;http://localhost:2379&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">sofa</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:9603&quot;</span></span><br><span class="line">    <span class="attr">application</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">region</span> = <span class="string">&quot;DEFAULT_ZONE&quot;</span></span><br><span class="line">    <span class="attr">datacenter</span> = <span class="string">&quot;DefaultDataCenter&quot;</span></span><br><span class="line">    <span class="attr">cluster</span> = <span class="string">&quot;default&quot;</span></span><br><span class="line">    <span class="attr">group</span> = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    <span class="attr">addressWaitTime</span> = <span class="string">&quot;3000&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">config</span> <span class="string">&#123;</span></span><br><span class="line"><span class="comment">  # file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class="line">  <span class="attr">type</span> = <span class="string">&quot;file&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nacos</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    <span class="attr">namespace</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">consul</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:8500&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">apollo</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="meta">app.id</span> = <span class="string">&quot;seata-server&quot;</span></span><br><span class="line">    <span class="meta">apollo.meta</span> = <span class="string">&quot;http://192.168.1.204:8801&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">zk</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1:2181&quot;</span></span><br><span class="line">    <span class="meta">session.timeout</span> = <span class="string">6000</span></span><br><span class="line">    <span class="meta">connect.timeout</span> = <span class="string">2000</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">etcd3</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">serverAddr</span> = <span class="string">&quot;http://localhost:2379&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line">  <span class="attr">file</span> <span class="string">&#123;</span></span><br><span class="line">    <span class="attr">name</span> = <span class="string">&quot;file.conf&quot;</span></span><br><span class="line">  <span class="attr">&#125;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建实体类（domain包下）</p>
<ul>
<li><p><code>CommonResult</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Order</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal money;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status; <span class="comment">// 订单状态 0：创建中 1：已完结</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Dao接口</p>
<ul>
<li><p><code>OrderDao</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1 新建订单</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2 修改订单状态,从0改为1</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId, <span class="meta">@Param(&quot;status&quot;)</span> Integer status)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>创建mapper文件<code>（OrderMapper.xml）</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qzh.springcloud.dao.OrderDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.qzh.springcloud.domain.Order&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;product_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;productId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;count&quot;</span> <span class="attr">property</span>=<span class="string">&quot;count&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.qzh.springcloud.domain.Order&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into t_order(id,user_id,product_id,count,money,status)</span><br><span class="line">            values (null ,#&#123;userId&#125;, #&#123;productId&#125;, #&#123;count&#125;, #&#123;money&#125;, 0);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update t_order set status = 1</span><br><span class="line">        where user_id=#&#123;userId&#125; and status = #&#123;status&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Service接口</p>
<ul>
<li><p><code>OrderService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>StorageService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;seata-storage-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减库存</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/storage/decrease&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;productId&quot;)</span> Long productId, <span class="meta">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>AccountService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;seata-account-service&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/account/decrease&quot;)</span></span><br><span class="line">    <span class="function">CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>impl实现类</p>
<ul>
<li><p><code>OderServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderDao orderDao;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(Order order)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 新建订单</span></span><br><span class="line">        log.info(<span class="string">&quot;-------&gt; 开始新建订单&quot;</span>);</span><br><span class="line">        orderDao.create(order);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 扣减库存</span></span><br><span class="line">        log.info(<span class="string">&quot;-------&gt; 订单微服务开始调用库存，做扣减count&quot;</span>);</span><br><span class="line">        storageService.decrease(order.getProductId(), order.getCount());</span><br><span class="line">        log.info(<span class="string">&quot;-------&gt; 订单微服务开始调用库存，做扣减完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 扣减账号余额</span></span><br><span class="line">        log.info(<span class="string">&quot;-------&gt; 订单微服务开始调用账号，做扣减money&quot;</span>);</span><br><span class="line">        accountService.decrease(order.getUserId(), order.getMoney());</span><br><span class="line">        log.info(<span class="string">&quot;-------&gt; 订单微服务开始调用账号，做扣减完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 修改订单状态，1代表已完成</span></span><br><span class="line">        log.info(<span class="string">&quot;-------&gt; 修改订单状态&quot;</span>);</span><br><span class="line">        orderDao.update(order.getUserId(), <span class="number">0</span>);</span><br><span class="line">        log.info(<span class="string">&quot;-------&gt; 修改订单状态完成&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;-------&gt; 新建订单完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>controller包</p>
<ul>
<li><p><code>OrderController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/order/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(Order order)</span></span>&#123;</span><br><span class="line">        orderService.create(order);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;订单创建成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>config</p>
<ul>
<li><p><code>MybatisConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.angenin.springcloud.dao&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>DataSourceProxyConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Seata对数据源进行代理,这样才能使用Seata来处理分布式事务</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceProxyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.mapperLocations&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String mapperLocations;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druidDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceProxy <span class="title">dataSourceProxy</span><span class="params">(DataSource druidDataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceProxy(druidDataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactoryBean</span><span class="params">(DataSourceProxy dataSourceProxy)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(dataSourceProxy);</span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        bean.setMapperLocations(resolver.getResources(mapperLocations));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>主启动类</p>
<pre><code>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span> <span class="comment">//取消数据源的自动配置</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataOrderMain2001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SeataOrderMain2001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre>
</li>
</ol>
<p><strong>注意：在接下来的模块中类似的配置就不再赘述了。</strong></p>
<h4 id="库存模块"><a href="#库存模块" class="headerlink" title="库存模块"></a>库存模块</h4><ol>
<li><p>新建模块seata-storage -service-2002</p>
</li>
<li><p>POM  (跟上面内容一致)</p>
</li>
<li><p>YML  （修改端口号）</p>
</li>
<li><p>file.conf (跟上面内容一致)</p>
</li>
<li><p>registry.conf (跟上面内容一致)</p>
</li>
<li><p>domain</p>
<ul>
<li><p><code>CommonResult</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Storage</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Storage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long productId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer total;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer residue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Dao接口</p>
<ul>
<li><p><code>StorageDao </code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="meta">@Param(&quot;productId&quot;)</span> Long productId, <span class="meta">@Param(&quot;count&quot;)</span> Integer count)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Mapper</p>
<ul>
<li><p><code>StorageMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qzh.springcloud.dao.StorageDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.qzh.springcloud.domain.Storage&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;product_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;productId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;used&quot;</span> <span class="attr">property</span>=<span class="string">&quot;used&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">property</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;INTEGER&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;decrease&quot;</span>&gt;</span></span><br><span class="line">        update t_storage</span><br><span class="line">        set used = used + #&#123;count&#125;, residue = residue - #&#123;count&#125;</span><br><span class="line">        where product_id= #&#123;productId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Service接口</p>
<ul>
<li><p><code>StorageService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>impl实现类</p>
<ul>
<li><p><code>StorageServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageServiceImpl</span> <span class="keyword">implements</span> <span class="title">StorageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(StorageServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageDao storageDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long productId, Integer count)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;----&gt; StorageService中扣减库存&quot;</span>);</span><br><span class="line">        storageDao.decrease(productId, count);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;----&gt; StorageService中扣减库存完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Controller</p>
<ul>
<li><p><code>StorageController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StorageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> StorageService storageService;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping(&quot;/storage/decrease&quot;)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;productId&quot;)</span> Long productId, <span class="meta">@RequestParam(&quot;count&quot;)</span> Integer count)</span></span>&#123;</span><br><span class="line">        storageService.decrease(productId, count);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;扣减库存成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Config  (跟上面内容一致)</p>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataStorageMain2002</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SeataStorageMain2002.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="账户模块"><a href="#账户模块" class="headerlink" title="账户模块"></a>账户模块</h4><ol>
<li><p>新建模块seata-account-service-2003</p>
</li>
<li><p>POM  (跟上面内容一致)</p>
</li>
<li><p>YML  （修改端口号）</p>
</li>
<li><p>file.conf (跟上面内容一致)</p>
</li>
<li><p>registry.conf (跟上面内容一致)</p>
</li>
<li><p>domain</p>
<ul>
<li><p><code>CommonResult</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Account</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal total;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal  residue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Dao接口</p>
<ul>
<li><p><code>AccountDao </code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId, <span class="meta">@Param(&quot;money&quot;)</span> BigDecimal money)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Mapper</p>
<ul>
<li><p><code>AccountMapper.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qzh.springcloud.dao.AccountDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.qzh.springcloud.domain.Account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;user_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;userId&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;BIGINT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;total&quot;</span> <span class="attr">property</span>=<span class="string">&quot;total&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;used&quot;</span> <span class="attr">property</span>=<span class="string">&quot;used&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">property</span>=<span class="string">&quot;residue&quot;</span> <span class="attr">jdbcType</span>=<span class="string">&quot;DECIMAL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;decrease&quot;</span>&gt;</span></span><br><span class="line">        update t_account</span><br><span class="line">        set used = used + #&#123;money&#125;, residue = residue - #&#123;money&#125;</span><br><span class="line">        where user_id = #&#123;userId&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Service接口</p>
<ul>
<li><p><code>AccountService</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long userId, BigDecimal money)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>impl实现类</p>
<ul>
<li><p><code>AccountServiceImpl</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;---&gt; AccountService中扣减账户余额&quot;</span>);</span><br><span class="line">        accountDao.decrease(userId, money);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;---&gt; AccountService中扣减账户余额完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Controller</p>
<ul>
<li><p><code>AccountController</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/account/decrease&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">decrease</span><span class="params">(<span class="meta">@RequestParam(&quot;userId&quot;)</span> Long userId, <span class="meta">@RequestParam(&quot;money&quot;)</span> BigDecimal money)</span></span>&#123;</span><br><span class="line">        accountService.decrease(userId, money);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;扣减库存成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Config  (跟上面内容一致)</p>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = DataSourceAutoConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeataAccountMain2003</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SeataAccountMain2003.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>启动2001，2002，2003</p>
<h4 id="查看数据库的初始情况"><a href="#查看数据库的初始情况" class="headerlink" title="查看数据库的初始情况"></a>查看数据库的初始情况</h4><ul>
<li><p>订单数据库<code>seata_order</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/6.png" style="zoom:140%;" />
</li>
<li><p>库存数据库<code>seata_storage</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/7.png" alt="image-20210304073601235" style="zoom:140%;" />
</li>
<li><p>账户数据库<code>seata_account</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/8.png" style="zoom:140%;" />

</li>
</ul>
<h4 id="正常下单"><a href="#正常下单" class="headerlink" title="正常下单"></a>正常下单</h4><ol>
<li><p>在浏览器输入：<code>http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=10</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/9.png"></p>
</li>
<li><p>查看IDEA后台</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/10.png"></p>
</li>
<li><p>查看数据库</p>
<ul>
<li><p>订单数据库<code>seata_order</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/11.png"></p>
</li>
<li><p>库存数据库<code>seata_storage</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/12.png"></p>
</li>
<li><p>账户数据库<code>seata_account</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/13.png"></p>
</li>
</ul>
</li>
</ol>
<h4 id="模拟超时异常"><a href="#模拟超时异常" class="headerlink" title="模拟超时异常"></a>模拟超时异常</h4><ol>
<li><p>停止2003。</p>
</li>
<li><p>在2003的AccountServiceImpl里的decrease方法中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decrease</span><span class="params">(Long userId, BigDecimal money)</span> </span>&#123;</span><br><span class="line">       LOGGER.info(<span class="string">&quot;---&gt; AccountService中扣减账户余额&quot;</span>);</span><br><span class="line">            <span class="comment">//模拟超时异常，暂停20秒</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           TimeUnit.SECONDS.sleep(<span class="number">20</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       accountDao.decrease(userId, money);</span><br><span class="line">       LOGGER.info(<span class="string">&quot;---&gt; AccountService中扣减账户余额完成&quot;</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新启动2003。</p>
</li>
<li><p>刷新页面<code>http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=10</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/14.png"></p>
</li>
<li><p>查看数据库</p>
<ul>
<li><p>订单数据库<code>seata_order</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/15.png"></p>
</li>
<li><p>库存数据库<code>seata_storage</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/17.png" alt="image-20210304074900753"></p>
</li>
<li><p>账户数据库<code>seata_account</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/16.png" alt="image-20210304074906674"></p>
</li>
</ul>
</li>
</ol>
<p>​    <code>超时异常后，order添加了订单，而且storage的库存和account的余额都发生了变化，但是订单状态没有改变</code>。因为feign调用时间默认是1秒，超过1秒就不等待，直接返回超时异常，但是account在20秒后还是会去扣余额，而且没有回滚，所以order添加了订单，storage的库存也发生了变化。而且feign有超时重试机制，<strong>所以可能会多次扣款。</strong></p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><ol>
<li><p>停止2001。</p>
</li>
<li><p>在2001的OderServiceImpl里的create方法上加上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">//name随便命名，只要不重复即可</span></span><br><span class="line"><span class="comment">//rollbackFor = Exception.class表示出现所有异常都回滚</span></span><br><span class="line">  <span class="comment">//rollbackFor表示哪些需要回滚</span></span><br><span class="line">  <span class="comment">//noRollbackFor表示哪些不需要回滚</span></span><br><span class="line">  <span class="meta">@GlobalTransactional(name = &quot;fsp-create-order&quot;, rollbackFor = Exception.class)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启2001。</p>
</li>
<li><p>刷新页面<code>http://localhost:2001/order/create?userId=1&amp;productId=1&amp;count=10&amp;money=10</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/14.png"></p>
</li>
<li><p>查看数据库</p>
<ul>
<li><p>订单数据库<code>seata_order</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/15.png"></p>
</li>
<li><p>库存数据库<code>seata_storage</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/17.png" alt="image-20210304074900753"></p>
</li>
<li><p>账户数据库<code>seata_account</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/16.png" alt="image-20210304074906674"></p>
</li>
</ul>
</li>
</ol>
<p><strong>订单没有添加，storage和account也没变化，事务回滚成功。</strong></p>
<h2 id="Seata原理"><a href="#Seata原理" class="headerlink" title="Seata原理"></a>Seata原理</h2><h4 id="TC-TM-RM三组件"><a href="#TC-TM-RM三组件" class="headerlink" title="TC/TM/RM三组件"></a>TC/TM/RM三组件</h4><img src="https://img.alicdn.com/tfs/TB1rDpkJAvoK1RjSZPfXXXPKFXa-794-478.png" alt="img" style="zoom:85%;" />

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/18.png" alt="image-20210304080053870"></p>
<h4 id="分布式事务的执行流程"><a href="#分布式事务的执行流程" class="headerlink" title="分布式事务的执行流程"></a>分布式事务的执行流程</h4><ol>
<li>TM开启分布式事务(TM向TC注册全局事务记录) ;</li>
<li>按业务场景，编排数据库、服务等事务内资源(RM向TC汇报资源准备状态) ;</li>
<li>TM结束分布式事务,事务一阶段结束(TM通知TC提交/回滚分布式事务) ;</li>
<li>TC汇总事务信息，决定分布式事务是提交还是回滚;</li>
<li>TC通知所有RM提交/回滚资源,事务二阶段结束。</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/19.png"></p>
<h4 id="AT模式如何做到对业务的无侵入"><a href="#AT模式如何做到对业务的无侵入" class="headerlink" title="AT模式如何做到对业务的无侵入"></a>AT模式如何做到对业务的无侵入</h4><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/20.png"></p>
<p><strong>一阶段加载</strong></p>
<p><code>在一阶段, Seata会拦截“业务SQL&quot; </code></p>
<ol>
<li>解析SQL语义，找到“业务SQL” 要更新的业务数据,在业务数据被更新前，将其保存成”before image”,</li>
<li>执行“业务SQL” 更新业务数据,在业务数据更新之后,</li>
<li>其保存成”after image” ，最后生成行锁。</li>
</ol>
<p><code> 以上操作全部在一个数据库事务内完成这样保证了一阶段操作的原子性。</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/21.png" style="zoom:80%;" />

<p><strong>二阶段提交</strong></p>
<p><code>二阶段如是顺利提交的话,</code></p>
<p>因为“业务SQL”在-阶段已经提交至数据库,所以Seata框架只需将<code>一阶段保存的快照数据和行锁删掉, 完成数据清理即可.</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/22.png" alt="image-20210304081038082" style="zoom:80%;" />

<p><strong>二阶段回滚</strong></p>
<p>​    二阶段如果是回滚的话, ISeata就需要回滚一阶段已经执行的“业务SQL” ，还原业务数据。</p>
<p>​    回滚方式便是用”before image” 还原业务数据;但在还原前要首先要校验脏写,对比“数据库当前业务据”和”after image” ,如果两份数据完全一致就说明没有脏写,可以还原业务数据，如果不一 致就说明有脏写,出现脏写就需要转人工处理。</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/23.png" style="zoom:80%;" />

<p><strong>过程图</strong></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud12/24.png" style="zoom:80%;" />]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记11-熔断与限流Sentinel</title>
    <url>/HuaStarOS.github.io/2021/02/22/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B011-%E7%86%94%E6%96%AD%E4%B8%8E%E9%99%90%E6%B5%81Sentinel/</url>
    <content><![CDATA[<h1 id="SpringCloud-Alibaba-Sentinel熔断与限流"><a href="#SpringCloud-Alibaba-Sentinel熔断与限流" class="headerlink" title="SpringCloud Alibaba Sentinel熔断与限流"></a>SpringCloud Alibaba Sentinel熔断与限流</h1><h2 id="Sentinel-是什么？"><a href="#Sentinel-是什么？" class="headerlink" title="Sentinel 是什么？"></a>Sentinel 是什么？</h2><p>​    随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p>Sentinel 具有以下特征:</p>
<ul>
<li><strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li>
<li><strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li>
<li><strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li>
<li><strong>完善的 SPI 扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/1.png"></p>
<p>Sentinel 分为两个部分:</p>
<ul>
<li>核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时对 Dubbo / Spring Cloud 等框架也有较好的支持。</li>
<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>
</ul>
<p>官网：<a href="https://github.com/alibaba/sentinel">https://github.com/alibaba/sentinel</a><br>中文版：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p>
<p><strong>Sentinel与Hystrix对比</strong></p>
<table>
<thead>
<tr>
<th align="left">Hystrix</th>
<th align="left">Sentinel</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1需要我们程序员自己手工搭建监控平台<br>2没有一套web界面可以给我们进行更加细粒度化得配置流控、<br>速率控制、服务熔断、服务降级。。。</td>
<td align="left">1单独一个组件，可以独立出来。<br/>2直接界面化的细粒度统一-配置。</td>
</tr>
</tbody></table>
<h2 id="如何使用Sentinel"><a href="#如何使用Sentinel" class="headerlink" title="如何使用Sentinel"></a>如何使用Sentinel</h2><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p>
<p>下载成功之后，是一个jar包，直接输入<code>java -jar sentinel-dashboard-1.7.0.jar</code>直接运行即可</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/2.png"></p>
<p>在浏览器输入：<code>http://localhost:8080/#/login</code>    </p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/3.png" alt="image-20210222154021130"></p>
<p>账号和密码都是<code>sentinel</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/4.png" alt="image-20210222154120492"></p>
<p>控制台使用说明：<a href="https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0">https://github.com/alibaba/Sentinel/wiki/%E6%8E%A7%E5%88%B6%E5%8F%B0</a></p>
<h2 id="案例演示"><a href="#案例演示" class="headerlink" title="案例演示"></a>案例演示</h2><ol>
<li><p>新建模块cloudalibaba-sentinel-service-8401</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--引入 spring-cloud-alibaba-nacos  --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!-- 引入 spring-cloud-alibaba-sentinel --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--引入 SpringCloud alibaba sentinel-datasource-nacos 后续做持久化用到--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--引入自己的API通用包--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8401</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-sentinel-service</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment"># Nacos服务注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment"># 配置Sentinel dashboard地址 即 将8401 注册进sentinel ，sentinel会监控 8401</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment"># 默认是8719端口，如果被占用就会自动从8719开始依次扫描，直到找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApp8401</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApp8401.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----testA&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testB&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;----testB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，启动8401，然后刷新sentinel后台页面（<strong>因为sentinel采用懒加载策略，所以需要调用服务后才在后台显示</strong>）在浏览器分别输入，<code>http://localhost:8401/testA</code>、<code>http://localhost:8401/testB</code>然后刷新sentinel后台页面：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/5.png" alt="image-20210222164649097"></p>
</li>
</ol>
<h2 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h2><ul>
<li>资源名:唯一名称，默认请求路径</li>
<li>针对来源: Sentinel可以针对调用者进行限流，填写微服务名，默认default (不区分来源)</li>
<li>阈值类型/单机阈值: .<ul>
<li>QPS (每秒钟的请求数量) :当调用该api的QPS达到阈值的时候， 进行限流</li>
<li>线程数:当调用该api的线程数达到阈值的时候，进行限流</li>
</ul>
</li>
<li>是否集群:不需要集群，暂不研究</li>
<li>流控模式:<ul>
<li>直接: api达到限流条件时，直接限流</li>
<li>关联:当关联的资源达到阈值时，就限流自己</li>
<li>链路:只记录指定链路上的流量(指定资源从入口资源进来的流量,如果达到阈值，就进行限流) [api级<br>别的针对来源]</li>
</ul>
</li>
<li>流控效果:<ul>
<li>快速失败:直接失败，抛异常</li>
<li>Warm Up:根据codeFactor (冷加载因子，默认3) 的值，从阈值/codeFactor, 经过预热时长，才达到设置<br>的QPS阈值</li>
<li>排队等待:匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS, 否则无效</li>
</ul>
</li>
</ul>
<p>可在流控规则处新建流控规则：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/6.png"></p>
<p>也可簇点链路处指定添加：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/7.png"></p>
<p>添加流控规则：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/8.png" alt="image-20210223163318853"></p>
<p>当每秒请求数超过1个就会限流。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/9.png"></p>
<h3 id="阈值类型"><a href="#阈值类型" class="headerlink" title="阈值类型"></a>阈值类型</h3><h4 id="QPS与线程数的区别"><a href="#QPS与线程数的区别" class="headerlink" title="QPS与线程数的区别"></a>QPS与线程数的区别</h4><ul>
<li>阈值类型/单机阈值: .<ul>
<li>QPS (每秒钟的请求数量) : 当调用该api的QPS达到阈值的时候， 进行限流</li>
<li>线程数: 当调用该api的线程数达到阈值的时候，进行限流</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/10.png"></p>
<p>​    <code>QPS是直接挡在外面，而线程数是有多少个线程在处理，放进来后，线程是空闲状态就对请求进行处理，如果当前没有线程是空闲，就限流。</code></p>
<h3 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h3><ul>
<li>流控模式:<ul>
<li>直接: api达到限流条件时，直接限流</li>
<li>关联:当关联的资源达到阈值时，就限流自己</li>
<li>链路:只记录指定链路上的流量(指定资源从入口资源进来的流量,如果达到阈值，就进行限流) [api级<br>别的针对来源]</li>
</ul>
</li>
</ul>
<h4 id="直接（默认）"><a href="#直接（默认）" class="headerlink" title="直接（默认）"></a>直接（默认）</h4><p>​    直接-&gt;快速失败（系统默认），提供上面的例子就是直接-&gt;快速失败，当快速点击访问<a href="http://localhost:8401/testA%E6%97%B6%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BC%9A%E7%9B%B4%E6%8E%A5%E6%98%BE%E7%A4%BA%60Blocked">http://localhost:8401/testA时，浏览器会直接显示`Blocked</a> by Sentinel (flow limiting)`。</p>
<p>​    接下来我们思考一个问题：直接调用默认报错信息，技术方面OK but，是否应该有我们自己的后续处理？类似有一个fallback的兜底方法？</p>
<h4 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h4><p>​    当关联的资源达到阈值时，就限流自己。<strong>当与A关联的资源B达到阀值后，就限流A自己</strong>。B惹事，A挂了</p>
<p><code>一句话概括：A去调用B，B如果资源不足了，就限流A。</code></p>
<p>​    关联这一流控模式，在实际项目开发中会经常使用。比如订单服务与支付服务关联，当对支付服务的调用达到阈值，就限流订单服务，防止支付服务挂了，造成更大的损失。</p>
<p><strong>进行案例演示：</strong></p>
<ol>
<li><p>当关联资源/testB的QPS阀值超过1时，就限流/testA的Rest访问地址， <code>当关联资源到达阈值后限制配置好的资源名。</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/11.png" alt="image-20210223170037600"></p>
</li>
<li><p>此时不管调用多少次testA都不会限流，而此时超过1秒调用1次testB，则会限流A。使用Postman进行多次访问testB。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/12.png" alt="image-20210223170550299"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/13.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/14.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/15.png"></p>
</li>
<li><p>测试，访问/testA</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/9.png"></p>
</li>
</ol>
<h4 id="链路"><a href="#链路" class="headerlink" title="链路"></a>链路</h4><p><code>NodeSelectorSlot</code> 中记录了资源之间的调用链路，这些资源通过调用关系，相互之间构成一棵调用树。这棵树的根节点是一个名字为 <code>machine-root</code> 的虚拟节点，调用链的入口都是这个虚节点的子节点。</p>
<p>一棵典型的调用树如下图所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">          machine-root</span><br><span class="line">              &#x2F;       \</span><br><span class="line">             &#x2F;         \</span><br><span class="line">       Entrance1     Entrance2</span><br><span class="line">          &#x2F;             \</span><br><span class="line">         &#x2F;               \</span><br><span class="line">DefaultNode(nodeA)   DefaultNode(nodeA)</span><br></pre></td></tr></table></figure>

<p>上图中来自入口 <code>Entrance1</code> 和 <code>Entrance2</code> 的请求都调用到了资源 <code>NodeA</code>，Sentinel 允许只根据某个入口的统计信息对资源限流。比如我们可以设置 <code>strategy</code> 为 <code>RuleConstant.STRATEGY_CHAIN</code>，同时设置 <code>refResource</code> 为 <code>Entrance1</code> 来表示只有从入口 <code>Entrance1</code> 的调用才会记录到 <code>NodeA</code> 的限流统计当中，而不关心经 <code>Entrance2</code> 到来的调用。</p>
<p>调用链的入口（上下文）是通过 API 方法 <code>ContextUtil.enter(contextName)</code> 定义的，其中 contextName 即对应调用链路入口名称。详情可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8#%E4%B8%8A%E4%B8%8B%E6%96%87%E5%B7%A5%E5%85%B7%E7%B1%BB-contextutil">ContextUtil 文档</a>。</p>
<h3 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h3><ul>
<li>流控效果:<ul>
<li>快速失败:直接失败，抛异常</li>
<li>Warm Up:根据codeFactor (冷加载因子，默认3) 的值，从阈值/codeFactor, 经过预热时长，才达到设置<br>的QPS阈值</li>
<li>排队等待:匀速排队，让请求以匀速的速度通过，阈值类型必须设置为QPS, 否则无效</li>
</ul>
</li>
</ul>
<p><code>流控效果只有QPS有，线程数没有。</code>    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/16.png"></p>
<h4 id="直接拒绝"><a href="#直接拒绝" class="headerlink" title="直接拒绝"></a>直接拒绝</h4><p>​    直接拒绝（<code>RuleConstant.CONTROL_BEHAVIOR_DEFAULT</code>）方式是默认的流量控制方式，<code>当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出</code> <code>FlowException</code>。这种方式适用于对系统处理能力确切已知的情况下，比如通过压测确定了系统的准确水位时。</p>
<h4 id="Warm-Up"><a href="#Warm-Up" class="headerlink" title="Warm Up"></a>Warm Up</h4><p>​    Warm Up（<code>RuleConstant.CONTROL_BEHAVIOR_WARM_UP</code>）方式，即预热/冷启动方式。当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/17.png"></p>
<p><code>默认coldFactor为3，即请求QPS从threshold / 3开始，经预热时长逐渐升至设定的QPS阈值。</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/18.png"></p>
<p><strong>案例:</strong></p>
<p>​    阀值为10+预热时长设置5秒。系统初始化的阀值为10/ 3约等于3.即阀值刚开始为3;然后过了5秒后阀值才慢慢升高恢复到10</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/19.png"></p>
<p>​    在浏览器中输入<code>http://localhost:8401/testA</code>，不停刷新，前5秒会限流，5秒后只要每秒不超过10个请求，就不会限流。</p>
<h4 id="排队等待"><a href="#排队等待" class="headerlink" title="排队等待"></a>排队等待</h4><p>​    匀速排队（<code>RuleConstant.CONTROL_BEHAVIOR_RATE_LIMITER</code>）方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p>
<p>该方式的作用如下图所示：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/20.png"></p>
<p>​    排队等待，让请求以均匀的速度通过,阀值类型必须设成QPS,否则无效。设置含义: /testB每秒1次请求，超过的话就排队等待，等待的超时时间为20000毫秒。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/21.png"></p>
<p>使用postman发起多次请求<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/22.png"></p>
<p>postman发起的每秒10个请求进行排队，testB每秒处理一个请求。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/23.png" alt="image-20210223181057297"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/24.png"></p>
<h2 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​    现代微服务架构都是分布式的，由非常多的服务组成。不同服务之间相互调用，组成复杂的调用链路。以上的问题在链路调用中会产生放大的效果。复杂链路上的某一环不稳定，就可能会层层级联，最终导致整个链路都不可用。因此我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。熔断降级作为保护自身的手段，通常在客户端（调用端）进行配置。</p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/26.png"></p>
<h3 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a>熔断策略</h3><p>Sentinel 提供以下几种熔断策略：</p>
<ul>
<li>慢调用比例 (<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li>
<li>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</li>
<li>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>
</ul>
<blockquote>
<p><strong>注意</strong>：Sentinel 1.8.0 及以上版本。对熔断降级特性进行了全新的改进升级，请使用最新版本以更好地利用熔断降级的能力。</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/25.png"></p>
<ul>
<li><p>RT (平均响应时间，秒级)</p>
<ul>
<li>平均响应时间超出阈值且在时间窗口内通过的请求&gt;=5, 两个条件同时满足后自动熔断。</li>
<li>经过熔断时长（<code>时间窗口</code>）后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</li>
</ul>
</li>
<li><p>异常比列(秒级)</p>
<ul>
<li>QPS &gt;= 5且异常比例(秒级统计)超过阈值时,自动熔断;</li>
<li>经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>
</ul>
</li>
<li><p>异常数(分钟级)</p>
<ul>
<li>异常数(分钟统计)超过阈值时，自动熔断</li>
<li>过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</li>
</ul>
<p>Sentinel 熔断降级会在调用链路中某个资源出现不稳定状态时(例如调用超时或异常比例升高)， 对这个资源的调用进行限制,让请求快速失败,避免影响到其它的资源而导致级联错误.当资源被降级后，在接下来的时间窗口之内，对该资源的调用都自动熔断(默认行为是抛出DegradeException) .</p>
</li>
</ul>
<h3 id="熔断策略实战"><a href="#熔断策略实战" class="headerlink" title="熔断策略实战"></a>熔断策略实战</h3><h4 id="慢调用比例-RT"><a href="#慢调用比例-RT" class="headerlink" title="慢调用比例 RT"></a>慢调用比例 RT</h4><p>慢调用比例 RT(<code>SLOW_REQUEST_RATIO</code>)：选择以慢调用比例作为阈值，需要设置允许的慢调用 RT（即最大的响应时间），请求的响应时间大于该值则统计为慢调用。当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p>
<ol>
<li><p>在FlowLimitController中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      log.info(<span class="string">&quot;testD 测试RT&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;----testD&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器输入<code>http://localhost:8401/testD</code>，然后在sentinel设置testD降级规则。    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/27.png"></p>
</li>
</ol>
<p>​    请求处理完成的时间为200毫秒（阈值），当请求数目大于设置的最小请求数目，并且慢调用的比例大于阈值，则接下来的熔断时长 (时间窗口) 内请求会自动被熔断。经过熔断时长1s后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求响应时间小于设置的慢调用 RT 则结束熔断，若大于设置的慢调用 RT 则会再次被熔断。</p>
<ol start="3">
<li><p>使用Jmeter进行压力测试。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/28.png"></p>
</li>
<li><p>在浏览器输入<code>http://localhost:8401/testD</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/29.png"></p>
</li>
</ol>
<h4 id="异常比例"><a href="#异常比例" class="headerlink" title="异常比例"></a>异常比例</h4><p>异常比例 (<code>ERROR_RATIO</code>)：当单位统计时长（<code>statIntervalMs</code>）内请求数目大于设置的最小请求数目，并且异常的比例大于阈值，则接下来的熔断时长内请求会自动被熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。异常比率的阈值范围是 <code>[0.0, 1.0]</code>，代表 0% - 100%。</p>
<ol>
<li><p>修改testD</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testD&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testD 异常比例&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span> / <span class="number">0</span>;   <span class="comment">//百分百出错</span></span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;----testD&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在Sentinel后台设置testD的降级规则。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/30.png"></p>
</li>
<li><p>用Jmeter进行测试</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/28.png"></p>
</li>
<li><p>在浏览器输入<code>http://localhost:8401/testD</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/29.png"></p>
</li>
</ol>
<h4 id="异常数"><a href="#异常数" class="headerlink" title="异常数"></a>异常数</h4><p>异常数 (<code>ERROR_COUNT</code>)：当单位统计时长内的异常数目超过阈值之后会自动进行熔断。经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。</p>
<ol>
<li><p>在FlowLimitController里添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testE&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;testE 测试异常数&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;----testE 测试异常数&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器输入<code>http://localhost:8401/testE</code>，然后在后台设置testE的降级规则。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/31.png"></p>
</li>
<li><p>刷新6次，<code>http://localhost:8401/testE</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/32.png"></p>
</li>
</ol>
<h2 id="热点参数限流"><a href="#热点参数限流" class="headerlink" title="热点参数限流"></a>热点参数限流</h2><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p>
<ul>
<li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li>
<li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li>
</ul>
<p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/33.png"></p>
<p>兜底方法：分为系统默认和客户自定义两种<br>    之前的case,限流出问题后，都是用sentinel系统默认的提示: <code>Blocked by Sentinel (flow limiting）</code><br>    我们能不能自定?类似hystrix,某个方法出问题了,就找对应的兜底降级方法?</p>
<p>​    <strong>使用Sentinel提供的<code>@SentinelResource</code>这一注解即可实现自定义兜底方法</strong></p>
<h3 id="实战演示"><a href="#实战演示" class="headerlink" title="实战演示"></a>实战演示</h3><ol>
<li><p>在FlowLimitController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;, blockHandler = &quot;deal_testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;, required = false)</span>String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;, required = false)</span>String p2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;----testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//兜底方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">deal_testHotKey</span><span class="params">(String p1, String p2, BlockException exception)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// sentinel的默认提示都是： Blocked by Sentinel (flow limiting)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;----deal_testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>浏览器输入<code>http://localhost:8401/testHotKey</code>，然后在后台对testHotKey进行热点规则配置。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/34.png"></p>
<blockquote>
<p>如果每秒的访问请求带有索引为0的参数的数量超过1，进入统计窗口期，然后调用兜底方法，1秒后退出统计窗口期，继续处理请求。</p>
</blockquote>
</li>
<li><p>测试，在浏览器中输入<code>http://localhost:8401/testHotKey?p1=a</code>、<code>http://localhost:8401/testHotKey?p1=a&amp;p2=b</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/35.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/36.png"></p>
</li>
</ol>
<p><strong>注意：</strong><code>如果设置热点规则，而@SentinelResource注解里没有指明blockHandler兜底方法，就会把直接把错误页面信息打印到前台。</code></p>
<p>修改testHotKey代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/testHotKey&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;testHotKey&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testHotKey</span><span class="params">(<span class="meta">@RequestParam(value = &quot;p1&quot;, required = false)</span> String p1,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="meta">@RequestParam(value = &quot;p2&quot;, required = false)</span> String p2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//int age = 10 / 0;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;--------  testHotKey&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启之后，配置好热点规则，进行测试。这时这会出现<code>error page</code>页面</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/37.png"></p>
<p>进行测试<code>http://localhost:8401/testHotKey?p1=a</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/38.png"></p>
<p>最后测试<code>http://localhost:8401/testHotKey?p2=b</code>,多次刷新</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/39.png"></p>
<p>可以发现请求中的参数位置，是通过处理器方法（testHotKey方法）来确定的</p>
<h3 id="参数例外项"><a href="#参数例外项" class="headerlink" title="参数例外项"></a>参数例外项</h3><p>上述案例演示了第一个参数p1,当QPS超过1秒1次点击后马上被限流。但是在某些特例情况下我们期望p1参数当它是某个特殊值时，它的限流值和平时不一样。比如当p1的值等于vip时，它的阈值可以达到200。</p>
<p>高级选项只有在热点规则里有，簇点链路无法配置高级选项。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/40.png"></p>
<p><code>http://localhost:8401/testHotKey?p1=a</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/41.png"></p>
<p><code>http://localhost:8401/testHotKey?p1=vip</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/42.png"></p>
<p>给testHotKey方法添加<code>int i = 1 / 0;</code>异常。然后重新测试，发现兜底方法不适用于异常，有异常会直接打印到页面。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/43.png"></p>
<p><strong>注意：</strong>@SentinelResource注解中<code>blockHandler属性处理</code>的是Sentinel控制台配置的违规情况，对其进行兜底处理；至于JAVA的RuntimeException，则需要<code>fallback属性处理</code></p>
<h2 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h2><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的 load、CPU 使用率、平均 RT、入口 QPS 和并发线程数等几个维度监控应用指标，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<p>系统保护规则是应用整体维度的，而不是资源维度的，并且<strong>仅对入口流量生效</strong>。入口流量指的是进入应用的流量（<code>EntryType.IN</code>），比如 Web 服务或 Dubbo 服务端接收的请求，都属于入口流量。</p>
<p>系统规则支持以下的模式：</p>
<ul>
<li><strong>Load 自适应</strong>（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1 超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li>
<li><strong>CPU usage</strong>（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li>
<li><strong>平均 RT</strong>：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>
<li><strong>并发线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>
<li><strong>入口 QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/44.png"></p>
<p><code>http://localhost:8401/testA</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/9.png"></p>
<p><code>http://localhost:8401/testD</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/29.png"></p>
<h2 id="SentinelResource注解使用"><a href="#SentinelResource注解使用" class="headerlink" title="@SentinelResource注解使用"></a>@SentinelResource注解使用</h2><p>@SentinelResource注释是用来对Sentinel资源的定义。</p>
<h3 id="按资源名称限流-后续处理"><a href="#按资源名称限流-后续处理" class="headerlink" title="按资源名称限流+后续处理"></a>按资源名称限流+后续处理</h3><ol>
<li><p>在pom添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入自己的API通用包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>新建RateLimitController：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/byResource&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;byResource&quot;,blockHandler = &quot;handleException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">byResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按照资源名称进行限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial001&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//兜底方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handleException</span><span class="params">(BlockException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> CommonResult(<span class="number">444</span>,exception.getClass().getCanonicalName() + <span class="string">&quot;\t 服务不可用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动8401，在浏览器中输入<code>http://localhost:8401/byResource</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/45.png"></p>
</li>
<li><p>配置流控规则</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/46.png"></p>
</li>
<li><p>多次刷新页面</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/47.png"></p>
</li>
</ol>
<h3 id="按照URL地址限流-后续处理"><a href="#按照URL地址限流-后续处理" class="headerlink" title="按照URL地址限流+后续处理"></a>按照URL地址限流+后续处理</h3><ol>
<li><p>在RateLimitController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/byUrl&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;byUrl&quot;)</span>	<span class="comment">//没有兜底方法，系统就用默认的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">byUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> CommonResult(<span class="number">200</span>,<span class="string">&quot;按照url进行限流测试OK&quot;</span>,<span class="keyword">new</span> Payment(<span class="number">2020L</span>,<span class="string">&quot;serial002&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动8401，在浏览器中输入<code>http://localhost:8401/rateLimit/byUrl</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/48.png"></p>
</li>
<li><p>添加流控规则</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/49.png"></p>
</li>
<li><p>多次刷新</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/50.png"></p>
</li>
</ol>
<h3 id="上面兜底方案面临的问题"><a href="#上面兜底方案面临的问题" class="headerlink" title="上面兜底方案面临的问题"></a>上面兜底方案面临的问题</h3><ol>
<li>系统默认的,没有体现我们自己的业务要求。</li>
<li>依照现有条件，我们自定义的处理方法又和业务代码耦合在-块,不直观。</li>
<li>每个业务方法都添加一个兜底的，那代码膨胀加剧。</li>
<li>全局统-的处理方法没有体现。</li>
</ol>
<h3 id="客户自定义限流处理逻辑"><a href="#客户自定义限流处理逻辑" class="headerlink" title="客户自定义限流处理逻辑"></a>客户自定义限流处理逻辑</h3><ol>
<li><p>新建handler.CustomerBlockHandler自定义限流处理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerBlockHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException</span><span class="params">(BlockException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;按客户自定义,全局异常处理 handlerException ----------- 1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title">handlerException2</span><span class="params">(BlockException exception)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;按客户自定义,全局异常处理 handlerException ------------ 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在RateLimitController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/rateLimit/customerBlockHandler&quot;)</span></span><br><span class="line"><span class="meta">@SentinelResource(value = &quot;customerBlockHandler&quot; ,</span></span><br><span class="line"><span class="meta">                  blockHandlerClass = CustomerBlockHandler.class,</span></span><br><span class="line"><span class="meta">                  blockHandler = &quot;handlerException2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">customerBlockHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;按客户自定义&quot;</span>, <span class="keyword">new</span> Payment(<span class="number">2020L</span>, <span class="string">&quot;serial003&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动8401，<code>http://localhost:8401/rateLimit/customerBlockHandler</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/51.png"></p>
</li>
<li><p>用资源名称进行配置流控规则</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/52.png"></p>
</li>
<li><p>多次刷新</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/53.png"></p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/54.png"></p>
<h3 id="更多注解属性说明"><a href="#更多注解属性说明" class="headerlink" title="更多注解属性说明"></a>更多注解属性说明</h3><p>关于<code>@SentinelResource</code>注解最主要的两个用法：限流控制和熔断降级的具体使用案例介绍完了。另外，该注解还有一些其他更精细化的配置，比如忽略某些异常的配置、默认降级函数等等，具体可见如下说明：</p>
<ul>
<li><code>value</code>：资源名称，必需项（不能为空）</li>
<li><code>entryType</code>：entry 类型，可选项（默认为 <code>EntryType.OUT</code>）</li>
<li><code>blockHandler</code> / <code>blockHandlerClass</code>: <code>blockHandler</code>对应处理 <code>BlockException</code> 的函数名称，可选项。blockHandler 函数访问范围需要是 <code>public</code>，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>blockHandlerClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>
<li><code>fallback</code>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了exceptionsToIgnore里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<ul>
<li>返回值类型必须与原函数返回值类型一致；</li>
<li>方法参数列表需要和原函数一致，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>
<li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>
</ul>
</li>
<li><code>defaultFallback</code>（since 1.6.0）：默认的 fallback 函数名称，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了exceptionsToIgnore里面排除掉的异常类型）进行处理。若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。defaultFallback 函数签名要求：<ul>
<li>返回值类型必须与原函数返回值类型一致；</li>
<li>方法参数列表需要为空，或者可以额外多一个 <code>Throwable</code> 类型的参数用于接收对应的异常。</li>
<li>defaultFallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 <code>Class</code> 对象，注意对应的函数必需为 static 函数，否则无法解析。</li>
</ul>
</li>
<li><code>exceptionsToIgnore</code>（since 1.6.0）：用于指定哪些异常被排除掉，不会计入异常统计中，也不会进入 fallback 逻辑中，而是会原样抛出。</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/55.png"></p>
<h2 id="服务熔断功能"><a href="#服务熔断功能" class="headerlink" title="服务熔断功能"></a>服务熔断功能</h2><h3 id="Sentinel整合Ribbon系列"><a href="#Sentinel整合Ribbon系列" class="headerlink" title="Sentinel整合Ribbon系列"></a>Sentinel整合Ribbon系列</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/56.png"></p>
<h4 id="新建服务提供者"><a href="#新建服务提供者" class="headerlink" title="新建服务提供者"></a>新建服务提供者</h4><ol>
<li><p>新建模块cloudalibaba-provider-payment-9003</p>
</li>
<li><p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringCloud ailibaba nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringCloud ailibaba sentinel--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!--引入自己的API通用包--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9003</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-payment-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#nacos</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain9003</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain9003.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span>    <span class="comment">//spring的注解</span></span><br><span class="line">    <span class="keyword">private</span>  String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;Long, Payment&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="number">1L</span>,<span class="keyword">new</span> Payment(<span class="number">1L</span>,<span class="string">&quot;1111&quot;</span>));</span><br><span class="line">        map.put(<span class="number">2L</span>,<span class="keyword">new</span> Payment(<span class="number">2L</span>,<span class="string">&quot;2222&quot;</span>));</span><br><span class="line">        map.put(<span class="number">3L</span>,<span class="keyword">new</span> Payment(<span class="number">3L</span>,<span class="string">&quot;3333&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/paymentSQL/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> </span>&#123;</span><br><span class="line">        Payment payment = map.get(id);</span><br><span class="line">        CommonResult&lt;Payment&gt; result = <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">200</span>,<span class="string">&quot;from mysql,serverPort: &quot;</span> + serverPort,payment);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>按照9003创建9004</p>
</li>
</ol>
<h4 id="新建服务消费者"><a href="#新建服务消费者" class="headerlink" title="新建服务消费者"></a>新建服务消费者</h4><ol>
<li><p>新建模块cloudalibaba-consumer-nacos-order-84</p>
</li>
<li><p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringCloud ailibaba nacos--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringCloud ailibaba sentinel--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!--引入自己的API通用包--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">84</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-order-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#nacos</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">      	<span class="comment"># 配置Sentinel dashboard地址 即 将84注册进sentinel ，sentinel会监控 84</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">1ocalhost:8080</span>    <span class="comment">#sentinel</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#消费者将去访问的微服务名称</span></span><br><span class="line"><span class="attr">server-url:</span></span><br><span class="line">  <span class="attr">nacos-user-service:</span> <span class="string">http://nacos-payment-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#激活Sentinel对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain84</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain84.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleBreakerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">final</span>  String SERVICE_URL = <span class="string">&quot;http://nacos-payment-provider&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/fallback/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@SentinelResource(value = &quot;fallback&quot;)</span>   <span class="comment">//没有配置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">fallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        CommonResult&lt;Payment&gt; result = restTemplate.getForObject(</span><br><span class="line">                SERVICE_URL + <span class="string">&quot;/paymentSQL/&quot;</span> + id,CommonResult.class,id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(id == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;IllegalArgument,非法参数异常...&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(result.getData() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;NullPointerException,该ID没有对应记录，空指针异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动9003，9004，84<code>http://localhost:84/consumer/fallback/1</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/57.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/58.png"></p>
<p><code>http://localhost:84/consumer/fallback/4</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/59.png"></p>
<p><code>http://localhost:84/consumer/fallback/5</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/60.png"></p>
</li>
</ol>
<h4 id="只配置fallback"><a href="#只配置fallback" class="headerlink" title="只配置fallback"></a>只配置fallback</h4><p>修改84的CircleBreakerController类的fallback方法中的@SentinelResource注解，并在类中添加handlerFallback方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;,fallback =&quot;handlerFallback&quot;)</span>   <span class="comment">//只配置fallback（只负责业务异常）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//fallback兜底</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> CommonResult <span class="title">handlerFallback</span><span class="params">(<span class="meta">@PathVariable</span> Long id,Throwable e)</span> </span>&#123;</span><br><span class="line">       Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;异常handlerFallback，exception内容： &quot;</span> + e.getMessage(), payment);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>重新运行<code>http://localhost:84/consumer/fallback/4</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/61.png"></p>
<p><code>http://localhost:84/consumer/fallback/5</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/62.png"></p>
<h4 id="只配置blockHandler"><a href="#只配置blockHandler" class="headerlink" title="只配置blockHandler"></a>只配置blockHandler</h4><p>修改@SentinelResource注解，并在类中添加<code>blockHandler</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;, blockHandler = &quot;blockHandler&quot;)</span>	<span class="comment">//只配置blockHandler（只负责sentinel控制台配置违规）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//blockHandler兜底</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult <span class="title">blockHandler</span><span class="params">(<span class="meta">@PathVariable</span> Long id,BlockException e)</span> </span>&#123;</span><br><span class="line">    Payment payment = <span class="keyword">new</span> Payment(id,<span class="string">&quot;null&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>,<span class="string">&quot;blockHandler-sentinel 限流，BlockException： &quot;</span> + e.getMessage(), payment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启项目,访问<code>http://localhost:84/consumer/fallback/1</code>，然后在sentinel后台进行配置。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/63.png"></p>
<p><code>http://localhost:84/consumer/fallback/5</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/60.png"></p>
<p>多次刷新</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/64.png"></p>
<blockquote>
<p>因为没配置指定fallback兜底方法，所以会直接显示错误页面，配置了blockHandler兜底方法，所以当sentinel配置违规会执行blockHandler兜底方法。</p>
</blockquote>
<h4 id="配置fallback和blockHandler"><a href="#配置fallback和blockHandler" class="headerlink" title="配置fallback和blockHandler"></a>配置fallback和blockHandler</h4><p>修改@SentinelResource注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;, fallback =&quot;handlerFallback&quot;, blockHandler = &quot;blockHandler&quot;)</span></span><br></pre></td></tr></table></figure>

<p>重启项目，输入<code>http://localhost:84/consumer/fallback/1</code>，然后到Sentinel后台配置。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/65.png"></p>
<p><code>http://localhost:84/consumer/fallback/1</code>多次刷新执行blockHandler兜底方法。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/66.png"></p>
<p><code>http://localhost:84/consumer/fallback/5</code>执行fallback兜底方法。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/62.png"></p>
<p><code>http://localhost:84/consumer/fallback/5</code>多次刷新执行blockHandler兜底方法。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/67.png"></p>
<p><strong><code>当@SentinelResource注解fallback和blockHandler都指定后，然后同时符合，优先执行blockHandler兜底方法。</code></strong></p>
<h4 id="忽略异常属性"><a href="#忽略异常属性" class="headerlink" title="忽略异常属性"></a>忽略异常属性</h4><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/69.png"></p>
<p>修改@SentinelResource注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(value = &quot;fallback&quot;, </span></span><br><span class="line"><span class="meta">        fallback =&quot;handlerFallback&quot;, </span></span><br><span class="line"><span class="meta">        blockHandler = &quot;blockHandler&quot;, </span></span><br><span class="line"><span class="meta">        exceptionsToIgnore = &#123;IllegalArgumentException.class&#125;)</span></span><br><span class="line"><span class="comment">//如果出现exceptionsToIgnore中的异常，不运行fallback兜底方法。</span></span><br></pre></td></tr></table></figure>

<p><code>http://localhost:84/consumer/fallback/4</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/59.png"></p>
<p><code>http://localhost:84/consumer/fallback/5</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/62.png"></p>
<h3 id="Sentinel整合Feign系列"><a href="#Sentinel整合Feign系列" class="headerlink" title="Sentinel整合Feign系列"></a>Sentinel整合Feign系列</h3><p>修改84</p>
<ol>
<li><p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--前面已添加了--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#激活Sentinel对Feign的支持</span></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>PaymentFallbackService实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentFallbackService</span> <span class="keyword">implements</span> <span class="title">PaymentService</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">paymentSQL</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">44444444</span>,<span class="string">&quot;服务降级返回，---PaymentFallbackService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller。CircleBreakerController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//======= OpenFeign</span></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/openfeign/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt; Payment &gt; paymentSQL(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)&#123;</span><br><span class="line">    <span class="keyword">return</span> paymentService.paymentSQL(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，<code>http://localhost:84/consumer/paymentSQL/1</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/68.png"></p>
</li>
<li><p>关闭9003和9004，执行@FeignClient的fallback兜底方法PaymentFallbackService。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/70.png"></p>
</li>
</ol>
<h2 id="熔断限流框架对比"><a href="#熔断限流框架对比" class="headerlink" title="熔断限流框架对比"></a>熔断限流框架对比</h2><table>
<thead>
<tr>
<th></th>
<th>Sentinel</th>
<th>Hystrix</th>
<th>resilience4j</th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离（并发控制）</td>
<td>线程池隔离/信号量隔离</td>
<td>信号量隔离</td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于慢调用比例、异常比例、异常数</td>
<td>基于异常比例</td>
<td>基于异常比例、响应时间</td>
</tr>
<tr>
<td>实时统计实现</td>
<td>滑动窗口（LeapArray）</td>
<td>滑动窗口（基于 RxJava）</td>
<td>Ring Bit Buffer</td>
</tr>
<tr>
<td>动态规则配置</td>
<td>支持近十种动态数据源</td>
<td>支持多种数据源</td>
<td>有限支持</td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
<td>接口的形式</td>
</tr>
<tr>
<td>基于注解的支持</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>单机限流</td>
<td>基于 QPS，支持基于调用关系的限流</td>
<td>有限的支持</td>
<td>Rate Limiter</td>
</tr>
<tr>
<td>集群流控</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>流量整形</td>
<td>支持预热模式与匀速排队控制效果</td>
<td>不支持</td>
<td>简单的 Rate Limiter 模式</td>
</tr>
<tr>
<td>系统自适应保护</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>热点识别/防护</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>多语言支持</td>
<td>Java/Go/C++</td>
<td>Java</td>
<td>Java</td>
</tr>
<tr>
<td>Service Mesh 支持</td>
<td>支持 Envoy/Istio</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr>
<td>控制台</td>
<td>提供开箱即用的控制台，可配置规则、实时监控、机器发现等</td>
<td>简单的监控查看</td>
<td>不提供控制台，可对接其它监控系统</td>
</tr>
</tbody></table>
<h2 id="规则持久化"><a href="#规则持久化" class="headerlink" title="规则持久化"></a>规则持久化</h2><p>一旦我们重启应用，sentinel规则将消失，生产环境需要将配置规则进行持久化将限流配置规则持久化进Nacos保存，只要刷新8401某个rest地址， sentinel控制台的流控规则就能看到，只要Nacos里面的配置不删除,针对8401上sentinel上的流控规则持续有效。</p>
<p>修改8401</p>
<ol>
<li><p>pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SpringCloud ailibaba sentinel-datasource-nacos 持久化需要用到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"> <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment"># 配置Sentinel dashboard地址 即 将8401 注册进sentinel ，sentinel会监控 8401</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br><span class="line">        <span class="comment"># 默认是8719端口，如果被占用就会自动从8719开始依次扫描，直到找到未被占用的端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds1:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">server-addr:</span> <span class="string">localhost:8848</span>  <span class="comment">#nacos</span></span><br><span class="line">            <span class="attr">dataId:</span> <span class="string">cloud-sentinel-service</span></span><br><span class="line">            <span class="attr">groupId:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">data-type:</span> <span class="string">json</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line"></span><br><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#激活Sentinel 对Feign的支持</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在nacos后台添加配置：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/71.png"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;resource&quot;</span>: <span class="string">&quot;/rateLimit/byUrl&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;limitApp&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;grade&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;count&quot;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">&quot;strategy&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;controlBehavior&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">&quot;clusterMode&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">]	</span><br></pre></td></tr></table></figure>

<ul>
<li>resource:资源名称;</li>
<li>limitApp:来源应用;</li>
<li>grade:阈值类型，0表示线程数, 1表示QPS;</li>
<li>count:单机阈值;</li>
<li>strategy:流控模式，0表示直接, 1表示关联，2表示链路;</li>
<li>controlBehavior:流控效果, 0表示快速失败, 1表示Warm Up, 2表示排队等待;</li>
<li>clusterMode:是否集群。</li>
</ul>
</li>
<li><p>重新启动8401<code>http://localhost:8401/rateLimit/byUrl</code>多次刷新</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/72.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud11/73.png"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis学习笔记</title>
    <url>/HuaStarOS.github.io/2021/03/17/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Nosql概述"><a href="#Nosql概述" class="headerlink" title="Nosql概述"></a>Nosql概述</h1><p>​    作者是通过狂神的Redis视频学习的。感谢狂神的分享。<a href="https://www.bilibili.com/video/BV1S54y1R7SB?from=search&seid=807391385464464377">视频链接</a>。</p>
<h2 id="为什么要用Nosql"><a href="#为什么要用Nosql" class="headerlink" title="为什么要用Nosql"></a>为什么要用Nosql</h2><blockquote>
<p>单机MySQL的年代！</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317122148588.png" alt="image-20210317122148588"></p>
<p>​    90年代，一个基本的网站访问量一般不会太大，单个数据库完全足够！ 那个时候，更多的去使用静态网页 Html ~ 服务器根本没有太大的压力！ </p>
<p>思考一下，这种情况下：整个网站的瓶颈是什么？</p>
<ol>
<li>数据量如果太大、一个机器放不下了！ </li>
<li>数据的索引 （B+ Tree），一个机器内存也放不下 </li>
<li>访问量巨大（读写混合），一个服务器承受不了</li>
</ol>
<p>只要你开始出现以上的三种情况之一，那么你就必须要升级！</p>
<blockquote>
<p>Memcached（缓存） + MySQL + 垂直拆分 （读写分离）</p>
</blockquote>
<p>​    网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据的压力，我们可以使用缓存来保证效率！</p>
<p>​    发展过程： 优化数据结构和索引–&gt; 文件缓存（IO）—&gt; Memcached（当时最热门的技术！）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317123909658.png" alt="image-20210317123909658"></p>
<blockquote>
<p>分库分表 + 水平拆分 + MySQL集群</p>
</blockquote>
<p>技术和业务在发展的同时，对人的要求也越来越高！</p>
<p>本质：数据库（读，写）</p>
<p>早些年MyISAM： 表锁，十分影响效率！高并发下就会出现严重的锁问题</p>
<p>转战Innodb：行锁 慢慢的就开始使用分库分表来解决写的压力！ </p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317123243486.png" alt="image-20210317123243486"></p>
<blockquote>
<p>如今最近的年代</p>
</blockquote>
<p>2010–2020 十年之间，世界已经发生了翻天覆地的变化；（定位，也是一种数据，音乐，热榜！）</p>
<p>MySQL 等关系型数据库就不够用了！数据量很多，变化很快~！</p>
<p>MySQL 有的使用它来存储一些比较大的文件，博客，图片！数据库表很大，效率低！如果有一种数据库来专门处理这种数据,</p>
<p>MySQL压力就变得十分小（研究如何处理这些问题！）大数据的IO压力下，表几乎没法更改！</p>
<blockquote>
<p>目前一个基本的互联网项目！</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317123942378.png" alt="image-20210317123942378"></p>
<blockquote>
<p>为什么要用NoSQL！</p>
</blockquote>
<p>用户的个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式增长！</p>
<p><strong>这时候我们就需要使用NoSQL数据库的，Nosql 可以很好的处理以上的情况！</strong></p>
<h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h2><blockquote>
<p>NoSQL</p>
</blockquote>
<p>NoSQL = Not Only SQL （不仅仅是SQL）</p>
<p>关系型数据库：表格，行，列</p>
<p>泛指非关系型数据库的，随着web2.0互联网的诞生！传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区！暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的，而且是我们当下必须要掌握的一个技术！</p>
<p>很多的数据类型用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式！不需要多月的操作就可以横向扩展的 ! Redis通过Map&lt;String,Object&gt;  使用键值对来控制！</p>
<blockquote>
<p>NoSQL 特点</p>
</blockquote>
<p><strong>解耦！</strong></p>
<ol>
<li>方便扩展（数据之间没有关系，很好扩展！）</li>
<li>大数据量高性能（Redis 一秒写8万次，读取11万，NoSQL的缓存记录级，是一种细粒度的缓存，性能会比较高！）</li>
<li>数据类型是多样型的！（不需要事先设计数据库！随取随用！如果是数据量十分大的表，很多人就无法设计了！）</li>
<li>传统 RDBMS 和 NoSQL</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">传统的RDBMS</span><br><span class="line">- 结构化组织</span><br><span class="line">- SQL</span><br><span class="line">- 数据和关系都存在单独的表中rowcol </span><br><span class="line">- 操作操作，数据定义语言</span><br><span class="line">- 严格的一致性</span><br><span class="line">- 基础的事务</span><br><span class="line">- .....</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Nosql</span><br><span class="line">- 不仅仅是数据</span><br><span class="line">- 没有固定的查询语言</span><br><span class="line">- 键值对存储，列存储，文档存储，图形数据库（社交关系）</span><br><span class="line">- 最终一致性，</span><br><span class="line">- CAP定理和BASE</span><br><span class="line">- 高性能，高可用，高可扩</span><br><span class="line">- ....</span><br></pre></td></tr></table></figure>

<blockquote>
<p>了解：3V+3高</p>
</blockquote>
<p><strong>大数据时代的3V：主要是描述问题的</strong></p>
<ol>
<li><p>海量Volume</p>
</li>
<li><p>多样Variety</p>
</li>
<li><p>实时Velocity</p>
</li>
</ol>
<p><strong>大数据时代的3高：主要是对程序的要求</strong></p>
<ol>
<li><p>高并发</p>
</li>
<li><p>高可扩</p>
</li>
<li><p>高性能</p>
</li>
</ol>
<p><strong>真正在公司中的实践：NoSQL + RDBMS 一起使用才是最强的</strong>，阿里巴巴的架构演进！</p>
<p><strong>技术没有高低之分，就看你如何去使用！</strong>（提升内功，思维的提高！）</p>
<h2 id="阿里巴巴演进分析"><a href="#阿里巴巴演进分析" class="headerlink" title="阿里巴巴演进分析"></a>阿里巴巴演进分析</h2><p>我们查看一下淘宝网站</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317132217871.png" alt="image-20210317132217871"></p>
<p>思考问题：这么多东西难道都是在一个数据库中的吗?</p>
<p>这显然是不可能的，是使用了多种数据库才实现的</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317132551161.png" alt="image-20210317132551161"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.商品的基本信息</span></span><br><span class="line">名称、价格、商家信息。关系型数据库就可以解决了！MySQL/Oracle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.商品的描述、评论（文字比较多）</span></span><br><span class="line">文档型数据库中，MongoDB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.图片</span></span><br><span class="line">分布式文件系统 FastDFS</span><br><span class="line">- 淘宝自己的	TFS</span><br><span class="line">- 淘宝自己的 OSS</span><br><span class="line">- Gooale的 GFS</span><br><span class="line">- Hadoop  HDFS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.商品的关键字（搜索）</span></span><br><span class="line">- 搜索引擎solrelasticsearch</span><br><span class="line">- ISerach</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.商品热门的波段信息</span></span><br><span class="line">- 内存数据库</span><br><span class="line">- Redis、Tair、Memache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.商品的交易，外部的支付接口</span></span><br><span class="line">- 第三方应用</span><br></pre></td></tr></table></figure>

<p>要知道，一个简单地网页背后的技术一定不是大家所想的那么简单！</p>
<p>大型互联网应用问题：</p>
<ul>
<li>数据类型太多了！</li>
<li>数据源繁多，经常重构！</li>
<li>数据要改造，大面积改造？</li>
</ul>
<p>解决方案：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317133326526.png" alt="image-20210317133326526"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317133337912.png"></p>
<h2 id="NoSQL的四大分类"><a href="#NoSQL的四大分类" class="headerlink" title="NoSQL的四大分类"></a>NoSQL的四大分类</h2><p><strong>KV键值对：</strong></p>
<ul>
<li>新浪：Redis</li>
<li>美团：Redis + Tair</li>
<li>阿里、百度：Redis + memecache</li>
</ul>
<p><strong>文档型数据库（bson格式和json一样）：</strong></p>
<ul>
<li>MongoDB（一般必须要掌握）<ul>
<li>MongoDB 是一个基于分布式文件存储的数据库，C++ 编写，主要用来处理大量的文档！</li>
<li>MongoDB 是一个介于关系型数据库和非关系型数据中中间的产品！MongoDB 是非关系型数据库中功能最丰富，最像关系型数据库的！</li>
</ul>
</li>
<li>ConthDB</li>
</ul>
<p><strong>列存储数据库：</strong></p>
<ul>
<li>HBase</li>
<li>分布式文件系统</li>
</ul>
<p><strong>图型关系数据库：</strong></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317133738614.png" alt="image-20210317133738614" style="zoom: 50%;" />



<ul>
<li><strong>他不是存放图形，存放的是关系</strong>，比如：社交网络，广告推荐！</li>
<li>Neo4j，InfoGrid；</li>
</ul>
<blockquote>
<p>四者对比！</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317133857564.png" alt="image-20210317133857564"></p>
<h1 id="Redis入门"><a href="#Redis入门" class="headerlink" title="Redis入门"></a>Redis入门</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>Redis 是什么？</p>
</blockquote>
<p>Redis（<code>R</code>emote <code>Di</code>ctionary <code>S</code>erver )，即远程字典服务 !</p>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，<strong>它可以用作数据库、缓存和消息中间件</strong>。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p>
<p>是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317134047138.png" alt="image-20210317134047138"></p>
<p>redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
<p>免费和开源！是当下最热门的 NoSQL 技术之一！也被人们称之为结构化数据库！</p>
<blockquote>
<p>Redis 能干嘛？</p>
</blockquote>
<ol>
<li>内存存储、持久化，内存中是断电即失、所以说持久化很重要（rdb、aof）</li>
<li>效率高，可以用于高速缓存</li>
<li>发布订阅系统</li>
<li>地图信息分析</li>
<li>计时器、计数器（浏览量！）</li>
<li>……..</li>
</ol>
<blockquote>
<p>特性</p>
</blockquote>
<ol>
<li><p>多样的数据类型</p>
</li>
<li><p>持久化</p>
</li>
<li><p>集群</p>
</li>
<li><p>事务</p>
<p>……</p>
</li>
</ol>
<p>官网：<a href="https://redis.io/">https://redis.io/</a></p>
<p>中文网：<a href="http://www.redis.cn/">http://www.redis.cn/</a></p>
<p>下载地址：通过官网下载即可！</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210317134709294.png" alt="image-20210317134709294"></p>
<h2 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h2><p><code>Redis推荐都是在Linux服务器上搭建的，所以是基于Linux学习！</code></p>
<ol>
<li><p>下载安装包<code>redis-6.2.1.tar.gz</code></p>
</li>
<li><p>解压安装包<code>tar -zxvf redis-6.2.1.tar.gz</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305182526898.png" alt="image-20210305182526898"></p>
</li>
<li><p>进入解压后的文件夹，可以看到redis的配置文件</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305182640771.png" alt="image-20210305182640771"></p>
</li>
<li><p>基本的环境安装</p>
<ul>
<li><p>查看gcc环境</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305183058836.png" alt="image-20210305183058836"></p>
<p>如果没有环境的话，使用<code>yum install gcc-c++ </code>。安装环境</p>
</li>
<li><p>使用<code>make</code>指令,下载需要的文件</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305183442196.png" alt="image-20210305183442196"></p>
<p>之后使用<code>make install</code>指令，确认所需要的文件已经安装成功</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305183739763.png" alt="image-20210305183739763"></p>
</li>
</ul>
</li>
<li><p>redis的默认安装路径<code>/usr/local/bin</code></p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305184521107.png" alt="image-20210305184521107"></p>
<ol start="6">
<li><p>将redis的配置文件。复制到当前的目录下</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305185211619.png" alt="image-20210305185211619"></p>
</li>
<li><p>redis默认不是后台启动的，修改配置文件，<code>vim redis.conf</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305185703539.png" alt="image-20210305185703539"></p>
</li>
<li><p>启动Redis服务，测试</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305190641331.png" alt="image-20210305190641331"></p>
</li>
<li><p>查看redis服务是否开启</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305191205873.png" alt="image-20210305191205873"></p>
</li>
<li><p>关闭Redis服务</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305191510033.png" alt="image-20210305191510033"></p>
</li>
<li><p>再次查看redis服务是否开启</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305191710642.png" alt="image-20210305191710642"></p>
</li>
<li><p>后面会使用单机Redis集群进行测试</p>
</li>
</ol>
<h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p><code>redis-benchmark</code>是一个压力测试工具。官方自带的性能测试工具</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305192224034.png" alt="image-20210305192224034"></p>
<p>使用：<code>redis-benchmark -命令参数</code>即可</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305192447702.png" alt="image-20210305192447702"></p>
<blockquote>
<p>图片来自菜鸟教程 <a href="https://www.runoob.com/redis/redis-benchmarks.html">https://www.runoob.com/redis/redis-benchmarks.html</a></p>
</blockquote>
<p>简单测试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试： 100个并发连接  100000请求</span></span><br><span class="line">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305194053874.png" alt="image-20210305194053874"></p>
<p>如何查看这些数据？</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305194438849.png" alt="image-20210305194438849"></p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="redis默认有16个数据库"><a href="#redis默认有16个数据库" class="headerlink" title="redis默认有16个数据库"></a>redis默认有16个数据库</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305194835139.png" alt="image-20210305194835139"></p>
<p>默认使用的是第0个数据库</p>
<p>可以使用select进行切换</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; select 3   <span class="comment"># 切换数据库</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; dbsize	<span class="comment"># 查看数据库大小</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>



<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305195237105.png" alt="image-20210305195237105"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; keys *  <span class="comment"># 查看数据库所有的key</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305200127062.png" alt="image-20210305200127062"></p>
<p>清除当前数据库<code>flushdb</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379[3]&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; keys *</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305200155392.png" alt="image-20210305200155392"></p>
<p>清除全部的数据库<code>flushall</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key:__rand_int__&quot;</span></span><br><span class="line">2) <span class="string">&quot;mylist&quot;</span></span><br><span class="line">3) <span class="string">&quot;name&quot;</span></span><br><span class="line">4) <span class="string">&quot;counter:__rand_int__&quot;</span></span><br><span class="line">5) <span class="string">&quot;myhash&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; select 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379[3]&gt; select 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210305200333281.png" alt="image-20210305200333281"></p>
<h3 id="Redis是单线程的"><a href="#Redis是单线程的" class="headerlink" title="Redis是单线程的"></a>Redis是单线程的</h3><p>明白Redis是很快的,官方表示, Redis是基于内存操作, CPU不是Redis性能瓶颈, Redis的瓶颈是根据机器的内存和网络带宽，既然可以使用单线程来实现,就使用单线程了!所以就使用了单线程了!</p>
<p>Redis是C语言写的,官方提供的数据为100000+ 的QPS ,完全不比同样是使用key-value的Memecache差!</p>
<p><strong>Redis为什么单线程还这么快?</strong></p>
<ol>
<li><p>误区1 :高性能的服务器一定是多线程的? </p>
</li>
<li><p>误区2 :多线程( CPU上下文会切换! )一定比单线程效率高!</p>
</li>
</ol>
<p>CPU&gt;内存&gt;硬盘的速度</p>
<p>核心: <code>Redis是将所有的数据全部放在内存中的,所以说使用单线程去操作效率就是最高的,多线程( CPU上下文会切换:耗时的操作! ! ! ) , 对于内存系统来说,如果没有上下文切换效率就是最高的!多次读写都是在一个CPU上的,在内存情况下,这个就是最佳的方案!</code></p>
<h1 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="五大数据类型"></a>五大数据类型</h1><blockquote>
<p>官网文档</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210306144428341.png" alt="image-20210306144428341"></p>
<p>全文翻译：</p>
<p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p>
<h2 id="Redis-Key常用命令"><a href="#Redis-Key常用命令" class="headerlink" title="Redis-Key常用命令"></a>Redis-Key常用命令</h2><p><strong>Redis不区分大小写命令</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name qzh	<span class="comment"># 设置k-v键值对 </span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *			<span class="comment"># 查看所有的key</span></span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; exists name		<span class="comment"># 判断key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; exists name1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; move name 1		<span class="comment"># 移除key， 1 表示当前库</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name qzh</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;qzh&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; expire name 10	<span class="comment"># 设置key的过期时间，单位是秒</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name		<span class="comment"># 查看key的过期时间</span></span><br><span class="line">(<span class="built_in">integer</span>) 6</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(<span class="built_in">integer</span>) -2					<span class="comment"># -2 表示已经过期了</span></span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name qzh</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">type</span> name		<span class="comment"># 查看key的类型 ！！</span></span><br><span class="line">string</span><br></pre></td></tr></table></figure>

<p>后面遇到不会的命令，可以在官网查看帮助文档</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210306151045964.png" alt="image-20210306151045964"></p>
<h2 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##########################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 v1		<span class="comment"># 设置键值对</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1		<span class="comment"># 获取值</span></span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; keys *			<span class="comment"># 查看所有的key</span></span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; exists key1		<span class="comment"># 判断key是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 <span class="string">&quot;hello&quot;</span>	 <span class="comment"># 向指定的key追加字符串 ， 如果当前key不存在就相当于创建一个key （set key）</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1		<span class="comment"># 获取字符串的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; APPEND key1 <span class="string">&quot;,world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; STRLEN key1</span><br><span class="line">(<span class="built_in">integer</span>) 13</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line"><span class="string">&quot;v1hello,world&quot;</span></span><br><span class="line"><span class="comment">#############################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> views 0	 <span class="comment"># 初始化浏览量为0</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCR views	 <span class="comment"># 自增1 </span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; DECR views	 <span class="comment"># 自减1</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; INCRBY views 10	 <span class="comment"># 可以设置步长，指定增量！</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;10&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; DECRBY views 10</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get views</span><br><span class="line"><span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定的范围的字符 range</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key1 <span class="string">&quot;hello,world&quot;</span>	<span class="comment"># 设置key1的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1	</span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 3		<span class="comment"># 截取字符串 ，[0,3]</span></span><br><span class="line"><span class="string">&quot;hell&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GETRANGE key1 0 -1		<span class="comment"># 获取全部的字符串</span></span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换！</span></span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> key2 abcdefg</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;abcdefg&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SETRANGE key2 1 xxx		<span class="comment"># 替换指定位置开始的字符串</span></span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line">127.0.0.1:6379&gt; get key2</span><br><span class="line"><span class="string">&quot;axxxefg&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># setex (set with expire)  设置k-v并设置过期时间</span></span><br><span class="line"><span class="comment"># setnx (set if not exist)  当key不存在时再设置</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; setex key3 30 <span class="string">&quot;hello&quot;</span>	<span class="comment"># 设置key3的值为hello 30秒后过期</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; TTL key3</span><br><span class="line">(<span class="built_in">integer</span>) 18</span><br><span class="line">127.0.0.1:6379&gt; get key3</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;redis&quot;</span>		<span class="comment"># 如果 mykey 不存在，创建mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ttl key3</span><br><span class="line">(<span class="built_in">integer</span>) -2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;key1&quot;</span></span><br><span class="line">2) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">3) <span class="string">&quot;key2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; setnx mykey <span class="string">&quot;MongoDB&quot;</span>	<span class="comment"># 如果 mykey 存在，则创建失败</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; get mykey</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># mset 批量设置多个值</span></span><br><span class="line"><span class="comment"># mget 批量获取多个值</span></span><br><span class="line">127.0.0.1:6379&gt; keys  *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3		<span class="comment"># mset 批量设置多个值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2 k3		<span class="comment"># mget 批量获取多个值</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k4 v4	<span class="comment"># msetnx 是一个原子性的操作，要么一起成功，要么一起失败！</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对象，如何存放在Redis中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的key是一个巧妙的设计：user:&#123;id&#125;:&#123;filed&#125;, 如此设计在Redis中是完全OK的</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; mset user:1:name qzh user:1:age 3</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;user:1:name&quot;</span></span><br><span class="line">2) <span class="string">&quot;user:1:age&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># getset 先get然后再set </span></span><br><span class="line">127.0.0.1:6379&gt; getset db redis	 <span class="comment"># 如果值不存在，则返回 nil</span></span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; getset db mogodb  <span class="comment"># 如果值存在，获取原来的值，并设置新的值</span></span><br><span class="line"><span class="string">&quot;redis&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get db</span><br><span class="line"><span class="string">&quot;mogodb&quot;</span></span><br></pre></td></tr></table></figure>

<p>String的使用场景： value除了是字符串还可以是数字</p>
<ul>
<li>计数器</li>
<li>统计多单位的数量</li>
<li>粉丝数</li>
<li>对象缓存存储 ！</li>
</ul>
<h2 id="List-（列表）"><a href="#List-（列表）" class="headerlink" title="List （列表）"></a>List （列表）</h2><p>在Redis里面，我们可以吧 <code>List</code> 玩成 栈、队列、阻塞队列</p>
<p><code>在Redis里关于 List 的命令都是用 L 开头的</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list one		<span class="comment"># 将一个值或者多个值，插入到列表头部（左）</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list two</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPUSH list three</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;list&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1	<span class="comment"># 获取list中的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 1		<span class="comment"># 通过区间获取具体的值</span></span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; RPUSH list right	<span class="comment"># 将一个值或者多个值，插入到列表尾部（右）</span></span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># LPOP	移除list的第一个元素</span></span><br><span class="line"><span class="comment"># RPOP	移除list的最后一个元素</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;one&quot;</span></span><br><span class="line">4) <span class="string">&quot;right&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LPOP list	<span class="comment"># 移除list的第一个元素</span></span><br><span class="line"><span class="string">&quot;three&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Rpop list	<span class="comment"># 移除list的最后一个元素</span></span><br><span class="line"><span class="string">&quot;right&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># lindex	通过下标获取list中的某一个值</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 1	<span class="comment"># 通过下标获取list中的某一个值</span></span><br><span class="line"><span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINDEX list 0</span><br><span class="line"><span class="string">&quot;two&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># Llen 获取列表的长度</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line">2) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Llen list	<span class="comment"># 获取列表的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># lrem 移除指定的值</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">4) <span class="string">&quot;one&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 1 one		<span class="comment"># 移除list集合中指定个数的value,精确匹配</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;three&quot;</span></span><br><span class="line">2) <span class="string">&quot;three&quot;</span></span><br><span class="line">3) <span class="string">&quot;two&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; lrem list 2 three</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;two&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># Ltrim 截取</span></span><br><span class="line">127.0.0.1:6379&gt; LPush list hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPush list hello1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPush list hello2</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LPush list hello4</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello4&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LTRIM list 1 2	<span class="comment"># 通过下标截取指定区间的list，这个list已经被改变了，list中只剩下截取的元素了。</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># rpoplpush	移除列表的最后一个元素，并将它移动到新的列表中！</span></span><br><span class="line">127.0.0.1:6379&gt; LPush list hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LPush list hello1</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LPush list hello2</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; RPOPLPUSH list otherlist	<span class="comment"># 移除列表的最后一个元素，并将它移动到新的列表中！</span></span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;hello2&quot;</span></span><br><span class="line">2) <span class="string">&quot;hello1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LRANGE otherlist 0 -1</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment">#lset 将列表指定下标的值替换为另一个值，更新操作</span></span><br><span class="line">127.0.0.1:6379&gt; exists list		<span class="comment"># 判断这个列表是否存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; lset list 0 item	<span class="comment"># 如果不存在，执行lset命令 就会报错</span></span><br><span class="line">(error) ERR no such key</span><br><span class="line">127.0.0.1:6379&gt; lpush list value1</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;value1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lset list 0 item	<span class="comment"># 如果存在，更新当前下标的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; LRANGE list 0 -1</span><br><span class="line">1) <span class="string">&quot;item&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; Lset list 1 item	<span class="comment"># 如果不存在，就会报错</span></span><br><span class="line">(error) ERR index out of range</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># linsert 将某个具体的value插入到列表中指定的某个元素的前面或者后面</span></span><br><span class="line">127.0.0.1:6379&gt; lpush mylist hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; lpush mylist world</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist before world other</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;other&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; LINSERT mylist after world new</span><br><span class="line">(<span class="built_in">integer</span>) 4</span><br><span class="line">127.0.0.1:6379&gt; LRANGE mylist 0 -1</span><br><span class="line">1) <span class="string">&quot;other&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">3) <span class="string">&quot;new&quot;</span></span><br><span class="line">4) <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结</p>
</blockquote>
<ul>
<li>他实际上是一个链表, before Node after ，left , right都可以插入值</li>
<li>如果list不存在,创建新的链表</li>
<li>如果list存在,新增内容</li>
<li>如果移除了所有值,空链表,也代表不存在!</li>
<li>在两边插入或者改动值,效率最高!中间元素,相对来说效率会低一 -点~</li>
</ul>
<p>消息排队!消息队列( Lpush Rpop)，栈( Lpush Lpop) !</p>
<h2 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h2><p>set中的值不可以重复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># sadd 		向set集合中添加元素</span></span><br><span class="line"><span class="comment"># smembers  查看set元素中的所有值</span></span><br><span class="line"><span class="comment"># sismenber	判断某一个值是不是在set集合中</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello	<span class="comment"># 向set集合中添加元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset world</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; sadd myset qzh</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;myset&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset		<span class="comment"># 查看set元素中的所有值</span></span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset hello	<span class="comment"># 判断某一个值是不是在set集合中	1 表示存在 ， 0 表示不存在</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SISMEMBER myset peace</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># scard		获取set集合中的元素个数!</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; scard myset		<span class="comment"># 获取set集合中的元素个数!</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># srem 移除set集合中的指定元素</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; srem myset hello	<span class="comment"># 移除set集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># SRANDMEMBER 随机抽取元素</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 	<span class="comment"># 随机抽选出一个元素</span></span><br><span class="line">1) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset </span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2		<span class="comment"># 随机抽选出指定个数的元素</span></span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SRANDMEMBER myset 2</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机删除元素（spop），删除指定的元素，</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">3) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset	<span class="comment"># 随机删除set集合中的元素!</span></span><br><span class="line"><span class="string">&quot;qzh&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line"><span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; spop myset</span><br><span class="line"><span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># smove 将一个指定的值，移动到另外一个set集合!</span></span><br><span class="line">127.0.0.1:6379&gt; sadd myset hello qzh world</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 set2</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; smove myset myset2 hello	<span class="comment"># 将一个指定的值，移动到另外一个set集合!</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset</span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;world&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SMEMBERS myset2</span><br><span class="line">1) <span class="string">&quot;hello&quot;</span></span><br><span class="line">2) <span class="string">&quot;set2&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line">微博，B站，共同关注! (并集)</span><br><span class="line">数字集合类:</span><br><span class="line"> - 差集	SDIFF</span><br><span class="line"> - 交集	SINTER</span><br><span class="line"> - 并集	SUNION</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd myset1 a b c</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; sadd myset2 c d e</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; SDIFF myset1 myset2		<span class="comment"># 差集</span></span><br><span class="line">1) <span class="string">&quot;a&quot;</span></span><br><span class="line">2) <span class="string">&quot;b&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SINTER myset1 myset2	<span class="comment"># 交集</span></span><br><span class="line">1) <span class="string">&quot;c&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; SUNION myset1 myset2	<span class="comment"># 并集</span></span><br><span class="line">1) <span class="string">&quot;b&quot;</span></span><br><span class="line">2) <span class="string">&quot;c&quot;</span></span><br><span class="line">3) <span class="string">&quot;a&quot;</span></span><br><span class="line">4) <span class="string">&quot;d&quot;</span></span><br><span class="line">5) <span class="string">&quot;e&quot;</span></span><br></pre></td></tr></table></figure>

<p>微博 A用户将所有关注的人放在一 个set集合中!将它的粉丝也放在一个集合中! </p>
<p>共同关注</p>
<h2 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h2><p>map集合。key-value,此时的value就是map</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line">127.0.0.1:6379&gt; hset myhash k1 v1	<span class="comment"># 向map集合中插入一个键值对 key-values</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hget myhash k1		<span class="comment"># 从map集合获取一个值</span></span><br><span class="line"><span class="string">&quot;v1&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hmset myhash k2 v2 k3 v3	<span class="comment"># 向map集合中插入多个键值对 key-values</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; hmget myhash k1 k2 k3		<span class="comment"># 从map集合获取多个值</span></span><br><span class="line">1) <span class="string">&quot;v1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash		<span class="comment"># 获取map中全部的值</span></span><br><span class="line">1) <span class="string">&quot;k1&quot;</span></span><br><span class="line">2) <span class="string">&quot;v1&quot;</span></span><br><span class="line">3) <span class="string">&quot;k2&quot;</span></span><br><span class="line">4) <span class="string">&quot;v2&quot;</span></span><br><span class="line">5) <span class="string">&quot;k3&quot;</span></span><br><span class="line">6) <span class="string">&quot;v3&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line">删除 hdel</span><br><span class="line">127.0.0.1:6379&gt; hdel myhash k1	<span class="comment"># 删除指定的键值对</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v3&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line">hlen 获取map的长度</span><br><span class="line">127.0.0.1:6379&gt; hgetall myhash</span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;v2&quot;</span></span><br><span class="line">3) <span class="string">&quot;k3&quot;</span></span><br><span class="line">4) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hlen myhash	<span class="comment"># 获取map的长度</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line">判断map中key是否存在!</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash k2	<span class="comment">#判断hash中指定字段是否存在!</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HEXISTS myhash k1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只获得所有key</span></span><br><span class="line"><span class="comment"># 只获得所有value</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hkeys myhash <span class="comment"># 只获得所有key</span></span><br><span class="line">1) <span class="string">&quot;k2&quot;</span></span><br><span class="line">2) <span class="string">&quot;k3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; hvals myhash <span class="comment"># 只获得所有value</span></span><br><span class="line">1) <span class="string">&quot;v2&quot;</span></span><br><span class="line">2) <span class="string">&quot;v3&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hset myhash k1 5</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HINCRBY myhash k1 5</span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; HSETNX myhash k4 hello	<span class="comment"># 如果不存在则能设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; HSETNX myhash k4 hello	<span class="comment"># 如果存在则不能设置</span></span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<p>hash存放变更的数据,尤其是是用户信息之类的,经常变动的信息! hash 更适合于对象的存储, String更加适合字符串存储!</p>
<h2 id="Zset（有序集合）"><a href="#Zset（有序集合）" class="headerlink" title="Zset（有序集合）"></a>Zset（有序集合）</h2><p>在set的基础上,增加了一个值, set k1 v1 。 zset k1 score1 V1，通过score的大小来排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd myset 1 one	<span class="comment"># 添加一个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 two 3 three	<span class="comment"># 添加多个值</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; ZRANGE myset 0 -1</span><br><span class="line">1) <span class="string">&quot;one&quot;</span></span><br><span class="line">2) <span class="string">&quot;two&quot;</span></span><br><span class="line">3) <span class="string">&quot;three&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line">排序如何实现</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd salary 2500 xiaohong	<span class="comment"># 添加3个用户</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 5000 zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd salary 500 qzh</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf	<span class="comment"># 显示全部的用户 从小到大排序</span></span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1	<span class="comment"># 显示全部的用户 从大到小排序</span></span><br><span class="line">1) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores	<span class="comment"># 显示全部的用户，并且附带score</span></span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line">5) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">6) <span class="string">&quot;5000&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 withscores	<span class="comment"># 显示工资小于2500员工的升序排序!</span></span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;500&quot;</span></span><br><span class="line">3) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">4) <span class="string">&quot;2500&quot;</span></span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"><span class="comment"># zrem 移除Zset中的元素</span></span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">3) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem salary xiaohong	<span class="comment"># 移除有序集合中的指定元素</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange salary 0 -1</span><br><span class="line">1) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">2) <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zcard salary	<span class="comment"># 获取有序集合中的个数</span></span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"><span class="comment">##############################################################################################</span></span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd myset 1 hello</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zadd myset 2 world 3 qzh</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 1 3	<span class="comment"># 获取score在指定区间的成员数量!</span></span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line">127.0.0.1:6379&gt; zcount myset 1 2</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>其与的一-些API ,通过我们的学习,剩下的如果工作中有需要,这个时候你可以去查查看官方文档!</p>
<p>案例思路: set排序存储班级成绩表,工资表排序!</p>
<p>普通消息, 1，重要消息2 ,带权重进行判断!</p>
<p>排行榜应用实现,</p>
<h1 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h1><h2 id="Geospatial-地理位置"><a href="#Geospatial-地理位置" class="headerlink" title="Geospatial 地理位置"></a>Geospatial 地理位置</h2><p>日常生活中的，朋友圈的定位、附近的人、打车距离的计算。是如何实现的呢？</p>
<p>可以通过Redis的<code>Geospatial </code>数据类型实现。Redis的Geo在Redis3.2版本就推出了!这个功能可以推算地理位置的信息,两地之间的距离、方圆几里的人!</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310142253708.png" alt="image-20210310142253708"></p>
<blockquote>
<p>geoadd 添加地理位置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># geoadd 添加地理位置</span></span><br><span class="line"><span class="comment"># 规则: 两级无法直接添加，我们一-般会下载城市数据，直接通过java程序一次性导入!</span></span><br><span class="line"><span class="comment"># 有效的经度从-180度到180度。</span></span><br><span class="line"><span class="comment"># 有效的纬度从-85.05112878度到85.05112878度。</span></span><br><span class="line"><span class="comment"># 当坐标位置超出上述指定范围时，该命令将会返回一个错误。</span></span><br><span class="line">	<span class="comment"># 127.0.0.1:6379&gt; geoadd china:city 39.40 116.40 beijing</span></span><br><span class="line">	 (error) ERR invalid longitude,latitude pair 39.400000,116.400000</span><br><span class="line"><span class="comment"># 将指定的地理空间位置（纬度、经度、名称）添加到指定的key中。这些数据将会存储到sorted set</span></span><br><span class="line"><span class="comment"># 参数 key 值（纬度、经度、名称）</span></span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 beijin</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqi 114.05 22.52 shengzhen</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 120.16 30.24 hangzhou 108.96 34.26 xian</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;china:city&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>geopos  从<code>key</code>里返回所有给定位置元素的位置（经度和纬度）。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取指定的城市的经度和纬度!</span></span><br><span class="line"><span class="comment"># 获得当前定位: 一定是一个坐标值!</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city beijin</span><br><span class="line">1) 1) <span class="string">&quot;116.39999896287918091&quot;</span></span><br><span class="line">   2) <span class="string">&quot;39.90000009167092543&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geopos china:city shengzhen chongqi</span><br><span class="line">1) 1) <span class="string">&quot;114.04999762773513794&quot;</span></span><br><span class="line">   2) <span class="string">&quot;22.5200000879503861&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">   2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>geodist 返回两个给定位置之间的距离。</p>
</blockquote>
<p>应用场景：微信中两个人的距离。。。</p>
<p>单位：</p>
<ul>
<li><strong>m</strong> 表示单位为米。</li>
<li><strong>km</strong> 表示单位为千米。</li>
<li><strong>mi</strong> 表示单位为英里。</li>
<li><strong>ft</strong> 表示单位为英尺。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geodist china:city beijin shengzhen</span><br><span class="line"><span class="string">&quot;1945788.0901&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijin shengzhen km</span><br><span class="line"><span class="string">&quot;1945.7881&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; geodist china:city beijin xian km</span><br><span class="line"><span class="string">&quot;910.0565&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>georadius 以给定的经纬度为中心，找出某一半径内的元素</p>
</blockquote>
<p>应用场景：我附近的人 ( 获得所有附近的人的地址,定位! ) 通过半径来查询 !</p>
<p>获得指定数量的人, 200</p>
<p>所有数据应该都录入: china:city ,才会让结果更加正确!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 1000 km	<span class="comment"># 以110，30这个经纬度为中心，寻找方圆1000km内的城市。</span></span><br><span class="line">1) <span class="string">&quot;chongqi&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shengzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km</span><br><span class="line">1) <span class="string">&quot;chongqi&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist	<span class="comment"># 显示到中心的距离</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqi&quot;</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) <span class="string">&quot;483.8340&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withcoord <span class="comment"># 显示他人的定位信息</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqi&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) 1) <span class="string">&quot;108.96000176668167114&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.25999964418929977&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 1 <span class="comment"># 指定显示的数量</span></span><br><span class="line">1) 1) <span class="string">&quot;chongqi&quot;</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUS china:city 110 30 500 km withdist withcoord count 2</span><br><span class="line">1) 1) <span class="string">&quot;chongqi&quot;</span></span><br><span class="line">   2) <span class="string">&quot;341.9374&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;106.49999767541885376&quot;</span></span><br><span class="line">      2) <span class="string">&quot;29.52999957900659211&quot;</span></span><br><span class="line">2) 1) <span class="string">&quot;xian&quot;</span></span><br><span class="line">   2) <span class="string">&quot;483.8340&quot;</span></span><br><span class="line">   3) 1) <span class="string">&quot;108.96000176668167114&quot;</span></span><br><span class="line">      2) <span class="string">&quot;34.25999964418929977&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>georadisbymember 找出位于指定范围内的元素、中心点是由给定的位置元素决定的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找出位于指定元素周围的其他元素! </span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city beijin 1000 km</span><br><span class="line">1) <span class="string">&quot;beijin&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city shanghai 400 km</span><br><span class="line">1) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">2) <span class="string">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>GEOHASH命令-返回一个或多个位置元素的Geohash表示</p>
</blockquote>
<p>该命令将返回11个字符的Geohash字符串!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将二维的经纬度转换为一 维的字符串，如果两个字符串越接近，那么则距离越近!</span></span><br><span class="line">127.0.0.1:6379&gt; geohash china:city beijin shengzhen</span><br><span class="line">1) <span class="string">&quot;wx4fbxxfke0&quot;</span></span><br><span class="line">2) <span class="string">&quot;ws10578st80&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>GEO 底层的实现原理其实就是Zset !我们可以使用Zset命令来操作geo !</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqi&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shengzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br><span class="line">6) <span class="string">&quot;beijin&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; zrem china:city beijin</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) <span class="string">&quot;chongqi&quot;</span></span><br><span class="line">2) <span class="string">&quot;xian&quot;</span></span><br><span class="line">3) <span class="string">&quot;shengzhen&quot;</span></span><br><span class="line">4) <span class="string">&quot;hangzhou&quot;</span></span><br><span class="line">5) <span class="string">&quot;shanghai&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="Hyperloglog"><a href="#Hyperloglog" class="headerlink" title="Hyperloglog"></a>Hyperloglog</h2><blockquote>
<p>基数是什么？</p>
</blockquote>
<p>A{1,3,5,7,8,7}</p>
<p>B{1,3,5,7,8}</p>
<p>基数(不重复的元素) =5, 可以接受误差!</p>
<blockquote>
<p>简介</p>
</blockquote>
<p>Redis 2.8.9版本就更新了Hyperloglog 数据结构!</p>
<p>Redis Hyperloglog基数统计的算法!</p>
<p>优点:占用的内存是固定, 2^64不同的元素的基数,只需要废12KB内存!如果要从内存角度来比较的话Hyperloglog 首选!</p>
<p><strong>网页的 UV 网站访问量 (一个人访问一个网站多次,但是还是算作一个人! )</strong></p>
<p>传统的方式，set 保存用户的id ,然后就可以统计set中的元素数量作为标准判断!</p>
<p>这个方式如果保存大量的用户id ,就会比较麻烦 ! 浪费内存。我们的目的是为了计数,而不是保存用户id ;</p>
<p>0.81%错误率!统计UV任务,可以忽略不计的!</p>
<blockquote>
<p>测试使用</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PFADD mykey a a b c d e f g h i j	<span class="comment"># 创建第一组数据 mykey</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey	<span class="comment"># 统计mykey 元素的基数数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 10</span><br><span class="line">127.0.0.1:6379&gt; pfadd mykey2 i j z x c v b n m	<span class="comment"># 创建第一组数据 mykey2</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount mykey2</span><br><span class="line">(<span class="built_in">integer</span>) 9</span><br><span class="line">127.0.0.1:6379&gt; pfmerge mykey3 mykey mykey2	<span class="comment"># 合并mykey mykey2 =&gt; mykey3 并集</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; PFCOUNT mykey3	<span class="comment"># 查看mykey3的基数数量</span></span><br><span class="line">(<span class="built_in">integer</span>) 15</span><br></pre></td></tr></table></figure>

<p>如果允许容错,那么一定可以使用Hyperloglog !</p>
<p>如果不允许容错,就使用set或者自己的数据类型即可!</p>
<h2 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h2><blockquote>
<p>位存储</p>
</blockquote>
<p>统计用户信息。活跃、不活跃 ! 登录、末登录 ! 两个状态的,都可以使用Bitmaps !</p>
<p>Bitmaps位图，数据结构！操作二进制位来进行记录，就只有0和1两个状态！</p>
<p>记录365天的打卡信息 需要 365 bit 。1字节= 8bit 46 个字节左右!</p>
<blockquote>
<p>测试</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310161218205.png" alt="image-20210310161218205"></p>
<p>使用bitmap来记录周一到周日的打卡!</p>
<p>周一(0) : 1    周二(1) : 0    周三(2) : 0    周四(3) : 1 ………</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 1 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 2 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 3 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 4 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 5 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit sign 6 0</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br></pre></td></tr></table></figure>

<p>查看某一天是否有打卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; getbit sign 1</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit sign 3</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>

<p>统计操作，统计打卡的天数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; bitcount sign</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br></pre></td></tr></table></figure>

<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>Redis事务本质:一组命令的集合!一个事务中的所有命令都会被序列化,在事务执行过程的中,会按照顺序执行!</p>
<p>一次性、 顺序性、排他性 ! 执行一-些列的命令 !</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--------- 队列 set命令 set命令 set命令 执行 --------------</span><br></pre></td></tr></table></figure>

<p><code>Redis事务没有没有隔离级别的概念 ! </code></p>
<p><code>所有的命令在事务中,并没有直接被执行!只有发起执行命令的时候才会执行! Exec</code></p>
<p><code>Redis单条命令式保存原子性的,但是事务不保证原子性!</code></p>
<p>redis的事务：</p>
<ul>
<li>开启事务（multi）</li>
<li>命令入队（……其他命令）</li>
<li>执行事务（exec）</li>
</ul>
<blockquote>
<p>正常执行事务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI	<span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line"><span class="comment"># 命令入队</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span>  <span class="comment"># 执行事务 </span></span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br><span class="line">3) <span class="string">&quot;v2&quot;</span></span><br><span class="line">4) OK</span><br></pre></td></tr></table></figure>

<blockquote>
<p>取消事务</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; MULTI	<span class="comment"># 开启事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED	</span><br><span class="line">127.0.0.1:6379(TX)&gt; DISCARD	<span class="comment"># 取消事务</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k4	<span class="comment"># 事务队列中的命令都不会执行</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>编译型异常 (代码有问题 ! 命令有错 ! )  ,  事务中所有的命令都不会被执行 !</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; getset k3	<span class="comment"># 错误的命令</span></span><br><span class="line">(error) ERR wrong number of arguments <span class="keyword">for</span> <span class="string">&#x27;getset&#x27;</span> <span class="built_in">command</span></span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k4 v4</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span>	<span class="comment"># 执行事务报错</span></span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class="line">127.0.0.1:6379&gt; get k4		<span class="comment"># 所有的命令都不会被执行！</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>运行时异常( 1/0)，如果事务队列中存在语法性错误 , 那么执行命令的时候 , 其他命令是可以正常执行的 , 错误命令抛出异常 !</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> k1 <span class="string">&quot;v1&quot;</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr k1	<span class="comment"># 执行的时候会失败</span></span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">set</span> k3 v3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; get k3</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) (error) ERR value is not an <span class="built_in">integer</span> or out of range  <span class="comment"># 虽然第一条命令报错了，但是依旧正常执行成功了！</span></span><br><span class="line">2) OK </span><br><span class="line">3) OK</span><br><span class="line">4) <span class="string">&quot;v3&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get k2 </span><br><span class="line"><span class="string">&quot;v2&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; get k3</span><br><span class="line"><span class="string">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>监控 ！ Watch </p>
</blockquote>
<p><strong>悲观锁：</strong></p>
<ul>
<li>很悲观，认为什么时候都会出问题，无论做什么都会加锁！</li>
</ul>
<p><strong>乐观锁</strong></p>
<ul>
<li><p>很乐观,认为什么时候都不会出问题,所以不会上锁!更新数据的时候去判断一下,在此期间是否有人修改过这个数据，</p>
<ul>
<li><p>获取version</p>
</li>
<li><p>更新的时候比较version</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Redis 监控测试</p>
</blockquote>
<p>正常执行成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> money 100</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> out 0</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; WATCH money		<span class="comment"># 监控 money 对象，获取money的值</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi	<span class="comment"># 事务正常结束，执行期间数据没有发生变动。这个时候就正常执行成功</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; DECRBY money 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCRBY out 20</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span></span><br><span class="line">1) (<span class="built_in">integer</span>) 80</span><br><span class="line">2) (<span class="built_in">integer</span>) 20</span><br></pre></td></tr></table></figure>

<p>测试多线程修改值。使用watch可以当做redis的乐观锁操作！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch money		<span class="comment"># 监控 money</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; DECRBY money 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; INCRBY out 10</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; <span class="built_in">exec</span>	<span class="comment"># 在执行之前，另外一个线程。修改了money的值。这个时候，就会导致事务执行失败</span></span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p>如果修改失败,, 重新监控即可。在此之前要解除监控</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310181044583.png" alt="image-20210310181044583"></p>
<blockquote>
<p>小结</p>
</blockquote>
<ol>
<li><p>multi ：开启Redis的事务,置客户端为事务态。</p>
</li>
<li><p>exec ：提交事务,执行从multi到此命令前的命令队列,置客户端为非事务态。</p>
</li>
<li><p>discard ：取消事务,置客户端为非事务态。</p>
</li>
<li><p>watch：监视键值对,作用时如果事务提交exec时发现监视的监视对发生变化,事务将被取消。</p>
</li>
</ol>
<h1 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h1><p>我们要使用Java来操作Redis ,知其然并知其所以然,授人以渔!学习不能急躁,慢慢来会很快!</p>
<p>什么是Jedis是Redis官方推荐的java连接开发工具 ! 是操作Redis的中间件!如果你要使用java操作redis ,那么一定要<br>对Jedis十分的熟悉!</p>
<blockquote>
<p>测试</p>
</blockquote>
<ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入 redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--引入 fastjson--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.70<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编码测试</p>
<ul>
<li><p>连接数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 1、 new Jedis 对象即可。 10.77.26.23 是Linux主机地址</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;10.77.26.23&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// jedis 所有的方法就是我们之前学习的所有指令! 所以之前的指令学习很重要!</span></span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310193734250.png" alt="image-20210310193734250"></p>
</li>
<li><p>操作命令</p>
</li>
<li><p>断开连接</p>
</li>
</ul>
</li>
</ol>
<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><p>所有的api命令,就是我们对应的上面学习的指令,一个都没有变化!</p>
<blockquote>
<p>事务</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTX</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;10.77.26.23&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.flushDB();</span><br><span class="line"></span><br><span class="line">        JSONObject jsonobject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonobject.put(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        jsonobject.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;qzh&quot;</span>);</span><br><span class="line">		<span class="comment">// 开启事务</span></span><br><span class="line">        Transaction multi = jedis.multi();</span><br><span class="line">        String result = jsonobject.toJSONString();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            multi.set(<span class="string">&quot;user1&quot;</span>, result);</span><br><span class="line">            multi.set(<span class="string">&quot;user2&quot;</span>, result);</span><br><span class="line">            <span class="comment">//int i = 1 / 0; //代码抛出异常事务，执行失败!</span></span><br><span class="line">            multi.exec(); <span class="comment">//执行事务!</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            multi.discard(); <span class="comment">//放弃事务</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user1&quot;</span>));</span><br><span class="line">            System.out.println(jedis.get(<span class="string">&quot;user2&quot;</span>));</span><br><span class="line">            jedis.close(); <span class="comment">//关闭连接</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310201718729.png" alt="image-20210310201718729"></p>
<p>出现异常：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310201752163.png" alt="image-20210310201752163"></p>
<h1 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h1><p>SpringBoot操作数据 : spring-data jpa jdbc mongodb redis !</p>
<p>SpringData也是和SpringBoot齐名的项目 ! SpringData是对操作数据的整合</p>
<p>说明:在SpringBoot2.x之后,原来使用的jedis被替换为了lettuce?</p>
<p>jedis : 采用的直连,多个线程操作的话,是不安全的,如果想要避免不安全的,使用jedis pool 连接池!更像BIO 模式</p>
<p>lettuce : 采用netty ,实例可以再多个线程中进行共享,不存在线程不安全的情况!可以减少线程数据了，更像NIO模式</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310202917954.png" alt="image-20210310202917954"></p>
<p>源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span> </span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span> <span class="comment">// 不存在这个bean才生效。也就是说我们可以自己定义一个redisTemplate来替换这个默认的!</span></span><br><span class="line">	<span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 默认的RedisTemplate 没有过多的设置，redis 对象都是需要序列化!</span></span><br><span class="line">		<span class="comment">// 两个泛型都是object， object 的类型，我们后使用需要强制转换&lt;String， object&gt;</span></span><br><span class="line">		RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span>	<span class="comment">// 由于string是redis中最常使用的类型，所以说单独提出来了一个bean!</span></span><br><span class="line">	<span class="meta">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">		StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">		template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">		<span class="keyword">return</span> template;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>整合测试</p>
</blockquote>
<ol>
<li><p>导入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置连接</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SpringBoot所有的配置类，都有一个 XXXAutoConfiguration 自动配置类    RedisAutoConfiguration</span></span><br><span class="line"><span class="comment"># 自动配置类都会绑定一个xxxProperties配置类,通过这个配置类来绑定配置文件  RedisProperties</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Redis</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisSpringboot02ApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//在企业开发中，我们80%的情况下，都不会使用这个原生的方式去编写代码!</span></span><br><span class="line">		<span class="comment">// RedisUtils; 都是自己编写一个工具类来操作的</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// redisTemplate 操作不同的数据类型，api和我们的指令是- 样的</span></span><br><span class="line">			<span class="comment">// opsForValue 	 操作字符串</span></span><br><span class="line">			<span class="comment">// opsForList	 操作List</span></span><br><span class="line">			<span class="comment">// opsForSet	 操作Set</span></span><br><span class="line">			<span class="comment">// opsForHash	 操作hash</span></span><br><span class="line">			<span class="comment">// opsForZSet	 操作Zset</span></span><br><span class="line">			<span class="comment">// opsForGeo	 操作Geo</span></span><br><span class="line">			<span class="comment">// opsForHyperLogLog	操作HyperLogLog</span></span><br><span class="line">		<span class="comment">//除了进本的操作，我们常用的方法都可以直接通过redisTemplate操作，比如事务，和基本的CRUD</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取Redis的连接对象</span></span><br><span class="line">		<span class="comment">//		RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span></span><br><span class="line">		<span class="comment">//		connection.flushDb();</span></span><br><span class="line">		<span class="comment">//		connection.flushAll();</span></span><br><span class="line"></span><br><span class="line">		redisTemplate.opsForValue().set(<span class="string">&quot;mykey&quot;</span>,<span class="string">&quot;总之就是非常有趣&quot;</span>);</span><br><span class="line">	System.out.println(redisTemplate.opsForValue().get(<span class="string">&quot;mykey&quot;</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310211727171.png" alt="image-20210310211727171"></p>
<p>查看，redis数据库。数据库中的数据是转义字符</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310211838017.png" alt="image-20210310211838017"></p>
</li>
</ol>
<p>查看源码</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310211632288.png" alt="image-20210310211632288"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210310212201460.png" alt="image-20210310212201460"></p>
<p>创建实体类User</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于对象的保存</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210311114748491.png" alt="image-20210311114748491"></p>
<p>实体类实现序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次测试</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210311115047033.png" alt="image-20210311115047033"></p>
<p>自定义RedisTemplete。这是一个固定的模板</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自己定义了一个Redis Template</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一 般直接使用&lt;String, object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 序列化配置</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; objectJackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        objectJackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="comment">// String 的 序列化</span></span><br><span class="line">        StringRedisSerializer stringRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用自定义的RedisTemplete，进行测试。可以发现没有再出现转义字符了</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210311122433921.png" alt="image-20210311122433921"></p>
<h1 id="Redis-conf-配置文件详解"><a href="#Redis-conf-配置文件详解" class="headerlink" title="Redis.conf 配置文件详解"></a>Redis.conf 配置文件详解</h1><p>启动Redis的时候，就通过配置文件来启动！在工作中，一些小小的配置，可以让你脱颖而出！</p>
<blockquote>
<p>Redis不区分大小写</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210312123108165.png" alt="image-20210312123108165"></p>
<blockquote>
<p>可以使用 include 组合多个配置文件</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210312123213923.png" alt="image-20210312123213923"></p>
<blockquote>
<p>网络配置</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210312123715699.png" alt="image-20210312123715699"></p>
<blockquote>
<p>通用配置</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210312124505974.png" alt="image-20210312124505974"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210312124659298.png" alt="image-20210312124659298"></p>
<blockquote>
<p>快照</p>
</blockquote>
<p>持久化，在规定的时间内，执行了多少次操作，则会持久化到<code>rdb文件</code>或者<code>aof文件</code></p>
<p>Redis是内存数据库，如果没有持久化，那么数据断电即失！</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210313170631765.png" alt="image-20210313170631765"></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210313171256632.png" alt="image-20210313171256632" style="zoom:150%;" />

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210313171439622.png" alt="image-20210313171439622"></p>
<blockquote>
<p>主从复制 REPLICATION，在主从复制的进行解释</p>
</blockquote>
<blockquote>
<p>安全 SECURITY</p>
</blockquote>
<p>可以在这里设置redis的命名，默认是没有密码的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt;ping PONG</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass	<span class="comment">#获取 redis的密码</span></span><br><span class="line">1)<span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2)<span class="string">&quot;&quot;</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass <span class="string">&quot;123456&quot;</span>	   <span class="comment">#设置 redis的密码OK</span></span><br><span class="line">127.0.0.1:6379&gt; config get requirepass	<span class="comment">#发现所有的命令都没有权限了</span></span><br><span class="line">(error) NoAUTH Authentication required</span><br><span class="line">127.0.0.1:6379&gt;ping</span><br><span class="line">（error） NOAUTH Authentication required</span><br><span class="line">127.0.0.1:6379&gt;auth 123456	 <span class="comment">#使用密码进行登录！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1)<span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2)<span class="string">&quot;123456&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>客户端 CLIENTS</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210313173849884.png" alt="image-20210313173849884"></p>
<blockquote>
<p>内存管理    MEMORY MANAGEMENT</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210313174237723.png" alt="image-20210313174237723"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210313174724488.png" alt="image-20210313174724488"></p>
<blockquote>
<p>APPEND ONLY 模式 aof配置</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314110739909.png" alt="image-20210314110739909"></p>
<p>具体的配置，我们在 Redis持久化中去给大家详细详解！</p>
<h1 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h1><p>​    Redis是内存数据库，如果不将內存中的数据库状态保存到磁盘，那么一旦Redis服务器进程退出，服务器中的数据库状态也会消失。所以 Redis提供了持久化功能！</p>
<h2 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h2><blockquote>
<p>什么是RDB</p>
</blockquote>
<p>在主从复制中，rdb就是备用了！在从机上面！</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314113012911.png" alt="image-20210314113012911"></p>
<p>​    在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的 snashot 快照，恢复时是将快照文件直接读到内存中。</p>
<p>​    Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何 I/O 操作的。这就确保了极髙的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。我们默认的就是RDB，一般情况下不需要修改这个配置。</p>
<p>​    有时候在生产环境我们会将这个文件进行备份！</p>
<p>​    <code>rdb保存的文件是 dump. rdb。</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314112704917.png" alt="image-20210314112704917"></p>
<p><strong>测试：</strong></p>
<ol>
<li>修改配置文件，关于rdb的操作都可以在这里配置</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314113218780.png" alt="image-20210314113218780"></p>
<ol start="2">
<li><p>向Redis中插入5个键值对</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314114246858.png" alt="image-20210314114246858"></p>
</li>
<li><p>查看是否生成<code>dump.rdb文件</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314114355243.png" alt="image-20210314114355243"></p>
</li>
<li><p>退出Redis在查看，数据是否存在</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314115053513.png" alt="image-20210314115053513"></p>
</li>
</ol>
<blockquote>
<p>触发规则</p>
</blockquote>
<ol>
<li>save的规则满足的情况下，会自动触发rdb</li>
<li>执行 flushall命令，也会触发我们的rdb</li>
<li>退出redis，也会产生rdb文件！</li>
</ol>
<p>备份自动生成一个dump.rdb文件</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314115326734.png" alt="image-20210314115326734"></p>
<blockquote>
<p>如何恢复rdb文件</p>
</blockquote>
<ol>
<li><p>只需要将rdb文件放在我们 redis启动目录就可以，reds启动的时候会自动检查 dump. rdb文件，恢复其中的数据！</p>
</li>
<li><p>查看需要Redis启动目录的位置</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314120047796.png" alt="image-20210314120047796"></p>
</li>
</ol>
<blockquote>
<p>到这里可以知道，Redis默认的配置就已经够用了，但是我们还是需要去学习！</p>
</blockquote>
<p><strong>优点：</strong></p>
<ol>
<li>适合大规模的数据恢复！</li>
<li>对数据的完整性要不高缺点：</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>需要一定的时间间隔进程操作！如果 redis意外宕机了，这个最后一次修改数据就没有的了！</li>
<li>fork进程的时候，会占用一定的内存空间！！</li>
</ol>
<h2 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h2><p>将我们的所有命令都记录下来，恢复的时候就把这个文件全部在执行一遍！</p>
<blockquote>
<p>是什么</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314121255342.png" alt="image-20210314121255342"></p>
<p>​    以曰志的形式来记录每个写操作，将 Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件， redis启动之初会读取该文件重新构建数据，换言之， redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p>
<p><code>AOF保存的是appendonly.aof文件</code></p>
<blockquote>
<p>APPEND ONLY MODE</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314121850627.png" alt="image-20210314121850627"></p>
<p>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly改为yes就开启了aof！</p>
<p>重启Redis就可以生效了</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314122311715.png" alt="image-20210314122311715"></p>
<p>向Redis中插入5个键值对，查看<code>appendonly.aof文件</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314122809933.png" alt="image-20210314122809933"></p>
<p>如果aof文件有错误，这时候 redis是启动不起来的。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314135300962.png" alt="image-20210314135300962"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314135033383.png" alt="image-20210314135033383"></p>
<p>redis 给我们提供了一个工具 <code>redis-check-aof --fix</code>    用来修复aof文件</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314135418963.png" alt="image-20210314135418963"></p>
<p>修复aof文件，其实就是丢弃，错误的内容</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314135753762.png" alt="image-20210314135753762"></p>
<p>如果文件正常，重启就可以直接恢复了！</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314135558497.png" alt="image-20210314135558497"></p>
<blockquote>
<p>重写规则</p>
</blockquote>
<p>aof默认就是文件的无限追加，文件会越来越大！</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314144140678.png" alt="image-20210314144140678"></p>
<p>如果aof文件大于64mb，太大了！fork一个新的进程来将我们的文件进行重写</p>
<blockquote>
<p>优点和缺点</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly no		<span class="comment">#默认是不开启aof模式的，默认是使用rdb方式持久化的，在大部分所有的情况下，rdb完全够用！</span></span><br><span class="line">appendfi1ename <span class="string">&quot;appendonly.aof&quot;</span>		<span class="comment">#持久化的文件的名字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># appendfsync always	#每次修改都会sync。消耗性能</span></span><br><span class="line">appendfsync everysec	<span class="comment">#每秒执行一次sync，可能会丢失这1s的数据！</span></span><br><span class="line"><span class="comment"># appendfsync no	#不执行sync，这个时候操作系统自己同步数据，速度最快！</span></span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ol>
<li>每一次修改都同步，文件的完整性会更加好！</li>
<li>每秒同步一次，可能会丢失一秒的数据</li>
<li>从不同步，效率最高的</li>
</ol>
<p>缺点：</p>
<ol>
<li><p>相对于数据文件来说，aof远远大于rdb，修复的速度也比rdb慢</p>
</li>
<li><p>Aof运行效率也要比rdb慢，所以我们 redis默认的配置就是rdb持久化</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>RDB持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p>
</li>
<li><p>AOF持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以 Redis协议追加保存每次写的操作到文件末尾， Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大</p>
</li>
<li><p>只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</p>
</li>
<li><p>同时开启两种持久化方式在这种情况下，</p>
<ul>
<li>当 redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</li>
<li>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</li>
</ul>
</li>
<li><p>性能建议</p>
<ul>
<li>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留<code>save 900 1</code>这条规则。</li>
<li>如果 Enable aof，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是 AOF rewrite的最后将 rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少 AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。</li>
<li>如果不 Enable aof，仅靠 Master-Slave Replication实现高可用性也可以，能省掉一大笔lO，也减少了 rewrite时带来的系统波动。代价是如果 Master/slave同时倒掉，会丟失十几分钟的数据，启动脚本也要比较两个 Master/ Slave中的RDB文件，载入较新的那个，微博就是这种架构。</li>
</ul>
</li>
</ol>
<h1 id="Redis-发布订阅"><a href="#Redis-发布订阅" class="headerlink" title="Redis 发布订阅"></a>Redis 发布订阅</h1><p>Redis发布订阅（pub/sub）是一种消息通信模式∶发送者（ρub）发送消息，订阅者（sub）接收消息。微信、微博、关注系统</p>
<p>Redis客户端可以订阅任意数量的频道。</p>
<p>订阅发布消息图：</p>
<p>第一个：消息发送者，第二个：频道，第三个：消息订阅者</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314152202021.png" alt="image-20210314152202021" style="zoom:55%;" />

<p>下图展示了频道 channel1，以及订阅这个频道的三个客户端一— client2、cent5和 client1之间的关系</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314152405678.png" alt="image-20210314152405678" style="zoom:80%;" />

<p>当有新消息通过 PUBLISH命令发送给频道 channe1时，这个消息就会被发送给订阅它的三个客户端：</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314152443567.png" alt="image-20210314152443567" style="zoom:75%;" />

<blockquote>
<p>命令</p>
</blockquote>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314153001663.png" alt="image-20210314153001663"></p>
<blockquote>
<p>测试</p>
</blockquote>
<p>订阅端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; SUBSCRIBE qzh	<span class="comment"># 订阅一个频道 kuangshenshuo</span></span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) <span class="string">&quot;subscribe&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">3) (<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待读取推送的信息</span></span><br><span class="line">1) <span class="string">&quot;message&quot;</span>	<span class="comment"># 消息</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span>		<span class="comment"># 频道名称</span></span><br><span class="line">3) <span class="string">&quot;hello qzh&quot;</span>	<span class="comment"># 消息内容</span></span><br><span class="line"></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line">1) <span class="string">&quot;message&quot;</span></span><br><span class="line">2) <span class="string">&quot;qzh&quot;</span></span><br><span class="line">3) <span class="string">&quot;hello redis&quot;</span></span><br></pre></td></tr></table></figure>

<p>发送端：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; PUBLISH qzh <span class="string">&quot;hello qzh&quot;</span>		<span class="comment"># #发布者发布消息到频道！</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH qzh <span class="string">&quot;hello world&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH qzh <span class="string">&quot;hello redis&quot;</span></span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br></pre></td></tr></table></figure>



<blockquote>
<p>原理</p>
</blockquote>
<p>Redis是使用C实现的，通过分析 Redis源码里的 pubsub.C文件，了解发布和订阅机制的底层实现，籍此加深对 Redis的理解。</p>
<p>Redis通过 PUBLISH、 SUBSCR|BE和 PSUBSCR|BE等命令实现发布和订阅功能。</p>
<p>通过 SUBSCRIBE命令订阅某频道后， redis-server里维护了个字典，字典的键就是一个个 频道（channel），而字典的值则是一个链表，链表中保存了所有订阅这个 channel的客户端。 SUBSCRIBE命令的关键，就是将客户端添加到给定 channel的订阅链表中。</p>
<p>通过 PUBLISH命令向订阅者发送消息， redis- server会使用给定的频道作为键，在它所维护的 channel字典中査找记录了订阅这个频道的所有客户端的链表，遍历这个链表，将消息发布给所有订阅者</p>
<p>Pub/sub从字面上理解就是发布（ Publish）与订阅（ Subscribe），在 Redis中，你可以设定对某一个key值进行消息发布及消息订阅，当一个key值上进行了消息发布后，所有订阅它的客户端都会收到相应的消息。这一功能最明显的用法就是用作实时消息系统，比如普通的即时聊天，群聊等功能。</p>
<p><strong>使用场景：</strong></p>
<ol>
<li>实时消息系统</li>
<li>事实聊天！（频道当做聊天室，将信息回显给所有人即可！）</li>
<li>订阅，关注系统都是可以的！</li>
</ol>
<p>稍微复杂的场景我们就会使用消息中间件 MQ</p>
<h1 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>主从复制，是指将一台 Redis服务器的数据，复制到其他的 Redis服务器。前者称为主节点（ master/ leader），后者称为从节点<br>（ slave/ follower）；<code>数据的复制是单向的，只能由主节点到从节点。 Master以写为主，Save以读为主。</code></p>
<p><code>默认情况下，每台 Redis服务器都是主节点；且一个主节点可以有多个从节点（或没有从节点），但一个从节点只能有一个主节点。</code></p>
<p>主从复制的作用主要包括：</p>
<ol>
<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>
<li>故障恢复：当主节点岀现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是-一种服务的冗余</li>
<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写 Redis数据时应用连接主节点，读 redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis服务器的并发量</li>
<li>高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis高可用的基础。</li>
</ol>
<p>一般来说，要将 Redis运用于工程项目中，只使用一台 Redis是万万不能的，原因如下</p>
<ol>
<li>从结构上，单个Reds服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</li>
<li>从容量上，单个 Redis服务器内存容量有限，就算一台Reds服务器内存容量为256G，也不能将所有内存用作Reds存储内存，一般来说，单台Reds最大使用内存不应该超过20G</li>
</ol>
<p>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p>
<p>对于这种场景，我们可以使如下这种架构</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314161908145.png" alt="image-20210314161908145" style="zoom: 70%;" />

<p>主从复制，读写分离！80%的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！</p>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>只配置从库，不用配置主库！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication	<span class="comment"># 查看当前库的信息</span></span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master		<span class="comment"># 角色 master</span></span><br><span class="line">connected_slaves:0	<span class="comment"># 没有从机</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:31aa92263862b7ef56fb481abc8017678390a68c</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:0</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:0</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:0</span><br><span class="line">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>

<p>复制3个配置文件，然后修改对应的信息</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314171115447.png" alt="image-20210314171115447"></p>
<ol>
<li><p>端口号</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314171217560.png" alt="image-20210314171217560"></p>
</li>
<li><p>pid名字</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314171258424.png" alt="image-20210314171258424"></p>
</li>
<li><p>log文件名字</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314171316807.png" alt="image-20210314171316807"></p>
</li>
<li><p>rdb文件名字</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314171351335.png" alt="image-20210314171351335"></p>
<p>修改完毕之后，启动我们的3个redis服务器，可以通过进程信息查看！</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314173509029.png" alt="image-20210314173509029"></p>
<h2 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h2><p>架构图：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314211301461.png" alt="image-20210314211301461"></p>
<p><code>默认情况下，每台 Redis服务器都是主节点</code>。我们一般情况下只用配置从机就好了！</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314175020864.png" alt="image-20210314175020864"></p>
<p>认老大！一主（79）二从（80,81）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 6380从机配置</span></span><br><span class="line">127.0.0.1:6380&gt; SLAVEOF 127.0.0.1 6379	<span class="comment">#SLAVEOF host 6379 找谁当自己的老大即主机！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6380&gt; info replication </span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">ro1e:s1ave	<span class="comment">#当前角色是从机</span></span><br><span class="line">master_host：127.0.0.1	<span class="comment">#可以的看到主机的信息</span></span><br><span class="line">master_port：6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago：3</span><br><span class="line">master_sync_in_progress:O </span><br><span class="line">lave_repl_offset：14</span><br><span class="line">slave_priority：100</span><br><span class="line">slave_read_only：1</span><br><span class="line">connected slaves：0</span><br><span class="line">master_replid:2ceb068348e13be71661c9627bd1c3a65a621a99 </span><br><span class="line">master_replid2:00000000000000000000000000000000000</span><br><span class="line">master_repl_offset：14</span><br><span class="line">second_repl_offset：-1</span><br><span class="line">repl backlog active：1</span><br><span class="line">repl_backlog_size：1048576</span><br><span class="line">repl_backlog_first_byteoffset：1</span><br><span class="line">repl_backlog_histlen：14</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6381从机配置</span></span><br><span class="line">127.0.0.1:6381&gt; SLAVEOF 127.0.0.1 6379	<span class="comment">#SLAVEOF host 6379 找谁当自己的老大即主机！</span></span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6381&gt; info replication </span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">ro1e:s1ave	<span class="comment">#当前角色是从机</span></span><br><span class="line">master_host：127.0.0.1	<span class="comment">#可以的看到主机的信息</span></span><br><span class="line">master_port：6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago：5</span><br><span class="line">master_sync_in_progress:O </span><br><span class="line">lave_repl_offset：14</span><br><span class="line">slave_priority：100</span><br><span class="line">slave_read_only：1</span><br><span class="line">connected slaves：0</span><br><span class="line">master_replid:2ceb068348e13be71661c9627bd1c3a65a621a99 </span><br><span class="line">master_replid2:00000000000000000000000000000000000</span><br><span class="line">master_repl_offset：14</span><br><span class="line">second_repl_offset：-1</span><br><span class="line">repl backlog active：1</span><br><span class="line">repl_backlog_size：1048576</span><br><span class="line">repl_backlog_first_byteoffset：1</span><br><span class="line">repl_backlog_histlen：14</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在主机中查看</span></span><br><span class="line">27.0.0. 1:6379&gt;info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected slaves：2	<span class="comment"># 多了从机的配置</span></span><br><span class="line">slave0：ip-27.0.0.1,port=6380,state=online,offset=1538,lag=0	<span class="comment"># 从机的信息</span></span><br><span class="line">slave1：ip-27.0.0.1,port=6381,state=online,offset=1538,lag=1	<span class="comment"># 从机的信息</span></span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid：2ceb068348e13be71661c9627bd1c3a65a621a99</span><br><span class="line">master_replid2:00000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:1358</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size：1048576</span><br><span class="line">epl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:1358</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314181409221.png" alt="image-20210314181409221"></p>
<p>真实的从主配置应该在配置文件中配置，这样的话是永久的，我们这里使用的是命令，暂时的</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314182055949.png" alt="image-20210314182055949"></p>
<blockquote>
<p>细节</p>
</blockquote>
<p>主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！</p>
<p>主机写：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314182528939.png" alt="image-20210314182528939"></p>
<p>从机只能读取内容！</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314182610859.png" alt="image-20210314182610859"></p>
<p>当主机关闭了，从机依旧连接到主机的，可以进行读操作。但是没有写操作，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！</p>
<p>如果是使用命令行，来配置的主从，这个时候如果重启了，从机就会变回主机！只要重新变为从机，立马就会从主机中获取值！</p>
<blockquote>
<p>复制原理</p>
</blockquote>
<p>Slave启动成功连接到 master后会发送一个sync同步命令</p>
<p>Master接到命令，启动后台的存盘进程，同时收集所有用于修改数据集命令，在后台进程执行完毕之后，<code> master将传送 整个数据文件到slave，并完成一次完全同步。</code></p>
<p><code>全量复制：而 slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</code></p>
<p><code>增量复制：Master继续将所有新的收集到的修改命令依次传给save，完成同步</code></p>
<p>但是只要是重新连接 master，一次完全同步（全量复制）将被自动执行！我们的数据一定可以在从机中看到！</p>
<blockquote>
<p>层层链路</p>
</blockquote>
<p>上一个M链接下一个S！</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314210839905.png" alt="image-20210314210839905"></p>
<p>这时候也可以完成我们的主从复制！80会把从79接收的修改命令，发给81，完成同步</p>
<blockquote>
<p>如果没有老大了，这个时候能不能选择一个老大出来呢？手动！</p>
</blockquote>
<p><code>谋朝篡位</code></p>
<p>如果主机断开了连接，我们可以使用<code>SLAVEOF no one</code>让自己变成主机！其他的节点就可以手动连接到最新的这个主节点（手<br>动）！如果这个时候老大修复了，那就要重新配置了，此时它是没有从机的</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210314212434218.png" alt="image-20210314212434218"></p>
<h2 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h2><p>（自动选举老大的模式）</p>
<blockquote>
<p>概述</p>
</blockquote>
<p>主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费时费力，还会造成<br>段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑<strong>哨兵模式</strong>。 Redis从2.8开始正式提供了 Sentinel（哨<br>兵）架构来解决这个问题</p>
<p>谋朝篡位的自动版，能够后台监控主机是否故暲，<code>如果故障了根据投票数自动将从库转换为主库</code>。</p>
<p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是—个独立的进程，作为进程，它会独立运行。<strong>其原理是哨兵通</strong><br><strong>过发送命令，等待 Redis服务器响应，从而监控运行的多个 Redis实例的状态。</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316111510028.png" alt="image-20210316111510028"></p>
<p>这里的哨兵有两个作用</p>
<ul>
<li><p>通过发送命令，让 Redis服务器返回监控其运行状态，包括主服务器和从服务器。</p>
</li>
<li><p>当哨兵监测到 master宕机，会自动将 slave切换成 master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机</p>
</li>
</ul>
<p>然而一个哨兵进程对 Redis服务器进行监控，可能会岀现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316111538710.png" alt="image-20210316111538710"></p>
<p>​    假设主服务器宕机哨异1先检测到这个结果，系统并不会马上进行failover【故障转移】过程，仅仅是悄兵1观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>当面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行 failover 【故障转移】操作。切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong></p>
<blockquote>
<p>测试</p>
</blockquote>
<p>我们目前的状态是一主二从！</p>
<ol>
<li><p>配置哨兵配置文件 sentinel.conf</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sentinel monitor 主服务器的名称 host port 1</span></span><br><span class="line">sentinel monitor myredis 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>

<p>后面的数字1，代表主机挂了， 投票看让哪个Slave接替成为主机，票数最多的，就会成为主机！</p>
</li>
<li><p>启动sentinel</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316115326974.png" alt="image-20210316115326974"></p>
</li>
<li><p>关闭主机<code>SHUTDOWN</code>，查看从机信息</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316115928315.png" alt="image-20210316115928315"></p>
</li>
<li><p>等一会，查看sentinel 日志</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316120247512.png" alt="image-20210316120247512"></p>
</li>
<li><p>查看81的信息</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316120407668.png" alt="image-20210316120407668"></p>
</li>
</ol>
<p>如果 Master节点断开了，这个时候就会从从机中随机选择一个服务器作为Master！（这里面有一个投票算法！）<strong>如果主机此时回来了，只能归并到新的主机下，当做从机，这就是哨兵模式的规则！</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316135347989.png" alt="image-20210316135347989"></p>
<blockquote>
<p>优缺点</p>
</blockquote>
<p>优点：</p>
<ol>
<li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</li>
<li>主从可以切换，故障可以转移，系统的可用性就会更好3</li>
<li>哨兵模式就是主从模式的升级，手动到自动，更加健壮！</li>
</ol>
<p>缺点：</p>
<ol>
<li>Redis不好啊在线扩容的，集群容量一旦到达上限，在线扩容就十分麻烦</li>
<li>实现哨兵模式的配置其实是很麻烦的，里面有很多选择！</li>
</ol>
<blockquote>
<p>哨兵模式的全部配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example sentinel.conf</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel实例运行的端口 默认26379</span></span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel的工作目录</span></span><br><span class="line">dir /tmp</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 哨兵sentinel监控的redis主节点的 ip port </span></span><br><span class="line"><span class="comment"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span></span><br><span class="line"><span class="comment"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span></span><br><span class="line"><span class="comment"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 1</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span></span><br><span class="line"><span class="comment"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span></span><br><span class="line"><span class="comment"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span></span><br><span class="line"><span class="comment"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span></span><br><span class="line">这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><br><span class="line">可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"><span class="comment"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span></span><br><span class="line"><span class="comment">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span></span><br><span class="line"><span class="comment">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span></span><br><span class="line"><span class="comment">#3.当想要取消一个正在进行的failover所需要的时间。  </span></span><br><span class="line"><span class="comment">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span></span><br><span class="line"><span class="comment"># 默认三分钟</span></span><br><span class="line"><span class="comment"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"><span class="comment"># SCRIPTS EXECUTION</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span></span><br><span class="line"><span class="comment">#对于脚本的运行结果有以下规则：</span></span><br><span class="line"><span class="comment">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span></span><br><span class="line"><span class="comment">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span></span><br><span class="line"><span class="comment">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span></span><br><span class="line"><span class="comment">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span></span><br><span class="line"><span class="comment">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span></span><br><span class="line"><span class="comment">#一个是事件的类型，</span></span><br><span class="line"><span class="comment">#一个是事件的描述。</span></span><br><span class="line"><span class="comment">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span></span><br><span class="line"><span class="comment">#通知脚本</span></span><br><span class="line"><span class="comment"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 客户端重新配置主节点参数脚本</span></span><br><span class="line"><span class="comment"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span></span><br><span class="line"><span class="comment"># 以下参数将会在调用脚本时传给脚本:</span></span><br><span class="line"><span class="comment"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class="line"><span class="comment"># 目前&lt;state&gt;总是“failover”,</span></span><br><span class="line"><span class="comment"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span></span><br><span class="line"><span class="comment"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span></span><br><span class="line"><span class="comment"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span></span><br><span class="line"><span class="comment"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure>



<h1 id="Redis缓存穿透和雪崩（面试高频，工作常用）"><a href="#Redis缓存穿透和雪崩（面试高频，工作常用）" class="headerlink" title="Redis缓存穿透和雪崩（面试高频，工作常用）"></a>Redis缓存穿透和雪崩（面试高频，工作常用）</h1><blockquote>
<p>服务的高可用问题</p>
</blockquote>
<p>​    Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据査询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p>
<p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316141346566.png" alt="image-20210316141346566"></p>
<h2 id="缓存穿透（查不到）"><a href="#缓存穿透（查不到）" class="headerlink" title="缓存穿透（查不到）"></a>缓存穿透（查不到）</h2><blockquote>
<p>概念</p>
</blockquote>
<p>​    缓存穿透的概念很简单，用户想要査询一个数据，发现 redis内存数据库没有，也就是缓存没有命中，于是冋持久层数据库査询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（比如：秒杀场景！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就出现了缓存穿透。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>布隆过滤器</strong></p>
<p>​    布隆过滤器是一种数据结构，对所有可能査询的参数以hash形式存储，客户端请求先在控制层先进行校验，不符合则丟弃，从而避免了对底层存储系统的查询压力</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316143044061.png" alt="image-20210316143044061" style="zoom:47%;" />

<p><strong>绶存空对象</strong></p>
<p>​    当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源；</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316143201616.png" alt="image-20210316143201616"></p>
<p>但是这种方法会存在两个问题</p>
<ol>
<li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键</li>
<li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</li>
</ol>
<h2 id="缓存击穿（查太多了）"><a href="#缓存击穿（查太多了）" class="headerlink" title="缓存击穿（查太多了）"></a>缓存击穿（查太多了）</h2><blockquote>
<p>概述</p>
</blockquote>
<p>​    这里需要注意和缓存穿透的区别，缓存击穿，是指一个key非常热门，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p>
<p>​    当某个key在过期的瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<ol>
<li><p><strong>设置热点数据永不过期</strong></p>
<p>​    从缓存层面来看，没有设置过期时间，所以不会出现热点key过期后产生的问题。</p>
</li>
<li><p><strong>加互斥锁</strong></p>
<p>​    分布式锁：使用分布式锁，保证对于每个key同时只有—个线程去査询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</p>
</li>
</ol>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><blockquote>
<p>概念</p>
</blockquote>
<p>缓存雪崩，是指在某一个时间段，缓存集中过期失效。Redis宕机！</p>
<p>产生雪崩的原因之一，比如，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存—个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问査询，都落到了数据库上，对于数据库而言，就会产生周期性的压力波峰。于是所有的请求都会达到存储层，存储层的调用量会暴增，造成存储层也会挂掉的情况。</p>
<img src="https://gitee.com/huastaros/image/raw/main/post/Redis/image-20210316145323541.png" alt="image-20210316145323541" style="zoom:90%;" />

<p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是缓存服务器某个节点宕机或断网。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p><strong>redis高可用</strong></p>
<p>这个思想的含义是，既然 redis有可能挂掉，那我多增设几台 redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。</p>
<p><strong>限流降级</strong></p>
<p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>
<p><strong>数据预热</strong></p>
<p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Nosql</tag>
      </tags>
  </entry>
</search>
