<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringBoot01:Hello,World</title>
    <url>/HuaStarOS.github.io/2020/12/17/SpringBoot01-Hello-World/</url>
    <content><![CDATA[<h2 id="SpringBoot是什么"><a href="#SpringBoot是什么" class="headerlink" title="SpringBoot是什么"></a>SpringBoot是什么</h2><hr>
<p>​    学过javaweb的知道，开发一个web应用，从最初开始就是写一个Servlet结合Tomcat, 然后再配置Servlet的请求地址，是要经历特别多的步骤；后来就用了框架SSH，再后来是SSM，到了现在的SpringBoot。</p>
<p>​    好，那什么是SpringBoot呢，就是一个javaweb的开发框架，和SpringMVC类似，对比其他javaweb框架的好处，官方说法是<strong>简化开发</strong>，<strong>约定大于配置</strong>，  **you can “just run”**，能迅速的开发web应用，几行代码开发一个http接口。</p>
<p>​    所有的技术框架的发展似乎都遵循了一条主线规律：从一个复杂应用场景 衍生 一种规范框架，人们只需要进行各种配置而不需要自己去实现它，这时候强大的配置功能成了优点；发展到一定程度之后，人们根据实际生产应用情况，选取其中实用功能和设计精华，重构出一些轻量级的框架；之后为了提高开发效率，嫌弃原先的各类配置过于麻烦，于是开始提倡<strong>“约定大于配置”</strong>，进而衍生出一些一站式的解决方案。</p>
<p>​     <strong>这就是Java企业级应用-&gt;J2EE-&gt;spring-&gt;springboot的过程。</strong></p>
<p>​     随着 Spring 不断的发展，涉及的领域越来越多，项目整合开发需要配合各种各样的文件，慢慢变得不那么易用简单，违背了最初的理念，各种配置文件配到人头秃。Spring Boot 正是在这样的一个背景下被抽象出来的开发框架，目的为了让大家更容易的使用 Spring 、更容易的集成各种常用的中间件、开源软件；</p>
<p>​     Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等），Spring Boot 应用中这些第三方库几乎可以零配置的开箱即用。</p>
<p>​    简单来说就是SpringBoot其实不是什么新的框架，它默认配置了很多框架的使用方式，就像maven整合了所有的jar包，spring boot整合了所有的框架 。是简化Spring应用开发的一个框架；整个Spring技术栈的一个大整合；J2EE开发的一站式解决方案；</p>
<h4 id="SpringBoot的优点"><a href="#SpringBoot的优点" class="headerlink" title="SpringBoot的优点"></a>SpringBoot的优点</h4><ul>
<li><p>可以创建独立的Spring应用程序，并且基于其Maven或Gradle插件，可以创建可执行的JARs和WARs；</p>
</li>
<li><p>内嵌Tomcat或Jetty等Servlet容器；</p>
</li>
<li><p>提供自动配置的“starter”项目对象模型（POMS）以简化Maven配置；</p>
</li>
<li><p>尽可能自动配置Spring容器；</p>
</li>
<li><p>提供准备好的特性，如指标、健康检查和外部化配置；</p>
</li>
<li><p>绝对没有代码生成，不需要XML配置。</p>
</li>
</ul>
<h2 id="Hello-Wrold"><a href="#Hello-Wrold" class="headerlink" title="Hello Wrold"></a>Hello Wrold</h2><hr>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>​    我们将学习如何快速的创建一个Spring Boot应用，并且实现一个简单的Http请求处理。通过这个例子对Spring Boot有一个初步的了解，体验其结构简单、开发快速的特性。</p>
<p><code>环境准备</code></p>
<ul>
<li>java version 1.8</li>
<li>Maven-3.6.1</li>
<li>SpringBoot 2.x 最新版(现在最新是2.4.1)   </li>
</ul>
<p><code>开发工具</code></p>
<ul>
<li>IDEA 2020.1</li>
</ul>
<h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>项目创建方式一：使用Spring Initializr 的 Web页面创建项目</p>
<ol>
<li><p>打开  <a href="https://start.spring.io/">https://start.spring.io/</a></p>
</li>
<li><p>填写项目信息</p>
</li>
<li><p>点击”Generate Project“按钮生成项目；下载此项目</p>
</li>
<li><p>解压项目包，并用IDEA以Maven项目导入，一路下一步即可，直到项目导入完毕。</p>
</li>
<li><p>如果是第一次使用，可能速度会比较慢，包比较多、需要耐心等待一切就绪。</p>
</li>
</ol>
<p>项目创建方式二：使用IDEA的直接创建项目</p>
<ol>
<li><p>创建一个新项目</p>
</li>
<li><p>选择spring initalizr ， 可以看到默认就是去官网的快速构建工具那里实现</p>
</li>
<li><p>填写项目信息</p>
</li>
<li><p>选择初始化的组件（初学勾选 Web 即可）</p>
</li>
<li><p>填写项目路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/project.png"></p>
</li>
</ol>
<h4 id="pom-xml文件分析"><a href="#pom-xml文件分析" class="headerlink" title="pom.xml文件分析"></a>pom.xml文件分析</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-01-helloworld<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>springboot-01-helloworld<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>qzh first springboot project<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web模块启动器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--springBoot单元测试--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--打包插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="主程序类"><a href="#主程序类" class="headerlink" title="主程序类"></a>主程序类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qzh;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qzh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@SpringBootApplication</span> 这个注解来标识一个类，说明这个一个Spring Boot应用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot01HelloworldApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//启动Spring Boot 应用</span></span><br><span class="line">        SpringApplication.run(Springboot01HelloworldApplication.class,  args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="编写controller类，接收请求"><a href="#编写controller类，接收请求" class="headerlink" title="编写controller类，接收请求"></a>编写controller类，接收请求</h4><ol>
<li>在主程序的同级目录下，新建一个controller包，一定要在同级目录下，否则识别不到</li>
<li>在包中新建一个HelloController类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p>​    通过main方法启动项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/start_project.png"></p>
<p>访问<a href="http://localhost:8080/hello/hello%EF%BC%9A">http://localhost:8080/hello/hello：</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/project_hello.jpg"></p>
<h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><hr>
<p>如何更改启动时显示的字符拼成的字母，SpringBoot呢？也就是 banner 图案；</p>
<p>只需一步：到项目下的 resources 目录下新建一个banner.txt 即可。</p>
<p>图案可以到：<a href="https://www.bootschool.net/ascii-art%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E7%94%9F%E6%88%90%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8B%B7%E8%B4%9D%E5%88%B0%E6%96%87%E4%BB%B6%E4%B8%AD%E5%8D%B3%E5%8F%AF">https://www.bootschool.net/ascii-art这个网站生成，然后拷贝到文件中即可</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/banner.jpg"></p>
<p>启动项目</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/SpringBoot_HelloWorld/banner_start.jpg"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​    这是我第一次发布自己的技术博客，可能有些不足的地方。希望大家多多包涵。一起加油。</p>
<p>​    有些同学可能想知道我为什么没有先发关于SSM框架的博客。主要是SSM是我之前学习的，现在在学习SpringBoot，不过学习SSM的时候我都是手写笔记。在之后我会把SSM的博客也会慢慢发上来</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>后端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记01---什么是微服务架构</title>
    <url>/HuaStarOS.github.io/2021/01/04/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h2 id="什么是微服务架构"><a href="#什么是微服务架构" class="headerlink" title="什么是微服务架构"></a>什么是微服务架构</h2><p>​    “微服务架构”——这是一种“软件开发架构“。一种新的架构形式，我们在此引用ThoughtWorks 公司的首席科学家 <strong>Martin Fowler</strong> 于2014年提出的一段话：</p>
<p>​    原文：<a href="https://martinfowler.com/articles/microservices.html">https://martinfowler.com/articles/microservices.html</a></p>
<p>​    汉化：<a href="https://blog.csdn.net/u013970991/article/details/53333921">https://blog.csdn.net/u013970991/article/details/53333921</a></p>
<p>​     微服务架构这种开发方法，<strong>是以开发一组小型服务的方式来开发一个独立的应用系统。其中每个小型服务都运行在自己的进程中，并采用HTTP资源API这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务，我们仅做最低限度的集中管理。</strong></p>
<p>​    上面这段话句句都是重点，可以说一句话就是一个技术点，</p>
<ol>
<li>比如<code>是以开发一组小型服务的方式来开发一个独立的应用系统</code>：指的就是用Spring Boot开发一个一个的微服务项目(即Spring Boot项目)。</li>
<li><code>其中每个小型服务都运行在自己的进程中</code>：指的就是每个小型服务都是相互独立的，互不影响。无论是在开发阶段或部署阶段都是独立的。不像我们之前的<strong>单体应用</strong>所有服务都是跑在一个进程里面当一个服务挂了整个应用都会出问题。</li>
<li><code>并采用HTTP资源API这样轻量的机制来相互通信</code>：指的就是每个小型服务要相互通信是采用<strong>HTTP</strong>来进行通信。要把所有微服务都能相互通信这样才能来构成一个完整的应用，通常采用基于<strong>HTTP</strong>协议的通信框架</li>
<li><code>这些服务围绕业务功能进行构建</code>：单一职责原则，每个微服务只负责一个业务功能</li>
<li><code>并能通过全自动的部署机制来进行独立部署</code>：<strong>全自动的部署机制</strong> 采用一站式的解决方案Spring Cloud进行部署。<strong>独立部署</strong> 一个微服务就是一个小项目可以直接运行起来。</li>
</ol>
<p>​    微服务化的核心就是将传统的一站式应用，根据业务拆分成一个一个的服务，彻底地去耦合，每一个微服务提供单个业务功能的服务，一个服务做一件事情，从技术角度看就是一种小而独立的处理过程，类似进程的概念，能够自行单独启动或销毁，拥有自己独立的数据库。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/microservice_framework.jpg"></p>
<h2 id="微服务架构与微服务"><a href="#微服务架构与微服务" class="headerlink" title="微服务架构与微服务"></a>微服务架构与微服务</h2><h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><p>​       一种新的架构形式，Martin Fowler 于2014年提出。</p>
<p>​       是以开发一组小型服务的方式来开发一个独立的应用系统。其中每个小型服务都运行在自己的进程中，并采用HTTP资源API这样轻量的机制来相互通信。这些服务围绕业务功能进行构建，并能通过全自动的部署机制来进行独立部署。这些微服务可以使用不同的语言来编写，并且可以使用不同的数据存储技术。对这些微服务，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具**(如Maven)**对其进行构建。</p>
<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>​        强调的是服务的大小，它关注的是某一个点，是具体解决某一个问题/提供落地对应服务的一个服务应用，狭义的看，可以看作是IDEA中的一个个微服务工程，或者 Model。IDEA 工具里面使用Maven开发的一个个独立的小Model，它具体是使用Spring Boot开发的一个小模块，专业的事情交给专业的模块来做，一个模块就做着一件事情。强调的是一个个的个体，每个个体完成一个具体的任务或者功能。</p>
<h2 id="微服务架构优缺点"><a href="#微服务架构优缺点" class="headerlink" title="微服务架构优缺点"></a>微服务架构优缺点</h2><p>​    <strong>优点</strong></p>
<ul>
<li>单一职责原则；</li>
<li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li>
<li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li>
<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的；</li>
<li>微服务能使用不同的语言开发；</li>
<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li>
<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li>
<li>微服务允许利用和融合最新技术；</li>
<li><strong>微服务只是业务逻辑的代码，不会和HTML，CSS，或其他的界面混合;</strong></li>
<li><strong>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</strong></li>
</ul>
<p>​    <strong>缺点</strong></p>
<ul>
<li>开发人员要处理分布式系统的复杂性；</li>
<li>多服务运维难度，随着服务的增加，运维的压力也在增大；</li>
<li>系统部署依赖问题；</li>
<li>服务间通信成本问题；</li>
<li>数据一致性问题；</li>
<li>系统集成测试问题；</li>
<li>性能和监控问题；</li>
</ul>
<h2 id="微服务框架4个核心问题"><a href="#微服务框架4个核心问题" class="headerlink" title="微服务框架4个核心问题"></a>微服务框架4个核心问题</h2><ol>
<li><p><strong>服务很多，客户端怎么访问？</strong>     API 网关</p>
</li>
<li><p><strong>服务很多，服务之间怎么通信？</strong> HTTP,RPC通信</p>
</li>
<li><p><strong>服务这么多，这么治理？</strong>             注册和发现</p>
</li>
<li><p>**服务崩了怎么办？ **                        熔断机制</p>
</li>
</ol>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>​    <strong>Spring Cloud</strong> 是微服务架构的<strong>一站式解决方案</strong> 。<strong>Spring Cloud是一种生态！</strong></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud-process.png"></p>
<h3 id="什么是Spring-Cloud"><a href="#什么是Spring-Cloud" class="headerlink" title="什么是Spring Cloud"></a>什么是Spring Cloud</h3><p>​    Spring官网：<a href="https://spring.io/">https://spring.io/</a></p>
<p>​    Spring Cloud是关注全局的微服务协调治理框架，它将Spring Boot开发的一个个单体微服务整合并管理起来，为各个微服务之间提供例如：配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、竞争选举、分布式会话、集群等等集成服务。Spring Cloud并没有重复造轮子，它只是将目前各家公司开发比较成熟，经得起考验的服务框架整合起来。屏蔽掉了复杂的配置和实现原理。<strong>给开发者留出一套简单易用，容易部署和维护的分布式系统开发包</strong></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud-platform.svg"></p>
<h3 id="Spring-Cloud特性"><a href="#Spring-Cloud特性" class="headerlink" title="Spring Cloud特性"></a>Spring Cloud特性</h3><ul>
<li>Distributed/versioned configuration  分布式/版本配置</li>
<li>Service registration and discovery  服务注册和发现</li>
<li>Routing 路由</li>
<li>Service-to-service calls   服务之间服务的调用</li>
<li>Load balancing  负载均衡</li>
<li>Circuit Breakers 断路器</li>
<li>Global locks 全局锁</li>
<li>Leadership election and cluster state  竞争选举和集群状态</li>
<li>Distributed messaging 分布式消息管理</li>
</ul>
<h3 id="三种主流的解决方案"><a href="#三种主流的解决方案" class="headerlink" title="三种主流的解决方案"></a>三种主流的解决方案</h3><ol>
<li>Spring cloud NetFlix</li>
</ol>
<ol start="2">
<li>Apache Dubbo Zookeeper 这个方案并不完善</li>
</ol>
<ol start="3">
<li>Spring cloud Alibaba</li>
</ol>
<h2 id="微服务技术栈有那些？"><a href="#微服务技术栈有那些？" class="headerlink" title="微服务技术栈有那些？"></a>微服务技术栈有那些？</h2><table>
<thead>
<tr>
<th align="center"><strong>微服务技术条目</strong></th>
<th align="center">落地技术</th>
</tr>
</thead>
<tbody><tr>
<td align="center">服务开发</td>
<td align="center">SpringBoot、Spring、SpringMVC等</td>
</tr>
<tr>
<td align="center">服务配置与管理</td>
<td align="center">Netfix公司的Archaius、阿里的Diamond等</td>
</tr>
<tr>
<td align="center">服务注册与发现</td>
<td align="center">Eureka、Consul、Zookeeper等</td>
</tr>
<tr>
<td align="center">服务调用</td>
<td align="center">Rest、PRC、gRPC</td>
</tr>
<tr>
<td align="center">服务熔断器</td>
<td align="center">Hystrix、Envoy等</td>
</tr>
<tr>
<td align="center">负载均衡</td>
<td align="center">Ribbon、Nginx等</td>
</tr>
<tr>
<td align="center">服务接口调用(客户端调用服务的简化工具)</td>
<td align="center">Fegin等</td>
</tr>
<tr>
<td align="center">消息队列</td>
<td align="center">Kafka、RabbitMQ、ActiveMQ等</td>
</tr>
<tr>
<td align="center">服务配置中心管理</td>
<td align="center">SpringCloudConfig、Chef等</td>
</tr>
<tr>
<td align="center">服务路由(API网关)</td>
<td align="center">Zuul、GateWay等</td>
</tr>
<tr>
<td align="center">服务监控</td>
<td align="center">Zabbix、Nagios、Metrics、Specatator等</td>
</tr>
<tr>
<td align="center">全链路追踪</td>
<td align="center">Zipkin、Brave、Dapper等</td>
</tr>
<tr>
<td align="center">数据流操作开发包</td>
<td align="center">SpringCloud Stream(封装与Redis，Rabbit，Kafka等发送接收消息)</td>
</tr>
<tr>
<td align="center">时间消息总栈</td>
<td align="center">SpringCloud Bus</td>
</tr>
<tr>
<td align="center">服务部署</td>
<td align="center">Docker、OpenStack、Kubernetes等</td>
</tr>
</tbody></table>
<h2 id="关于Cloud各种组件的停更-升级-替换"><a href="#关于Cloud各种组件的停更-升级-替换" class="headerlink" title="关于Cloud各种组件的停更/升级/替换"></a>关于Cloud各种组件的停更/升级/替换</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud01/1.jpg"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记---第一个程序</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是MVVM</h2><p>​    MVVM（Model-View-ViewModel）是一种软件设计模式，由微软WPF（用于替代WinForm，以前就是用这个技术开发桌面应用程序的）和Silverlight（类似于Java Applet，简单点说就是在浏览器上运行WPF）的架构师Ken Cooper和Ted Peters开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。由John Gossman（同样也是WPF和Sliverlight的架构师）与2005年在他的博客上发表。</p>
<p>  MVVM源自于经典的MVC（Model-View-Controller）模式。MVVM的核心是ViewModel层，负责转换Model中的数据对象来让数据变得更容易管理和使用。其作用如下：</p>
<ul>
<li><p>该层向上与视图层进行双向数据绑定</p>
</li>
<li><p>向下与Model层通过接口请求进行数据交互</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/mvvm.jpg"></p>
</li>
</ul>
<hr>
<h2 id="为什么要使用MVVM"><a href="#为什么要使用MVVM" class="headerlink" title="为什么要使用MVVM"></a>为什么要使用MVVM</h2><p>MVVM模式和MVC模式一样，主要目的是分离视图（View）和模型（Model），有几大好处</p>
<ul>
<li><strong>低耦合</strong>：视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。</li>
<li><strong>可复用</strong>：你可以把一些视图逻辑放在一个ViewModel里面，让很多View重用这段视图逻辑。</li>
<li><strong>独立开发</strong>：开发人员可以专注于业务逻辑和数据的开发（ViewMode），设计人员可以专注于页面设计。</li>
<li><strong>可测试</strong>：界面素来是比较难以测试的，而现在测试可以针对ViewModel来写。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/mvvm2.jpg"></p>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>  View是视图层， 也就是用户界面。前端主要由HTML和CSS来构建， 为了更方便地展现vi ew Model或者Model层的数据， 已经产生了各种各样的前后端模板语言， 比如FreeMarker，Thymeleaf等等， 各大MVVM框架如Vue.js.Angular JS， EJS等也都有自己用来构建用户界面的内置模板语言。</p>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>  Model是指数据模型， 泛指后端进行的各种业务逻辑处理和数据操控， 主要围绕数据库系统展开。这里的难点主要在于需要和前端约定统一的接口规则</p>
<h3 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h3><p>  ViewModel是由前端开发人员组织生成和维护的视图数据层。在这一层， 前端开发者对从后端获取的Model数据进行转换处理， 做二次封装， 以生成符合View层使用预期的视图数据模型。<br>  需要注意的是View Model所封装出来的数据模型包括视图的状态和行为两部分， 而Model层的数据模型是只包含状态的</p>
<ul>
<li>比如页面的这一块展示什么，那一块展示什么这些都属于视图状态(展示)</li>
<li>页面加载进来时发生什么，点击这一块发生什么，这一块滚动时发生什么这些都属于视图行为(交互)</li>
</ul>
<p>  视图状态和行为都封装在了View Model里。这样的封装使得View Model可以完整地去描述View层。由于实现了双向绑定， View Model的内容会实时展现在View层， 这是激动人心的， 因为前端开发者再也不必低效又麻烦地通过操纵DOM去更新视图。<br>  MVVM框架已经把最脏最累的一块做好了， 我们开发者只需要处理和维护View Model， 更新数据视图就会自动得到相应更新，真正实现<code>事件驱动编程</code>。<br>  View层展现的不是<code>Model</code>层的数据， 而是<code>ViewModel</code>的数据， 由<code>ViewModel</code>负责与<code>Model</code>层交互， 这就<strong>完全解耦了View层和Model层， 这个解耦是至关重要的， 它是前后端分离方案实施的重要一环。</strong></p>
<h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>​    Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<h3 id="MVVM模式的实现者"><a href="#MVVM模式的实现者" class="headerlink" title="MVVM模式的实现者"></a>MVVM模式的实现者</h3><ul>
<li>Model：模型层， 在这里表示JavaScript对象</li>
<li>View：视图层， 在这里表示DOM(HTML操作的元素)</li>
<li>ViewModel：连接视图和数据的中间件， Vue.js就是MVVM中的View Model层的实现者</li>
</ul>
<p>  在MVVM架构中， 是不允许数据和视图直接通信的， 只能通过ViewModel来通信， 而View Model就是定义了一个Observer观察者</p>
<ul>
<li>ViewModel能够观察到数据的变化， 并对视图对应的内容进行更新</li>
<li>ViewModel能够监听到视图的变化， 并能够通知数据发生改变</li>
</ul>
<p>  至此， 我们就明白了， Vue.js就是一个MV VM的实现者， 他的核心就是实现了DOM监听与数据绑定</p>
<h3 id="为什么要使用Vue-js"><a href="#为什么要使用Vue-js" class="headerlink" title="为什么要使用Vue.js"></a>为什么要使用Vue.js</h3><ul>
<li>轻量级， 体积小是一个重要指标。Vue.js压缩后有只有20多kb(Angular压缩后56kb+，React压缩后44kb+)</li>
<li>移动优先。更适合移动端， 比如移动端的Touch事件</li>
<li>易上手，学习曲线平稳，文档齐全</li>
<li>吸取了Angular(模块化) 和React(虚拟DOＭ) 的长处， 并拥有自己独特的功能，如：计算属性</li>
<li>开源，社区活跃度高</li>
<li>……</li>
</ul>
<h2 id="第一个Vue程序"><a href="#第一个Vue程序" class="headerlink" title="第一个Vue程序"></a>第一个Vue程序</h2><p>  </p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><ul>
<li>开发版本<ul>
<li>包含完整的警告和调试模式：https：//yuejs.org/js/vue.js</li>
<li>删除了警告， 30.96KBmin+gzip：https：//vuejs.org/js/vue.min.js</li>
</ul>
</li>
<li>CDN<ul>
<li><code>&lt;script src=“https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js”&gt;&lt;/script&gt;</code></li>
<li><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><ol>
<li><p><strong>创建一个HTML文件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>引入Vue.js</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>创建一个Vue实例</strong>=</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
</li>
</ol>
<ul>
<li><p>​    el 属性</p>
<p>​        用来指示vue编译器从什么地方开始解析 vue的语法，可以说是一个占位符。<br>​        相当于一个容器，跟上面的div id = “app”做关联，从此以后上面div id = “app”里面的内容要通过vue来渲染,都要经过vue处理才能看得到上面div里面的内容</p>
</li>
<li><p>date属性</p>
<p>​        用来组织从view中抽象出来的属性，可以说将视图的数据抽象出来存放在data中。</p>
</li>
</ul>
<ol start="4">
<li><p><strong>将数据绑定到页面标签中</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      &#123;&#123;message&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><p><strong>完整的代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      &#123;&#123;message&#125;&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>为了能够更直观的体验Vue带来的数据绑定功能， 我们需要在浏览器测试一番， 操作流程如下：</p>
<ol>
<li><p>在浏览器上运行第一个Vue应用程序， 进入开发者工具</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/result1.jpg"></p>
</li>
<li><p>在控制台输入vm.message=”Hello”， 然后回车， 你会发现浏览器中显示的内容会直接变成Hello</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/result2.jpg"></p>
</li>
<li><p>此时就可以在控制台直接输入vm.message来修改值， 中间是可以省略data的， 在这个操作中， 我并没有主动操作DOM， 就让页面的内容发生了变化， 这就是借助了Vue的数据绑定功能实现的； MVVM模式中要求View Model层就是使用观察者模式来实现数据的监听与绑定， 以做到数据与视图的快速响应。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记02---基本语法</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>​    我们已经成功创建了第一个Vue应用!看起来这跟渲染一个字符串模板非常类似， 但是Vue在背后做了大量工作。现在数据和DOM已经被建立了关联， 所有东西都是响应式的。我们在控制台操作对象属性，界面可以实时更新!</p>
<h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>我们还可以使用v-bind来绑定元素特性!</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">       鼠标悬停几秒钟</span><br><span class="line">   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    你看到的v-bind等被称为指令。指令带有前缀v以表示它们是Vue提供的特殊特性。v-bind:title=”message”该指令的意思是：“将这个元素节点的title属性和 Vue实例的message属性绑定在一起”。当message属性修改的时候title属性也会随之改变</p>
<p>​    可以打开浏览器的控制台， 输入 vm.message=‘新消息’，就可以对title属性进行了更新。</p>
<h3 id="v-if、v-else"><a href="#v-if、v-else" class="headerlink" title="v-if、v-else"></a>v-if、v-else</h3><p>​    这几个指令是用来进行条件判断的，怎么使用我就不说了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--条件满足就显示出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;tag&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            tag : <span class="literal">true</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<ol>
<li><p>在浏览器上运行，打开控制台!</p>
</li>
<li><p>在控制台输入<code>vm.tag=false</code>然后回车，你会发现浏览器中显示的内容会直接变成B</p>
</li>
</ol>
<h4 id="v-else-if"><a href="#v-else-if" class="headerlink" title="v-else-if"></a>v-else-if</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--条件满足就显示出来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;D&#x27;&quot;</span>&gt;</span>D<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="string">&#x27;A&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意:</p>
<pre><code>1. `===`三个等号在JavaScript中表示绝对等于(就是数据与类型都要相等)
2. `v-else` 元素必须紧跟在带 `v-if` 或者 `v-else-if` 的元素的后面，否则它将不会被识别。</code></pre>
<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>​    我们可以用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据数组，而 <code>item</code> 则是被迭代的数组元素的<strong>别名</strong>。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;item.message&#125;&#125;&#125;</span><br><span class="line">    	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&quot;hhhhhhhhhh&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&quot;123132132&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&quot;8521452&quot;</span>&#125;,</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试：</p>
<p>​    在控制台输入<code>vm.items.push(&#123;message：&#39;世界和平&#39;&#125;)</code>，尝试追加一条数据，你会发现浏览器中显示的内容会增加一条<code>世界和平</code></p>
<h3 id="v-on-监听事件"><a href="#v-on-监听事件" class="headerlink" title="v-on 监听事件"></a>v-on 监听事件</h3><p>​    可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- `sayHi` 是在下面定义的方法名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm  = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hhhhh&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//方法必须定义在Vue中的methods中，否则无法绑定,在通过V-on绑定事件</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//都是通过Vue对象来操作标签的</span></span></span><br><span class="line"><span class="javascript">            sayHi: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.message);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>​    Vue还有一些基本的使用方式， 大家有需要的可以再跟着官方文档看看， 因为这些基本的指令只看名称我们也可以知道是用来做什么的。一些具体的使用方式还是要借助官方文档。加油</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记05---Axios异步通信</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-Axios%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="什么是Axios"><a href="#什么是Axios" class="headerlink" title="什么是Axios"></a>什么是Axios</h2><p>​        Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中的异步通信框架， 它的主要作用就是实现AJAX异步通信。其功能特点</p>
<ul>
<li>从浏览器中创建 <code>XMLHttpRequests</code></li>
<li>从 node.js 创建 <code>http</code> 请求</li>
<li>支持 Promise API (JS中链式编程)</li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换 JSON 数据</li>
<li>客户端支持防御 XSRF(跨站请求伪造)</li>
</ul>
<p>GitHub：<a href="https://github.com/axios/axios">https://github.com/axios/axios</a><br>中文文档：<a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p>
<h3 id="为什么要使用"><a href="#为什么要使用" class="headerlink" title="为什么要使用"></a>为什么要使用</h3><p>​    由于<code>Vue.js</code>是一个视图层框架并且作者(尤雨溪) 严格准守SoC(关注度分离原则)所以<code>Vue.js</code>并不包含AJAX的通信功能， 为了解决通信问题， 作者单独开发了一个名为<code>vue-resource</code>的插件， 不过在进入2.0版本以后停止了对该插件的维护并推荐了<code>Axios</code>框架。少用jQuery， 因为它操作Dom太频繁!</p>
<h2 id="第一个Axios应用程序"><a href="#第一个Axios应用程序" class="headerlink" title="第一个Axios应用程序"></a>第一个Axios应用程序</h2><p> web开发中传输的数据大部分都是采用JSON格式， 可以先在项目里模拟一段JSON数据， 数据内容如下：创建一个名为data.json的文件并填入上面的内容， 放在项目的根目录下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;qzh&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://baidu.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>: <span class="string">&quot;南山&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>:<span class="string">&quot;深圳&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span>: <span class="string">&quot;中国&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;B站&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.bilibili.com/&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;百度&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.address.country&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;info.url&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#vue&quot;</span>,</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">//data()方法用来接收axios请求的返回的数据,data属性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//返回接收的参数的格式，必须和json字符串一样，需要的数据就写上不需要的不用写</span></span></span><br><span class="line">                info: &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="literal">null</span>,</span></span><br><span class="line">                    address: &#123;</span><br><span class="line"><span class="javascript">                        street: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        city: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                        country: <span class="literal">null</span>,</span></span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="javascript">                    url: <span class="literal">null</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//钩子函数:相当于回调函数在程序运行的过程中执行</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//链式编程 ES6新特性</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            axios.get(<span class="string">&#x27;../data.json&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> (<span class="built_in">this</span>.info = response.data));</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ol>
<li><p>在这里使用了<code>v-bind</code>将<code>a:href</code>的属性值与Vue实例中的数据进行绑定</p>
</li>
<li><p>使用axios框架的get方法请求AJAX并自动将数据封装进了Vue实例的数据对象中</p>
</li>
<li><p><strong>我们在data中的数据结构必须和<code>Ajax</code>响应回来的数据格式匹配！</strong></p>
</li>
</ol>
<h2 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h2><p>​        官方文档：<a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">https://cn.vuejs.org/v2/guide/instance.html#生命周期图示</a><br>  Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载DOM、渲染一更新一渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。<br>  在Vue的整个生命周期中，它提供了一系列的事件，可以让我们在事件触发时注册JS方法，可以让我们用自己注册的JS方法控制整个大局，在这些事件响应方法中的this直接指向的是Vue的实例。</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/lifeCycle.jpg"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>通信框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记03---表单输入绑定</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="什么是双向数据绑定"><a href="#什么是双向数据绑定" class="headerlink" title="什么是双向数据绑定"></a>什么是双向数据绑定</h2><p>​    Vue.js是一个MVVM框架， 即<strong>数据双向绑定， 即当数据发生变化的时候， 视图也就发生变化， 当视图发生变化的时候，数据也会跟着同步变化</strong>。这也算是Vue.js的精髓之处了。  </p>
<p>​    值得注意的是，我们所说的数据双向绑定，一定是对于UI控件来说的非UI控件不会涉及到数据双向绑定。单向数据绑定是使用状态管理工具的前提。如果我们使用vuex那么数据流也是单项的，这时就会和双向数据绑定有冲突。</p>
<h3 id="为什么要实现数据的双向绑定"><a href="#为什么要实现数据的双向绑定" class="headerlink" title="为什么要实现数据的双向绑定"></a>为什么要实现数据的双向绑定</h3><p>​        在<code>Vue.js</code>中，如果使用<code>vuex</code>， 实际上数据还是单向的， 之所以说是数据双向绑定，这是用的UI控件来说， 对于我们处理表单， <code>Vue.js</code>的双向数据绑定用起来就特别舒服了。即两者并不互斥，在全局性数据流使用单项，方便跟踪；局部性数据流使用双向，简单易操作。</p>
<h2 id="在表单中实现双向数据绑定"><a href="#在表单中实现双向数据绑定" class="headerlink" title="在表单中实现双向数据绑定"></a>在表单中实现双向数据绑定</h2><p>​    你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p>
<p>​    <code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p>
<h3 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span> &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          message: <span class="string">&quot;123&quot;</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    通过<code> v-model=&quot;message&quot;</code>将Vue实例中的message跟文本输入框绑定，实现双向数据绑定。当数据发生变化的时候， 视图也就发生变化， 当视图发生变化的时候，数据也会跟着同步变化</p>
<h3 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       &#123;&#123;message&#125;&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          message: <span class="string">&quot;Hello World&quot;</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="单选框"><a href="#单选框" class="headerlink" title="单选框"></a>单选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    性别:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span> 男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;gender&quot;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">         &#123;&#123;gender&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            gender: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;select&quot;</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;A&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;B&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;C&quot;</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &#123;&#123;hhh&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">          message: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​     我只这里列举了一些例子。其他的表单项怎么绑定我就不再赘述了。还是那句话，不懂就看看官方文档。加油！</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记04---组件</title>
    <url>/HuaStarOS.github.io/2021/01/01/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="什么是组件"><a href="#什么是组件" class="headerlink" title="什么是组件"></a>什么是组件</h2><p>​    组件是可复用的<code>Vue</code>实例， 说白了就是一组可以重复使用的模板， 跟<code>JSTL</code>的自定义标签、<code>Thymeleal</code>的<code>th:fragment</code>等框架有着异曲同工之妙，通常一个应用会以一棵嵌套的组件树的形式来组织：</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/component.jpg"></p>
<h3 id="第一个Vue组件"><a href="#第一个Vue组件" class="headerlink" title="第一个Vue组件"></a>第一个Vue组件</h3><p>​    注意：在实际开发中，我们并不会用以下方式开发组件，而是采用<code>vue-cli</code>创建，<code>vue</code>模板文件的方式开发，以下方法只是为了让大家理解什么是组件。<br> <strong>使用<code>Vue.component()</code>方法注册组件，格式如下：</strong></p>
<pre><code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件就是自定义标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">qzh</span>&gt;</span><span class="tag">&lt;/<span class="name">qzh</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*自定义Vue组件Component*/</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*组件就是自定义标签*/</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;qzh&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模板</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre>
<p> 说明：</p>
<ul>
<li><code>Vue.component()</code>：注册组件</li>
<li><code>qzh</code>：自定义组件的名字</li>
<li><code>template</code>：组件的模板,即要显示的HTML元素</li>
</ul>
<h3 id="用props属性传递参数"><a href="#用props属性传递参数" class="headerlink" title="用props属性传递参数"></a>用<code>props</code>属性传递参数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--组件就是自定义标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">qzh</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:message</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">qzh</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/*自定义Vue组件Component*/</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">/*组件就是自定义标签*/</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;qzh&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//用props接收参数，不用则无法接收参数</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;message&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模板</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">message</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            items: [<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;HTML&quot;</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>说明</strong>：</p>
<ul>
<li><code>v-for=&quot;item in items&quot;</code>：遍历<code>Vue</code>实例中名为<code>items</code>的数组，并创建同等数量的组件</li>
<li><code>v-bind:message=&quot;item&quot;</code>：将遍历的<code>item</code>项绑定到组件中<code>props</code>定义名为<code>message</code>属性上；</li>
</ul>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记07---第一个Vue项目</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007-%E7%AC%AC%E4%B8%80%E4%B8%AAVue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="1-项目准备"><a href="#1-项目准备" class="headerlink" title="1. 项目准备"></a>1. 项目准备</h3><pre><code>  使用vue-cli官方提供的一个脚手架，快速的生成一个Vue项目。就好比在创建Maven项目的时候选择的项目骨架。</code></pre>
<h3 id="2-需要的环境"><a href="#2-需要的环境" class="headerlink" title="2. 需要的环境"></a>2. 需要的环境</h3><ul>
<li><p>Node.js：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a><br>     无脑安装就好，但是安装路径要选好</p>
</li>
<li><p>Git：<a href="https://git-scm.com/doenload">https://git-scm.com/doenload</a><br>     镜像：<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p>
<p><strong>确认nodejs安装成功：</strong></p>
</li>
<li><p> cmd下输入<code>node -v</code>，查看是否打印出版本号即可！</p>
</li>
<li><p> cmd下输入<code>npm -v</code>，查看是否打印出版本号即可！</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/node-v.jpg"></p>
<ul>
<li>npm，就是一个软件包管理工具，就和linux下的apt软件安装差不多！如果速度慢的话可以<strong>安装Node.js淘宝镜像加速器（cnpm）</strong>这样的话，下载速度会快</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -g 就是全局安装</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">cnpm</span> <span class="string">-g</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或使用如下语句解决npm速度慢的问题</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<p>安装vue-cli</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">cnpm</span> <span class="string">instal1</span> <span class="string">vue-cli-g</span></span><br><span class="line"><span class="comment">#测试是否安装成功</span></span><br><span class="line"><span class="comment">#查看可以基于哪些模板创建vue应用程序，通常选择webpack</span></span><br><span class="line"><span class="string">vue</span> <span class="string">list</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/vue-list.jpg"></p>
<h3 id="3-创建项目"><a href="#3-创建项目" class="headerlink" title="3. 创建项目"></a>3. 创建项目</h3><p>1.创建一个Vue项目，我们随便建立一个空的文件夹在电脑上，我这里在D盘下新建一个目录</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">D:\Project\vue-study;</span></span><br></pre></td></tr></table></figure>

<p>2.创建一个基于webpack模板的vue应用程序</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、首先需要进入到对应的目录 </span></span><br><span class="line"><span class="string">cd</span> <span class="string">D:\Project\vue-study</span></span><br><span class="line"><span class="comment">#2、这里的hello-vue是项目名称，可以根据自己的需求起名</span></span><br><span class="line"><span class="string">vue</span> <span class="string">init</span> <span class="string">webpack</span> <span class="string">hello-vue</span></span><br></pre></td></tr></table></figure>

<p> 一路都选择no即可；</p>
<p><strong>说明：</strong></p>
<ul>
<li>Project name：项目名称，默认回车即可</li>
<li>Project description：项目描述，默认回车即可</li>
<li>Author：项目作者，默认回车即可</li>
<li>Vue build (Use arrow keys)：选择第一个即可</li>
<li>Install vue-router：是否安装vue-router，选择n不安装（后期需要再手动添加）</li>
<li>Use ESLint to lint your code:是否使用ESLint做代码检查，选择n不安装（后期需要再手动添加)</li>
<li>Set up unit tests:单元测试相关，选择n不安装（后期需要再手动添加）</li>
<li>Setupe2etests with Nightwatch：单元测试相关，选择n不安装（后期需要再手动添加）</li>
<li>Should we run npm install for you after the,project has been created:创建完成后直接初始化，选择n，我们手动执行；运行结果！</li>
</ul>
<ol>
<li><p><strong>初始化并运行</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、进入项目</span></span><br><span class="line"><span class="string">cd</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment">#2、下载依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="comment">#3、运行项目</span></span><br><span class="line"><span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/hello-vue_run.jpg"></p>
<p>在浏览器中输入<a href="http://localhost:8080/">http://localhost:8080</a> 查看结果</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记06---计算属性、内容分发、自定义事件</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E3%80%81%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E3%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>​    计算属性的重点突出在<code>属性</code>两个字上(属性是名词)，首先它是个<code>属性</code>其次这个属性有<code>计算</code>的能力(计算是动词)，这里的<code>计算</code>就是个函数：简单点说，它就是一个能够将计算结果缓存起来的属性(将行为转化成了静态的属性)，仅此而已；可以想象为缓存!</p>
<p>​    作用：</p>
<ol>
<li>  减少模板中的计算逻辑</li>
<li> <code>数据缓存</code>。当我们的数据没有变化时，不在执行计算的过程</li>
<li> 依赖固定的数据类型（响应式数据），不能是普通的传入的一个全局数据</li>
</ol>
<p>  <strong>代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime1:&#123;&#123;currentTime1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime2:&#123;&#123;currentTime2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--1.导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">          message:<span class="string">&quot;hello&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            currentTime1:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();<span class="comment">//返回一个时间戳</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line"><span class="javascript">            currentTime2:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//计算属性：methods，computed方法名不能重名，重名之后，只会调用methods的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();<span class="comment">//返回一个时间戳</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：methods和computed里的东西不能重名<br>说明：</p>
<ul>
<li>methods：定义方法， 调用方法使用currentTime1()， 需要带括号</li>
<li>computed：定义计算属性， 调用属性使用currentTime2， 不需要带括号：this.message是为了能够让currentTime2观察到数据变化而变化</li>
<li>如何在方法中的值发生了变化，则缓存就会刷新!可以在控制台使用<code>vm.message=&quot;world&quot;</code>， 改变下数据的值，再次测试观察效果!<br><strong>结论：</strong><br> 调用方法时，每次都需要讲行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢?此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这点，<strong>计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销；</strong></li>
</ul>
<h2 id="内容分发"><a href="#内容分发" class="headerlink" title="内容分发"></a>内容分发</h2><p>​    为了让组件可以组合，需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 <strong>内容分发</strong> (或 “transclusion” )。在<code>Vue.js</code>中我们使用<code>&lt;slot&gt;</code>元素作为承载分发内容的出口，作者称其为<strong>插槽</strong>，可以应用在组合组件的场景中；</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>​    比如在下面的例子中制作一个列表组件(todo)，该列表组件由标题(title)和列表项(item)这两个组件组成,这三个组件是相互独立的，那怎么样才能将它们组合在一起呢？</p>
<p>​    <strong>第一步定义一个列表组件</strong></p>
<pre><code>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo&quot;, &#123;</span><br><span class="line">    /*slot中的name属性给这个slot命名*/</span><br><span class="line">     template:&#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>大话编程<span class="tag">&lt;/<span class="name">div</span>&gt;</span>\</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">li</span>&gt;</span>\</span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">li</span>&gt;</span>\</span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span>PHP<span class="tag">&lt;/<span class="name">li</span>&gt;</span>\</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line">&#125;);   </span><br></pre></td></tr></table></figure></code></pre>
<p>​    <strong>第二步,如果我们还是这样子写，那么还是静态的数据。那怎么实现动态绑定呢？我们可以留下一个插槽</strong></p>
<ol>
<li>在列表组件中的<code>template</code>中留出插槽，即<code>slot</code></li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//slot插槽</span><br><span class="line">Vue.component(&quot;todo&quot;, &#123;</span><br><span class="line">    /*slot中的name属性给这个slot命名*/</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span><br><span class="line">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义一个名为todo-title的标题组件 和 todo-item的列表组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-title&quot;, &#123;</span><br><span class="line">     props: [&#x27;title&#x27;],</span><br><span class="line">     template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-item&quot;, &#123;</span><br><span class="line">    props: [&#x27;item&#x27;,&#x27;index&#x27;],</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建Vue实例并初始化数据</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-item&quot;, &#123;</span><br><span class="line">    props: [&#x27;item&#x27;,&#x27;index&#x27;],</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>通过插槽<code>slot</code>将这三个组件组合起来</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot=&quot;xxx&quot;表示插入哪个插槽 --&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- slot=&quot;title&quot;表示插入name为title插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：这样我们将todo-title和todo-item组件分发到了todo组件的title和item插槽中</p>
<p><strong>完整代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot=&quot;title&quot;表示插入哪个插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//slot插槽</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*slot中的name属性给这个slot命名*/</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-item&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模板中的标签只能绑定当前组件中定义的方法</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml">----</span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;      </span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;大话编程&quot;</span>,</span></span><br><span class="line"><span class="javascript">            items: [<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;PHP&quot;</span>]</span></span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>​    通过以上代码不难发现，数据在Vue的实例中， 但是如何在组件操作Vue实例中的数据呢？比如在组件删除Vue实例中的数据。此时就涉及到参数传递与事件分发了， Vue为我们提供了自定义事件的功能很好的帮助我们解决了这个问题； 使用this.$emit(‘自定义事件名’， 参数) 。</p>
<ol>
<li>在Vue实例中定义名为removeltems的方法来删除数据。为什么要定义方法来删除？因为Vue实例才能操作Vue中的数据。因此在定义方法来进行删除操作</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">       el: &quot;#app&quot;,</span><br><span class="line">       data: &#123;</span><br><span class="line">           title: &quot;大话编程&quot;,</span><br><span class="line">           items: [&quot;Java&quot;, &quot;C++&quot;, &quot;PHP&quot;]</span><br><span class="line">       &#125;,</span><br><span class="line">       methods: &#123;</span><br><span class="line">           removeItem: function (index) &#123;</span><br><span class="line">               //删除当前下标的元素</span><br><span class="line">               console.log(&quot;删除了&quot;+this.items[index])</span><br><span class="line">               this.items.splice(index,1);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改todo-item组件的代码，增加一个删除按钮，并且绑定事件！</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Vue.component(&quot;todo-item&quot;, &#123;</span><br><span class="line">    props: [&#x27;item&#x27;,&#x27;index&#x27;],</span><br><span class="line">    //模板中的标签只能绑定当前组件中定义的方法</span><br><span class="line">    template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;item&#125;&#125;----&#123;&#123;index&#125;&#125; <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove2&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        remove2: function (index) &#123;</span><br><span class="line">            //this.$emit自定义事件分发</span><br><span class="line">            this.$emit(&#x27;remove&#x27;,index)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改todo-item组件的HTML代码，增加一个自定义事件，比如叫remove，然后绑定到vue的方法！</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItem(index)&quot;</span> <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 说明：</p>
<p>​    自定义的remove事件绑定到Vue实例中的removeItem方法，在todo-item组件中的删除按钮的点击事件中调用了<code> this.$emit(&#39;remove&#39;,index)</code>。这样就可以在组件实现删除Vue实例中的数据了</p>
<p><strong>完整代码</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- slot=&quot;title&quot;表示插入哪个插槽 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-item</span> <span class="attr">slot</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">v-on:remove</span>=<span class="string">&quot;removeItem(index)&quot;</span> <span class="attr">v-bind:index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//slot插槽</span></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*slot中的name属性给这个slot命名*/</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-item&quot;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;item&#x27;</span>,<span class="string">&#x27;index&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">//模板中的标签只能绑定当前组件中定义的方法</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml">----</span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove2&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            remove2: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//this.$emit自定义事件分发</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>,index)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;大话编程&quot;</span>,</span></span><br><span class="line"><span class="javascript">            items: [<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;PHP&quot;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            removeItem: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">//删除当前下标的元素</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;删除了&quot;</span>+<span class="built_in">this</span>.items[index])</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.items.splice(index,<span class="number">1</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>调用过程</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/process.jpg"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​    <strong>Vue入门小结</strong></p>
<p>  常用的属性：</p>
<ul>
<li>v-if</li>
<li>v-else-if</li>
<li>v-else</li>
<li>v-for</li>
<li>v-on绑定事件，简写 @</li>
<li>v-model数据双向绑定</li>
<li>v-bind给巨剑绑定参数，简写 :</li>
</ul>
<p>  组件化：</p>
<ul>
<li>组合组件slot插槽</li>
<li>组件内部绑定事件需要使用到<code>this.$emit(&quot;事件名&quot;,参数);</code></li>
<li>计算属性的特色，缓存计算数据</li>
</ul>
<p> </p>
<p><strong>说明</strong></p>
<p>​    Vue的开发都是要基于NodeJS，实际开发采用Vue-cli脚手架开发，vue-router路由，vuex做状态管理；Vue UI，界面我们一般使用ElementUI（饿了么出品），或者ICE（阿里巴巴出品）来快速搭建前端项目</p>
<ul>
<li><a href="https://element.eleme.cn/#/zh-CN">https://element.eleme.cn/#/zh-CN</a></li>
<li><a href="https://ice.work/">https://ice.work/</a></li>
</ul>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记08---webpack使用</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008-webpack%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本质上， webpack是一个现代JavaScript应用程序的<strong>静态模块打包器</strong>(module bundler) 。当webpack处理应用程序时， 它会递归地构建一个依赖关系图(dependency graph) ， 其中包含应用程序需要的每个模块， 然后将所有这些模块打包成一个或多个bundle.</p>
<p>​    <strong>安装Webpack</strong></p>
<pre><code>    <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">webpack</span> <span class="string">-g</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">webpack-cli</span> <span class="string">-g</span></span><br></pre></td></tr></table></figure></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/webpack_v.jpg"></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>​    知其然知其所以然！</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>（1）entry：一个可执行模块或者库的入口。</p>
<p>（2）output：输出，指定Webpack把打包好的文件存放到指定的位置</p>
<p>（3）module：模块， 用于处理各种类型的文件</p>
<p>（4）plugin：扩展webpack功能的插件。在webpack构建的生命周期节点上加入扩展hook，添加功能</p>
<p>（5）resolve：设置路径指向</p>
<p>（6）watch：监听， 用于设置文件改动后直接打包</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry:<span class="string">&quot;&quot;</span>,</span><br><span class="line">	output:&#123;</span><br><span class="line">		path:<span class="string">&quot;&quot;</span>,</span><br><span class="line">		filename:<span class="string">&quot;&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="built_in">module</span>:&#123;</span><br><span class="line">		loaders:[</span><br><span class="line">			&#123;<span class="attr">test</span>:<span class="regexp">/\.js$/</span>,;\loade:<span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;,</span><br><span class="line">	plugins:&#123;&#125;,</span><br><span class="line">	resolve:&#123;&#125;,</span><br><span class="line">	watch:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="webpack构建流程"><a href="#webpack构建流程" class="headerlink" title="webpack构建流程"></a>webpack构建流程</h3><p>从启动构建到输出结果一系列过程：</p>
<p>（1）初始化参数：解析webpack配置参数，合并shell传入和webpack.config.js文件配置的参数，形成最后的配置结果。</p>
<p>（2）开始编译：上一步得到的参数初始化compiler对象，注册所有配置的插件，插件监听webpack构建生命周期的事件节点，做出相应的反应，执行对象的 run 方法开始执行编译。</p>
<p>（3）确定入口：从配置的entry入口，开始解析文件构建AST语法树，找出依赖，递归下去。</p>
<p>（4）编译模块：递归中根据文件类型和loader配置，调用所有配置的loader对文件进行转换，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理。</p>
<p>（5）完成模块编译并输出：递归完事后，得到每个文件结果，包含每个模块以及他们之间的依赖关系，根据entry配置生成代码块chunk。</p>
<p>（6）输出完成：输出所有的chunk到文件系统。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li><p>创建项目(创建一个文件夹用IDEA打开)</p>
</li>
<li><p>创建modules的目录，用于放置JS模块等资源文件</p>
</li>
<li><p>在modules下创建模块文件，如hello.js，用于编写JS模块相关代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴露一个方法：sayHi</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;qzh学习ES6&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在modules下创建main.js文件，作为入口文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//require 导入一个模块，就可以调用这个模块中的方法了</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi();</span><br></pre></td></tr></table></figure>
</li>
<li><p>在项目目录下创建webpack.config.js配置文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	entry:<span class="string">&quot;./modules/main.js&quot;</span>,</span><br><span class="line">	output:&#123;</span><br><span class="line">		filename:<span class="string">&quot;./js/bundle.js&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用打包好的文件，在项目目录下创建HTML页面，如index.html。导入webpack打包后的JS文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在IDEA控制台中输入webpack，回车</p>
</li>
<li><p>在浏览器中打开index.html</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/webpack_study.jpg"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习笔记10---简单项目</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B010-%E7%AE%80%E5%8D%95%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><ol>
<li>创建一个名为hello-vue的工程<code>vue init webpack hello-vue</code></li>
<li>安装依赖， 我们需要安装vue-router、element-ui、sass-loader和node-sass四个插件</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建工程</span></span><br><span class="line"><span class="string">vue</span> <span class="string">init</span> <span class="string">webpack</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment"># 进入工程目录</span></span><br><span class="line"><span class="string">cd</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment"># 安装vue-routern </span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">vue-router</span> <span class="string">--save-dev</span></span><br><span class="line"><span class="comment"># 安装element-ui</span></span><br><span class="line"><span class="string">npm</span> <span class="string">i</span> <span class="string">element-ui</span> <span class="string">-S</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="comment"># 安装SASS加载器</span></span><br><span class="line"><span class="string">cnpm</span> <span class="string">install</span> <span class="string">sass-loader</span> <span class="string">node-sass</span> <span class="string">--save-dev</span></span><br><span class="line"><span class="comment"># 启功测试</span></span><br><span class="line"><span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>npm常用命令</li>
</ol>
<ul>
<li><code>npm install moduleName</code>：安装模块到项目目录下</li>
<li><code>npm install -g moduleName</code>：-g的意思是将模块安装到全局，具体安装到磁盘哪个位置要看npm config prefix的位置</li>
<li><code>npm install --save moduleName</code>：-–save的意思是将模块安装到项目目录下， 并在package文件的dependencies节点写入依赖，-S为该命令的缩写</li>
<li><code>npm install --save-dev moduleName</code>: -–save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies节点写入依赖，-D为该命令的缩写</li>
</ul>
<h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/project_framework.jpg"></p>
<ul>
<li>assets：用于存放资源文件</li>
<li>components：用于存放Vue功能组件</li>
<li>views：用于存放Vue视图组件</li>
<li>router：用于存放vue-router配置</li>
</ul>
<ol>
<li>创建首页，在views创建<code>Main.vue</code>视图组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">			name:<span class="string">&quot;Main&quot;</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>创建登录页，在views目录下创建名为<code>Login.vue</code>视图组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;loginForm&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span><span class="attr">class</span>=<span class="string">&quot;login-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;login-title&quot;</span>&gt;</span>欢迎登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;账号&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;onSubmit(&#x27;loginForm&#x27;)&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      title=&quot;温馨提示&quot;</span><br><span class="line">      :visible.sync=&quot;dialogVisible&quot;</span><br><span class="line">      width=&quot;30%&quot;</span><br><span class="line">      :before-close=&quot;handleClose&quot;&gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入账号和密码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>确 定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Login&quot;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        form: &#123;</span><br><span class="line"><span class="javascript">          username: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          password: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 表单验证，需要在 el-form-item 元素中增加 prop 属性</span></span></span><br><span class="line">        rules: &#123;</span><br><span class="line">          username: [</span><br><span class="line"><span class="javascript">            &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;账号不可为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">          ],</span><br><span class="line">          password: [</span><br><span class="line"><span class="javascript">            &#123;<span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&#x27;密码不可为空&#x27;</span>, <span class="attr">trigger</span>: <span class="string">&#x27;blur&#x27;</span>&#125;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 对话框显示和隐藏</span></span></span><br><span class="line"><span class="javascript">        dialogVisible: <span class="literal">false</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">onSubmit</span>(<span class="params">formName</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 为表单绑定验证功能</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs[formName].validate(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (valid) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 使用 vue-router 路由到指定页面，该方式称之为编程式导航</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$router.push(<span class="string">&quot;/main&quot;</span>);</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.dialogVisible = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.login-box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#DCDFE6</span>;</span></span><br><span class="line">    width: 350px;</span><br><span class="line">    margin: 180px auto;</span><br><span class="line">    padding: 35px 35px 15px 35px;</span><br><span class="line">    border-radius: 5px;</span><br><span class="line">    -webkit-border-radius: 5px;</span><br><span class="line">    -moz-border-radius: 5px;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 0 0 25<span class="selector-tag">px</span> <span class="selector-id">#909399</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.login-title</span> &#123;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">    margin: 0 auto 40px auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#303133</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建路由，在router目录创建vue-router路由配置文件<code>index.js</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//首页</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      name: Main,</span><br><span class="line">      component: Main,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//登录页</span></span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在App.vue中使用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">    font-family: &#x27;Avenir&#x27;, Helvetica, Arial, sans-serif;</span><br><span class="line">    -webkit-font-smoothing: antialiased;</span><br><span class="line">    -moz-osx-font-smoothing: grayscale;</span><br><span class="line">    text-align: center;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">    margin-top: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Main.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//扫描路由配置</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span></span><br><span class="line"><span class="comment">//导入elementUI</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&quot;element-ui&quot;</span></span><br><span class="line"><span class="comment">//导入element css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),<span class="comment">//ElementUI规定这样使用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>运行</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">run</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/hello-vue_run.jpg"></p>
<p>在浏览器中输入<a href="https://localhost:8080/">https://localhost:8080</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/vue_10_run.jpg"></p>
<h2 id="错误排除"><a href="#错误排除" class="headerlink" title="错误排除"></a>错误排除</h2><p>​    <strong>运行的过程中可能会出错这个两个错误</strong></p>
<ol>
<li>出现这个错误需要把**<code>package.json</code><strong>文件中的</strong>node-sass**的版本改成4.x就可以了，我是改成4.13.1</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/error1.jpg"></p>
<ol start="2">
<li>第二个错误可能时因为sass-loader的版本过高导致的编译错误，需要退回到7.x；推荐7.13.1版本</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/error2.png"></p>
<p>注意：</p>
<p>​    修改完版本之后都要重新npm install,重新下载依赖。如果npm install 不行，就用cnpm install</p>
<h2 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h2><p>​    实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/route_children2.jpg"></p>
<h3 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h3><ol>
<li>在views/user目录下创建Profile.vue的视图组件；</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;UserProFile&quot;</span>,</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在views/user目录下创建List.vue的视图组件；</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    用户列表</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;UserList&quot;</span>,</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置嵌套路由修改router目录下的index.js路由配置文件</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="comment">//导入组件</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../views/Main&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&quot;../views/Login&quot;</span>;</span><br><span class="line"><span class="comment">//导入子模块</span></span><br><span class="line"><span class="keyword">import</span> UserList <span class="keyword">from</span> <span class="string">&quot;../views/user/List&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> UserProfile <span class="keyword">from</span> <span class="string">&quot;../views/user/Profile&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> error <span class="keyword">from</span> <span class="string">&quot;../views/404&quot;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line"></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//首页</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      component: Main,</span><br><span class="line">      <span class="comment">// 写入子模块路由</span></span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//path接收数据</span></span><br><span class="line">          path: <span class="string">&#x27;/user/profile&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;UserProfile&#x27;</span>,</span><br><span class="line">          component: UserProfile,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          path: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;UserList&#x27;</span>,</span><br><span class="line">          component: UserList,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//登录页</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改首页，这里使用Element-UI</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;]&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-caret-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--插入的地方--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/profile&quot;</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--插入的地方--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/list&quot;</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-3&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--插入的地方--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goHome&quot;</span>&gt;</span>回到首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-caret-right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>内容管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-1&quot;</span>&gt;</span>分类管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;2-2&quot;</span>&gt;</span>内容列表<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;text-align: right; font-size: 12px&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-setting&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-right: 15px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-dropdown-menu</span> <span class="attr">slot</span>=<span class="string">&quot;dropdown&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-dropdown-item</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">el-dropdown-item</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">el-dropdown-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-dropdown-menu</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">el-dropdown</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--在这里展示视图--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Main&quot;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.el-header</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#36cba1</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#100f0f</span>;</span></span><br><span class="line">    line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.el-aside</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#100f0f</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><ol>
<li>链接传参</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--插入的地方--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--name是要展示的组件的名字,params:要传递的参数,传递参数需要绑定对象，在路由中有path接收--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name: &#x27;UserProfile&#x27;,params: &#123;id: 1&#125;&#125;&quot;</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置路由传参</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//首页</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      props: <span class="literal">true</span>,</span><br><span class="line">      name: Main,</span><br><span class="line">      component: Main,</span><br><span class="line">      <span class="comment">// 写入子模块路由</span></span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">//path接收数据</span></span><br><span class="line">          path: <span class="string">&#x27;/user/profile/:id&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;UserProfile&#x27;</span>,</span><br><span class="line">          component: UserProfile,</span><br><span class="line">          props: <span class="literal">true</span>,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          path: <span class="string">&#x27;/user/list&#x27;</span>,</span><br><span class="line">          name: <span class="string">&#x27;UserList&#x27;</span>,</span><br><span class="line">          component: UserList,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">   </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//登录页</span></span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>组件接收参数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    &#123;&#123;id&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">&#x27;id&#x27;</span>],</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;UserProFile&quot;</span>,</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//重定向</span></span><br><span class="line">      path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      redirect: <span class="string">&#x27;/main&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说明：这里定义了两个路径，一个是 /main，一个是 /home，其中 /home重定向到了 /main路径。</p>
<p>使用的话，配置对应的路径即可</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>回到首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="路由模式与404"><a href="#路由模式与404" class="headerlink" title="路由模式与404"></a>路由模式与404</h3><p>路由模式有两种</p>
<ul>
<li>hash：路径带# 符号，比如<a href="https://localhost:8080/#/login">https://localhost:8080/#/login</a></li>
<li>history：路径不带 # 符号，比如<a href="https://localhost:8080/login">https://localhost:8080/login</a></li>
</ul>
<ol>
<li>修改路由模式</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">      ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>处理404</strong>创建<code>404.vue</code>视图组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>404<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">&quot;error&quot;</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​     修改路由配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> error <span class="keyword">from</span> <span class="string">&quot;../views/404&quot;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode:<span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">      component: error,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="路由钩子函数与异步请求"><a href="#路由钩子函数与异步请求" class="headerlink" title="路由钩子函数与异步请求"></a>路由钩子函数与异步请求</h3><ol>
<li>路由钩子函数</li>
</ol>
<ul>
<li><strong>beforeRouteEnter</strong>：进入路由前执行(在加载组件之前执行)</li>
<li><strong>beforeRouteLeave</strong>：离开路由前执行(在离开组件之前执行)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    </span><br><span class="line">  beforeRouteEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在进入页面之前执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;进入路由之前&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  beforeRouteLeave: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在进入页面之后执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;离开路由之前&quot;</span>);</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li>to ：路由将要跳转的路径信息(<strong>要去哪里</strong>)</li>
<li>from ： 路径跳转前的路径信息(<strong>从哪里来</strong>)</li>
<li>next：路由的控制参数<ul>
<li>next()：跳入下一个页面</li>
<li>next(’/path’) ：改变路由的跳转方向，跳到另一个路由</li>
<li>next(false)：返回原来的页面</li>
<li>next((vm)=&gt;{})：仅在beforeRouteEnter中可用，vm是组件实例(vm是当前Vue实例，即定义路由钩子函数的Vue实例)</li>
</ul>
</li>
</ul>
<ol start="2">
<li><p><strong>在钩子函数中使用异步请求</strong></p>
<ol>
<li><p>安装Axios <code>cnpm install axios -s</code></p>
</li>
<li><p>在main.js中引用<strong>Axios</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">Vue.use(VueAxios,axios)</span><br></pre></td></tr></table></figure>
</li>
<li><p>准备事件，在src目录下创建static目录用来存放静态资源，在static目录下创建data.json文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;qzh&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://baidu.com&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在beforeRouteEnter中进行异步请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">  name: <span class="string">&quot;UserProFile&quot;</span>,</span><br><span class="line">  beforeRouteEnter: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在进入页面之前执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;进入路由之前&quot;</span>);</span><br><span class="line">    next(<span class="function"><span class="params">vm</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//vm是当前组件。调用getData()方法</span></span><br><span class="line">      vm.getData();</span><br><span class="line">    &#125;)</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在进入页面之后执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;离开路由之前&quot;</span>);</span><br><span class="line">    next()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getData: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.axios(&#123;</span><br><span class="line">        method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        url: <span class="string">&#x27;http://localhost:8080/static/data.json&#x27;</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行结果</p>
<p><img src="!%5B%5D(https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/vue_run_2.jpg"></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/HuaStarOS.github.io/2020/12/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vue学习笔记09---vue-route路由</title>
    <url>/HuaStarOS.github.io/2021/01/02/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-vue-route%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="什么是Vue-Router"><a href="#什么是Vue-Router" class="headerlink" title="什么是Vue Router"></a>什么是Vue Router</h2><p>​        Vue Router 是 <a href="http://cn.vuejs.org/">Vue.js</a> 官方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用变得易如反掌。包含的功能有：</p>
<ul>
<li><p>嵌套的路由/视图表</p>
</li>
<li><p>模块化的、基于组件的路由配置</p>
</li>
<li><p>路由参数、查询、通配符</p>
</li>
<li><p>基于 Vue.js 过渡系统的视图过渡效果</p>
</li>
<li><p>细粒度的导航控制</p>
</li>
<li><p>带有自动激活的 CSS class 的链接</p>
</li>
<li><p>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</p>
</li>
<li><p>自定义的滚动条行为</p>
</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里是采用直接下载的方式</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">vue-router</span></span><br></pre></td></tr></table></figure>
<p> 如果在一个模块化工程中使用它，必须要通过 <code>Vue.use()</code> 明确地安装路由功能：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">import</span> <span class="string">Vue</span> <span class="string">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="string">import</span> <span class="string">VueRouter</span> <span class="string">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">Vue.use(VueRouter)</span></span><br></pre></td></tr></table></figure>



<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li>使用vue-cli创建项目</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1、这里的hello-vue是项目名称，可以根据自己的需求起名</span></span><br><span class="line"><span class="string">vue</span> <span class="string">init</span> <span class="string">webpack</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment">#2、进入项目</span></span><br><span class="line"><span class="string">cd</span> <span class="string">hello-vue</span></span><br><span class="line"><span class="comment">#3、下载依赖</span></span><br><span class="line"><span class="string">npm</span> <span class="string">install</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用IDEA打开项目 （使用IDEA打开hello-vue文件夹）</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/post/Vue_01/project_framework.jpg"></p>
<ol start="3">
<li> 创建Main.vue组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Main&quot;</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建Comment.vue组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">h1</span>&gt;</span>评论页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">	<span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">		name:<span class="string">&quot;Comment&quot;</span></span></span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>安装vue-route路由</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">npm</span> <span class="string">install</span> <span class="string">vue-router</span></span><br></pre></td></tr></table></figure>

<ol start="6">
<li>在src目录下，新建一个文件夹：<strong>router</strong>，专门存放路由，配置路由index.js，如下</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-loader&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Comment <span class="keyword">from</span> <span class="string">&#x27;../components/Comment&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&#x27;../components/Main&#x27;</span></span><br><span class="line"><span class="comment">//安装路由</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/comment&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;comment&#x27;</span>,</span><br><span class="line">      <span class="comment">//要跳转到的组件</span></span><br><span class="line">      component: Comment,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径</span></span><br><span class="line">      path: <span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      <span class="comment">//要跳转到的组件</span></span><br><span class="line">      component: Main,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="7">
<li>在App.vue中使用路由</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;!--</span><br><span class="line">			router-link：默认会被渲染成一个&lt;a&gt;标签，to属性为指定链接</span><br><span class="line">			router-view：用于展示路由匹配到的组件</span><br><span class="line">		--&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;comment&quot;&gt;评论页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &#39;App&#39;,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="8">
<li><p>运行</p>
<p><strong><code>npm run dev</code></strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端框架</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/HuaStarOS.github.io/2020/12/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="心有感想"><a href="#心有感想" class="headerlink" title="心有感想"></a>心有感想</h2><p>​    其实对于2020年的我来是非常关键的一年，从2020年开始到现在已经过去了12个月了，现在的时间也就剩一个月不到了。今年因疫情在家待了大半年。也正是因为有了那段时间，我才选择了自己以后的方向。<br>​    我在这写一篇博客，来回忆过去两年大学生活的点点滴滴。</p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/wallhaven-4dp8xm.jpg"></p>
<h2 id="我写博客的原因"><a href="#我写博客的原因" class="headerlink" title="我写博客的原因"></a>我写博客的原因</h2><hr>
<ul>
<li>见证自己成长的记录</li>
</ul>
<p>我是今年5月份开始学习Java的. 我选择Java的原因挺多的. 大二上学期的时候就学习了Java再加上我自己喜欢开发这一岗位. 我发现相较于网络安全和运维以及其他的方向, 我更喜欢开发, 在我看来通过自己所学习的知识写出一个小项目(例如:小程序或者小网站), 然后这个小项目可以帮助到他人. 我就觉得非常高兴. 所以我是真的想学好Java, 从现在开始我会开始写博客把自己所学的知识写出来, 见证自己成长的记录</p>
<ul>
<li>积累知识点</li>
</ul>
<p>我现在是把博客来当做自己学习的记录, 当然现在我才刚刚开始写博客. 俗话说：“好记性不如烂笔头”! 作为程序员来说, 学习的知识多的同时也挺杂, 如果没有一个记录, 很容易遗忘, 我之前都是把知识点记录在笔记本上的.现在我想把这些知识点写成技术博客, 那样可以更方便复习查阅，我想这应该是大部分程序员都会想到的事情。</p>
<ul>
<li>学会分享</li>
</ul>
<p>我写博客的一个原因, 也是来源于当初看到了一些优秀的博客. 当初一个bug不知道怎么解决, 或者被一道算法题给卡住了不会写, 我就去网上搜, 这个时候搜索引擎就帮我搜索出来了许多解决问题的博客, 他们的博客讲得是非常的好, 讲得很清楚, 是真正站在编程小白角度上面去写的博客. 从他们身上我学习到了分享精神. 我以后也会把我遇到的bug和一些踩过的坑都分享出来, 帮助他人让他们早点解决问题</p>
<ul>
<li>增加影响力</li>
</ul>
<p>或许有些人会问, 写博客图什么？我从网上一搜遍地都是相关文章, 一样可以解决自己的问题，反而会花大量的时间去书写一篇博客. 这样说的人只看到了表面, 他们往往忽视了写博客带来的好处, 花时间是必须承认的事情, 但你可以巩固你的知识, 同时也更方便复习查阅 , 当然也可以积累名气, 也能遇到志同道合的朋友. 这也是为什么我写博客的原因之一。另外，你去找工作，找实习，拥有一个个人博客也是加分项，我曾经阅读过关于面试的一篇博文，有个人的博客内容就是面试笔试不是特别理想，就因为看到了他的优秀博客，公司认为他只是遗忘了许多只是，要捡起来也是挺容易的，最终还是选择给了他offer！</p>
<h2 id="将来的我"><a href="#将来的我" class="headerlink" title="将来的我"></a>将来的我</h2><hr>
<p> 将来我自己也说不准, 毕竟我现在才20岁. 对于人生的感悟还有现在的一些想法其实也都不是很成熟. 但是我还是要提一下我自己现在的一些想法吧 . 是写给未来的自己 . 我现在主攻是后端开发, 我喜欢编程. 我希望能在编程这一方面有些许建树.</p>
<p> 将来的我, 你听着现在的我会好好学习的. 希望到时候的你以及是一名大牛了. 说到底, 人还是活在当下. 我不排斥活在当下 , 我反而喜欢活在当下的感觉 . 这种感觉能驱使我努力学习.其实说白了, 就是每天开心就好, 做着自己想做的事情, 乐此不疲, 不再因为一些事情给自己压力, 让自己过多的焦虑。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p> 这碗鸡汤我先干为敬</p>
<p> <code>心在哪里，收获就在哪里。</code></p>
<p> <code>人这一生能力有限，但是努力无限。</code></p>
<p> <code>努力做一个善良的人，做一个心态阳光的人，做一个积极向上的人，用正能量激发自己，也感染身边的人。</code></p>
<p> <code>用最美的心情迎接每天的朝阳！你阳光，世界也会因你而光彩。</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/HuaStarOS/image/pictures/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20201113094846.jpg"></p>
]]></content>
      <categories>
        <category>-[日常] -[随想]</category>
      </categories>
      <tags>
        <tag>人生感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记02---微服务架构编码构建</title>
    <url>/HuaStarOS.github.io/2021/01/05/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B002-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E7%BC%96%E7%A0%81%E6%9E%84%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="微服务架构编码构建"><a href="#微服务架构编码构建" class="headerlink" title="微服务架构编码构建"></a>微服务架构编码构建</h1><p>​    <strong>编程风格：约定 &gt; 配置 &gt; 编码</strong></p>
<h2 id="创建微服务spring-cloud整体聚合父工程"><a href="#创建微服务spring-cloud整体聚合父工程" class="headerlink" title="创建微服务spring-cloud整体聚合父工程"></a>创建微服务spring-cloud整体聚合父工程</h2><ol>
<li><p>创建工程 New Project</p>
</li>
<li><p>删除src目录，并在pom中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--打包方式 pom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--统一管理jar包版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.cloud-version</span>&gt;</span>Hoxton.SR9<span class="tag">&lt;/<span class="name">spring.cloud-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit-version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">junit-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lombok-version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">lombok-version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">druid-version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">druid-version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用写groupId和version--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--引入spring cloud的依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.cloud-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spring cloud alibaba--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--数据库--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--druid数据库连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--SpringBoot-mybatis启动器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--用于日志和测试--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>dependencyManagement与dependencies的区别</strong></p>
<p>​    Maven使用dependencyManagement元素来提供了一种管理依赖版本号的方式。通常会在一个组织或者项目的最顶层的父pom中看到dependencyManagement元素</p>
<p>​    使用pom.xml中的dependencyManagement元素能让所有在子项目中引用一个依赖而不用显式的列出版本号。<br>Maven会沿着父子层次向上走，知道找到第一个拥有dependencyManagement元素的项目，然后它就会使用这个dependencyManagement元素中指定的版本号</p>
<p>​    例如在父项目里：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>​    然后在子项目里就可以添加mysql-connector时可以不指定版本号，例如：<br>​     </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>​<br>​    这样做的好处是：如果有多个子项目都需要引用同一样依赖，则可以避免在每个使用的子项目里都声明一个版本号，这样当想升级或切换到另一个版本时，只需要在顶层父容器里更新，而不需要一个一个子项目的修改；另外如果某个子项目需要另外的一个版本号，只需要声明version即可。<br>​<br><strong>注意</strong><br>​     </p>
<ol>
<li>dependencyManagement 里只是声明依赖，并不实现引入，因此子项目需要显式的声明需要用的依赖。<ol start="2">
<li>如果不在子项目中声明依赖，是不会从父项目中继承下来的；只有在子项目中写了该依赖项，并且没有指定具体版本才会从父项目中继承该项，并且version和scope都读取自父pom文件。</li>
<li>如果子项目中指定了版本号，那么会使用子项目中指定的jar版本。</li>
<li>父工程创建完成后执行<code>mvn:install</code>将父工程发布到仓库方便子工程继承。</li>
</ol>
</li>
</ol>
<h2 id="Rest微服务工程构建"><a href="#Rest微服务工程构建" class="headerlink" title="Rest微服务工程构建"></a>Rest微服务工程构建</h2><p>​    最开始的订单模块</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/1.png"></p>
<h3 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h3><ol>
<li>建module</li>
<li>改pom</li>
<li>写yml</li>
<li>主启动</li>
<li>业务类</li>
<li>测试</li>
</ol>
<h3 id="创建微服务提供者模块cloud-provider-payment8001"><a href="#创建微服务提供者模块cloud-provider-payment8001" class="headerlink" title="创建微服务提供者模块cloud-provider-payment8001"></a>创建微服务提供者模块cloud-provider-payment8001</h3><ol>
<li><p>新建模块,子模块名：cloud-provider-payment8001</p>
</li>
<li><p>修改子模块的pom文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-provider-payment-8001<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--引入自己的API通用包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#spring配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springcloud?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.qzh.springcloud.domain</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类</p>
<ol>
<li><p>建表SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`payment`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">	<span class="string">`serial`</span> <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">	PRIMARY <span class="keyword">KEY</span>(<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>
</li>
<li><p>entities</p>
<p>在entities包下新建实体类Payment</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>   <span class="comment">//set/get/toString/equalsAndHashCode方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//有参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">//无参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String serial;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在entities包下新建CommonResult类 (json封装体，传给前端的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回给前端的通用json数据串</span></span><br><span class="line"><span class="meta">@Data</span>   <span class="comment">//set/get/toString/equalsAndHashCode方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//有参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>  <span class="comment">//无参构造器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data; <span class="comment">//泛型，对应类型的json数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义两个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommonResult</span><span class="params">(Integer code, String message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(code, message, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>dao</p>
<p>在dao包创建Payment接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改</span></span><br><span class="line">    <span class="function">Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里用增和改进行测试，有兴趣的可以自己加其他的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper</p>
<p>在resources目录下新建mapper目录，然后新建PaymentMapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qzh.springcloud.dao.PaymentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;create&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        insert into payment(serial) values (#&#123;serial&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getPaymentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Payment&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Long&quot;</span>&gt;</span></span><br><span class="line">        select * from payment where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure>
</li>
<li><p>service</p>
<p>在springcloud包下新建service.PaymentService接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Payment <span class="title">getPaymentById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在service包下新建impl包PaymentServiceIpml实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceIpml</span> <span class="keyword">implements</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span>   </span><br><span class="line">    <span class="keyword">private</span> PaymentDao paymentDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.create(payment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Payment <span class="title">getPaymentById</span><span class="params">(Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentDao.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<p>在controller包下创建PaymentController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">//日志</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前后端分离，所以不能直接返回对象，数据要先经过CommonResult封装再返回</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;******插入的数据为：&quot;</span> + payment);</span><br><span class="line">        log.info(<span class="string">&quot;******插入结果：&quot;</span> + result);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;插入成功,serverPort&quot;</span>+serverPort, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;插入失败,serverPort&quot;</span>+serverPort, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;******查询结果：&quot;</span> + payment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;查询成功,serverPort&quot;</span>+serverPort, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;查询失败，查询ID&quot;</span>+id, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>测试。这里是采用Postman工具进行测试</p>
<p>浏览器输入<code>http://localhost:8001/payment/get/1</code>，查询成功。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/2.png"></p>
<p>输入<code>http://localhost:8001/payment/create</code>发送post请求，往数据库中插入一条数据，需要把数据写到body中。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/3.png"></p>
</li>
</ol>
<h3 id="热部署Devtools-只能在开发阶段使用"><a href="#热部署Devtools-只能在开发阶段使用" class="headerlink" title="热部署Devtools(只能在开发阶段使用)"></a>热部署Devtools(只能在开发阶段使用)</h3><ol>
<li><p>在cloud-provider-payment8001项目中添加热部署依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个插件到父类总工程的pom.xml里（这一步之前也已经做了）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">addResources</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addResources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当修改代码之后，Build Project 按热键<code>Crtl+F9</code>。IDEA版本为2020.1，也可以按绿色的锤子</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/4.png"></p>
</li>
</ol>
<h3 id="微服务消费者订单模块cloud-consumer-order80"><a href="#微服务消费者订单模块cloud-consumer-order80" class="headerlink" title="微服务消费者订单模块cloud-consumer-order80"></a>微服务消费者订单模块cloud-consumer-order80</h3><ol>
<li><p>新建模块，命名cloud-consumer-order80</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在resources目录下新建application.yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#访问一个网站时，默认是80端口，给用户80端口，用户就可以不用加端口直接访问页面</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<p>com.qzh.springcloud.OrderMain80</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>复制cloud-provider-payment8001项目里的entities（里面2个实体类）到本项目（cloud-consumer-order80）的springcloud包下。</p>
</li>
<li><p>springcloud包下新建config包并创建ApplicationContextConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//往容器中添加一个RestTemplate</span></span><br><span class="line">    <span class="comment">//RestTemplate 提供了多种便捷访问远程http服务的方法</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建OrderController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://localhost:8001&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create</span><span class="params">(Payment payment)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;********插入的数据：&quot;</span> + payment);</span><br><span class="line">        <span class="comment">//postForObject分别有三个参数：请求地址，请求参数，返回的对象类型</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.postForObject(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/consumer/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;********查询的id：&quot;</span> + id);</span><br><span class="line">        <span class="comment">//getForObject两个参数：请求地址，返回的对象类型</span></span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>测试</p>
<p>在浏览器中输入<code>http://localhost/consumer/payment/create?serial=王五</code>插入一条数据。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/5.png"></p>
<p>在浏览器中输入<code>http://localhost/consumer/payment/get/8</code>成功查询到数据。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/6.png"></p>
</li>
</ol>
<h2 id="工程重构"><a href="#工程重构" class="headerlink" title="工程重构"></a>工程重构</h2><p>​    多个模块中有相同的代码，应该抽离出来，变成一个独立的模块，比如上面两个工程中的实体类</p>
<ol>
<li><p>创建新模块 ：cloud-api-commons</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   一个Java工具包     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝entities到本项目中（路径一定要一样）</p>
</li>
<li><p><code>mvn:install</code>将工程发布到仓库方便其他工程使用。</p>
</li>
<li><p>删除另外两个项目中的entities包</p>
</li>
<li><p>在另外两个项目pom文件加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引用定义的api通用包 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新测试</p>
<p>增加</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/7.png"></p>
<p>查询</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud02/8.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记04---Zookeeper和Consul</title>
    <url>/HuaStarOS.github.io/2021/01/06/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B004-Zookeeper%E5%92%8CConsul/</url>
    <content><![CDATA[<h2 id="Zookeeper服务注册于发现"><a href="#Zookeeper服务注册于发现" class="headerlink" title="Zookeeper服务注册于发现"></a>Zookeeper服务注册于发现</h2><p>​    zookeeper，它是一个<strong>分布式服务框架</strong>，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。<strong>可以实现注册中心功能</strong></p>
<h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><ol>
<li><p>新建工程cloud-provider-payment-8004</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--因为接下来不会用到数据库，所以不导入数据库相关的依赖（防止没配置而报错）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SpringCloud 整合zookeeper客户端--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--先排除自带的zookeeper3.5.3--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--再添加合本机zookeeper客户端一样的版本(如果跟本机的版本运行报错，就降低版本)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         	<span class="comment">&lt;!--排除jar包自带的Slf4j 不然会报错--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8004</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#服务别名——注册到zookeeper注册中心的名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-payment</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span> </span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@EnableDiscoveryClient</span> 这个注解用于向使用consul或者zookeeper作为注册中心的时候注册服务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8004</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8004.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务,创建controller.PaymentController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentZK</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with zookeeper: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动zookeeper注册中心，在zookeeper安装包下的bin目录中</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/1.png"></p>
</li>
<li><p>启动cloud-provider-payment-8004，并在zkCli.cmd中查看是否注册成功，输入<code>ls /services</code>即可查看</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/2.png"></p>
<ol start="8">
<li><p>测试，在浏览器中输入<code>http://localhost:8004/payment/zk</code></p>
<p><img src="https://gitee.com/huastaros/image/blob/main/post/springcloud/springcloud04/3.jpg"></p>
</li>
</ol>
<h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><ol>
<li><p>新建cloud-consumerzk-order80</p>
</li>
<li><p>改pom,pom文件内容和8004一样</p>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务名称-----注册zookeeper到注册中心的名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-consumer-payment</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderZKMain80.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>创建config.ApplicationContextConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>   <span class="comment">//负载均衡</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建controller.OrderZKController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderZKController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://cloud-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/payment/zk&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/zk&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
</li>
</ol>
<ol start="6">
<li><p>启动项目，在并在zkCli.cmd中查看是否注册成功，输入<code>ls /services</code>即可查看</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/4.png"></p>
</li>
<li><p>测试，在浏览器中输入<code>http://localhost/consumer/payment/zk</code></p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/5.png"></p>
<h2 id="Consul服务注册与发现"><a href="#Consul服务注册与发现" class="headerlink" title="Consul服务注册与发现"></a>Consul服务注册与发现</h2><p>​    Consul官网：<a href="https://www.consul.io/">https://www.consul.io/</a><br>​    Consul中文文档：<a href="https://www.springcloud.cc/spring-cloud-consul.html">https://www.springcloud.cc/spring-cloud-consul.html</a></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    Consul是一种服务网格解决方案，提供具有服务发现，配置和分段功能的全功能控制平面。这些功能中的每一个都可以根据需要单独使用，也可以一起使用以构建完整的服务网格。Consul需要一个数据平面，并支持代理和本机集成模型。Consul附带了一个简单的内置代理，因此一切都可以直接使用，还支持Envoy等第三方代理集成。</p>
<p><strong>主要特定</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/6.png"></p>
<ul>
<li><p>服务发现：Consul的客户端可以注册服务，例如 api或mysql，其他客户端可以使用Consul来发现给定服务的提供者。使用DNS或HTTP，应用程序可以轻松找到它们依赖的服务。</p>
</li>
<li><p>健康检测：领事客户端可以提供任意数量的运行状况检查，这些检查可以与给定服务（“ Web服务器是否返回200 OK”）或本地节点（“内存利用率低于90％”）相关。操作员可以使用此信息来监视群集的运行状况，服务发现组件可以使用此信息将流量从不正常的主机发送出去。</p>
</li>
<li><p>KV存储：应用程序可以将Consul的分层键/值存储用于多种目的，包括动态配置，功能标记，协调，领导者选举等。简单的HTTP API使其易于使用。</p>
</li>
<li><p>安全的服务通信：领事可以为服务生成并分发TLS证书，以建立相互TLS连接。 意图 可用于定义允许哪些服务进行通信。可以使用可以实时更改的意图轻松管理服务分段，而不必使用复杂的网络拓扑和静态防火墙规则。</p>
</li>
<li><p>多数据中心：Consul开箱即用地支持多个数据中心。这意味着Consul的用户不必担心会构建其他抽象层以扩展到多个区域。</p>
<p> Consul旨在对DevOps社区和应用程序开发人员友好，使其非常适合现代，灵活的基础架构。</p>
</li>
</ul>
<h3 id="使用Consul"><a href="#使用Consul" class="headerlink" title="使用Consul"></a>使用Consul</h3><ol>
<li><p>下载Consul安装包，下载地址<code>https://www.consul.io/downloads</code>下载好并解压，在exe文件的所在的目录中进入cmd,输入<code>consul agnet -dev</code>启动consul</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/7.png"></p>
</li>
</ol>
<ol start="2">
<li><p>在浏览器中输入<code>http://localhost:8500</code>进入consul管理界面</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/8.png"></p>
</li>
</ol>
<h3 id="服务提供者-1"><a href="#服务提供者-1" class="headerlink" title="服务提供者"></a>服务提供者</h3><ol>
<li><p>新建工程cloud-provider-payment-8006</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--因为接下来不会用到数据库，所以不导入数据库相关的依赖（防止没配置而报错）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">&lt;!--spring cloud consul-server --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-consul-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8006</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consul-provider-payment</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># consul注册中心</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">consul:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8500</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">service-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@EnableDiscoveryClient</span> 这个注解用于向使用consul或者zookeeper作为注册中心的时候注册服务</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8006</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8006.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务,创建controller.PaymentController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentConsul</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;springcloud with consul: &quot;</span>+serverPort+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，在浏览器中输入<code>http://localhost:8500/</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/9.png"></p>
<p>测试，在浏览器中输入<code>http://localhost:8006/payment/consul</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/10.png"></p>
</li>
</ol>
<h3 id="服务消费者-1"><a href="#服务消费者-1" class="headerlink" title="服务消费者"></a>服务消费者</h3><ol>
<li><p>新建模块cloud-consumer-consul-order80</p>
</li>
<li><p>pom（与8006相同）</p>
</li>
<li><p>yml（端口号为80，应用名为consul-consumer-order，其他和8006相同）</p>
</li>
<li><p>主启动类（与8006相同）</p>
</li>
<li><p>config（和zk的消费者相同）</p>
</li>
<li><p>controller.OrderConsulController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConsulController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVOKE_URL = <span class="string">&quot;http://consul-provider-payment&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/consumer/payment/consul&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String result = restTemplate.getForObject(INVOKE_URL + <span class="string">&quot;/payment/consul&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/11.png"></p>
<p>测试，在浏览器中输入<code>http://localhost/consumer/payment/consul</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/12.png"></p>
</li>
</ol>
<h2 id="三者的异同点"><a href="#三者的异同点" class="headerlink" title="三者的异同点"></a>三者的异同点</h2><table>
<thead>
<tr>
<th align="center">组件名</th>
<th align="center">语言</th>
<th align="center">CAP</th>
<th align="center">服务健康检查</th>
<th>对外暴露接口</th>
<th>Spring Cloud基成</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Eureka</td>
<td align="center">Java</td>
<td align="center">AP</td>
<td align="center">可配支持</td>
<td>HTTP</td>
<td>已集成</td>
</tr>
<tr>
<td align="center">Consul</td>
<td align="center">GO</td>
<td align="center">CP</td>
<td align="center">支持</td>
<td>HTTP|DNS</td>
<td>已集成</td>
</tr>
<tr>
<td align="center">Zookeeper</td>
<td align="center">Java</td>
<td align="center">CP</td>
<td align="center">支持</td>
<td>客户端</td>
<td>已集成</td>
</tr>
</tbody></table>
<h3 id="CAP原则"><a href="#CAP原则" class="headerlink" title="CAP原则"></a>CAP原则</h3><ol>
<li><p><strong>C (Consistency) 一致性</strong> :</p>
<p>​    一致性指的是所有节点在同一时间的数据完全一致。</p>
</li>
<li><p><strong>A (Availability) 可用性</strong> :</p>
<p>​    可用性指服务一直可用，保证每个请求不管成功或者失败都有响应，而且是正常响应时间。</p>
</li>
<li><p><strong>P (Partition tolerance) 分区容错性</strong> :</p>
<p>​    分区容错性指在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud04/14.png"></p>
<p>​    CAP原则又称CAP定理，指的是在一个分布式系统中，一致性 (Consistency)、可用性(Availability) 、分区容错性(Partition tolerance)。CAP原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p>
<p>​    CAP的三进二: CA、AP、CP</p>
<h3 id="CAP原则的核心"><a href="#CAP原则的核心" class="headerlink" title="CAP原则的核心"></a>CAP原则的核心</h3><ol>
<li>一个分布式系统不可能同时很好的满足<strong>一致性</strong>，<strong>可用性</strong>和<strong>分区容错性</strong>这三个需求</li>
<li>根据CAP原则,将NoSQL数据库分成了满足CA原则，满足CP原则和满足AP原则三大类:<ul>
<li>CA:单点集群，满足一致性，可用性的系统，通常可扩展性较差</li>
<li>CP:满足一致性,分区容错性的系统，通常性能不是特别高</li>
<li>AP:满足可用性,分区容错性的系统，通常可能对一致性要求低一些</li>
</ul>
</li>
</ol>
<h3 id="作为服务注册中心，Eureka比Zookeeper好在哪里"><a href="#作为服务注册中心，Eureka比Zookeeper好在哪里" class="headerlink" title="作为服务注册中心，Eureka比Zookeeper好在哪里?"></a>作为服务注册中心，Eureka比Zookeeper好在哪里?</h3><p>​    <code>著名的CAP理论指出，一个分布式系统不可能同时满足C (一致性)、A (可用性)、P (容错性)。由于分区容错性P在分布式系统中是必须要保证的，因此我们只能在A和C之间进行权衡。</code></p>
<p>**Zookeeper保证的是CP **</p>
<p>​    当向注册中心查询服务列表时，我们可以容忍注册中心返回的是几分钟以前的注册信息，但不能接受服务直接down掉不可用。也就是说，服务注册功能对可用性的要求要高于一致性。<strong>但是zk会出现这样一种情况，当master节点因为网络故障与其他节点失去联系时,剩余节点会重新进行leader选举。问题在于，选举leader的时间太长,30~120s，且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫痪。</strong>在云部署的环境下，因为网络问题使得zk集群失去master’节点是较大概率会发生的事件，虽然服务最终能够恢复，但是漫长的选举时间导致的注册长期不可用是不能容忍的。</p>
<p><strong>Eureka保证的是AP</strong></p>
<p>​    Eureka看明白了这一点, 因此在设计时就优先保证可用性。Eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的工作，剩余的节点依然可以提供注册和查询服务。而Eureka的客户端在向某个Eureka注册时，如果发现连接失败，则会自动切换至其他节点，只要有一台Eureka还在, 就能保住注册服务的可用性,只不过查到的信息可能不是最新的，除此之外，Eureka还有一种自我保护机制，如果在15分钟内超过85%的节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几种情况:</p>
<ol>
<li>Eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务</li>
<li>Eureka仍然能够接受新服务的注册和查询请求，但是不会被同步到其他节点上(即保证当前节点依然可用)</li>
<li>当网络稳定时，当前实例新的注册信息会被同步到其他节点中</li>
</ol>
<p>  <strong>因此,Eureka可以很好的应对因网络故障导致部分节点失去联系的情况，而不会像Zookeeper那样使整个注册服务瘫痪</strong></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记03---Eureka服务注册与发现</title>
    <url>/HuaStarOS.github.io/2021/01/06/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B003-Eureka%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="Eureka服务注册中心"><a href="#Eureka服务注册中心" class="headerlink" title="Eureka服务注册中心"></a>Eureka服务注册中心</h2><h3 id="什么是Eureka"><a href="#什么是Eureka" class="headerlink" title="什么是Eureka"></a>什么是Eureka</h3><ul>
<li>Netflix在涉及Eureka时，遵循的就是API原则.</li>
<li>Eureka是Netflix的有个子模块，也是核心模块之一。Eureka是基于REST的服务，用于定位服务，以实现云端中间件层服务发现和故障转移，服务注册与发现对于微服务来说是非常重要的，有了服务注册与发现，只需要使用服务的标识符，就可以访问到服务，而不需要修改服务调用的配置文件了，功能类似于Dubbo的注册中心，比如Zookeeper.</li>
</ul>
<h3 id="原理理解"><a href="#原理理解" class="headerlink" title="原理理解"></a>原理理解</h3><ul>
<li><p><strong>Eureka基本的架构</strong></p>
<ul>
<li><p>Springcloud 封装了Netflix公司开发的Eureka模块来实现服务注册与发现 (对比Zookeeper).</p>
</li>
<li><p>Eureka采用了C-S的架构设计，EurekaServer作为服务注册功能的服务器，他是服务注册中心.</p>
</li>
<li><p>而系统中的其他微服务，使用Eureka的客户端连接到EurekaServer并维持心跳连接。这样系统的维护人员就可以通过EurekaServer来监控系统中各个微服务是否正常运行，Springcloud 的一些其他模块 (比如Zuul) 就可以通过EurekaServer来发现系统中的其他微服务，并执行相关的逻辑.</p>
<p>基本架构图，右边是Duddo的架构图</p>
</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/1.png"></p>
</li>
</ul>
<ul>
<li><strong>两大组件</strong><ul>
<li>Eureka 包含两个组件：<strong>Eureka Server</strong> 和 <strong>Eureka Client</strong>.</li>
<li>Eureka Server 提供服务注册，各个节点启动后，回在EurekaServer中进行注册，这样Eureka Server中的服务注册表中将会储存所有课用服务节点的信息，服务节点的信息可以在界面中直观的看到.</li>
<li>Eureka Client 是一个Java客户端，用于简化EurekaServer的交互，客户端同时也具备一个内置的，使用轮询负载算法的负载均衡器。在应用启动后，将会向EurekaServer发送心跳 (默认周期为30秒) 。如果Eureka Server在多个心跳周期内没有接收到某个节点的心跳，EurekaServer将会从服务注册表中把这个服务节点移除掉 (默认周期为90s).</li>
</ul>
</li>
<li><strong>三大角色</strong><ul>
<li>Eureka Server：提供服务的注册与发现</li>
<li>Service Provider：服务生产方，将自身服务注册到Eureka中，从而使服务消费方能狗找到</li>
<li>Service Consumer：服务消费方，从Eureka中获取注册服务列表，从而找到消费服务</li>
</ul>
</li>
</ul>
<h2 id="单机Eureka构建步骤"><a href="#单机Eureka构建步骤" class="headerlink" title="单机Eureka构建步骤"></a>单机Eureka构建步骤</h2><h3 id="IDEA生成eurekaServer端服务注册中心"><a href="#IDEA生成eurekaServer端服务注册中心" class="headerlink" title="IDEA生成eurekaServer端服务注册中心"></a>IDEA生成eurekaServer端服务注册中心</h3><p><strong>1. 建module</strong></p>
<p>cloud-eureka-server7001</p>
<p><strong>2. 改pom</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- eureka-server --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 一般通用配置 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 写yml</strong></p>
<p>在resources目录下新建application.yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span>  <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#false表示不向注册中心注册自己（想注册也可以，不过没必要）</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment">#false表示自己端就是注册中心，职责就是维护服务实例，并不需要去检索服务</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#设置与eurekaServer交互的地址查询服务和注册服务都需要依赖这个地址</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 主启动</strong></p>
<p>在java包下新建com.angenin.springcloud.EurekaMain7001</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">//表示此项目是eureka的服务注册中心</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaMain7001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaMain7001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5. 测试</strong></p>
<p>启动项目，在浏览器输入<code>http://localhost:7001/</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/2.png"></p>
<h3 id="将服务提供者provider-8001注册进EurekaServer"><a href="#将服务提供者provider-8001注册进EurekaServer" class="headerlink" title="将服务提供者provider-8001注册进EurekaServer"></a>将服务提供者provider-8001注册进EurekaServer</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml文件中添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#true表示向注册中心注册自己，默认为true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#是否从EurekaServer抓取已有的注册信息，默认为true。单节点无所谓，集群必须设置为true才能配合ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主配置类上加上<code>@EnableEurekaClient</code>注解，表示这个项目是eureka的客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//表示此项目是eureka的客户端</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="4">
<li><p>启动项目，然后刷新页面，成功注册进注册中心。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/4.png"></p>
</li>
<li><p>在yml文件中application.name就是注册进注册中心时的服务名。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/5.png"></p>
</li>
</ol>
<h3 id="将服务消费者consumer80注册进EurekaServer"><a href="#将服务消费者consumer80注册进EurekaServer" class="headerlink" title="将服务消费者consumer80注册进EurekaServer"></a>将服务消费者consumer80注册进EurekaServer</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- eureka-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml文件中添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-order-service</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主配置类上加上<code>@EnableEurekaClient</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//表示此项目是eureka的客户端</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，刷新页面</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/6.png"></p>
<h2 id="集群Eureka构建步骤"><a href="#集群Eureka构建步骤" class="headerlink" title="集群Eureka构建步骤"></a>集群Eureka构建步骤</h2><p><strong>搭建Eureka注册中心集群，实现负载均衡+故障容错。</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/7.png"></p>
<p>Eureka集群：<strong>相互注册，相互守望</strong>。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/8.png"></p>
<h3 id="构建eurekaServer集群环境"><a href="#构建eurekaServer集群环境" class="headerlink" title="构建eurekaServer集群环境"></a>构建eurekaServer集群环境</h3><ol>
<li><p>参照cloud-eureka-server7001新建cloud-eureka-server7002</p>
</li>
<li><p>Windows系统修改hosts文件(在<code>C:\windows\System32\drivers\etc</code>下)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1       eureka7001.com</span><br><span class="line">127.0.0.1       eureka7002.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据电脑情况考虑是否要加中一项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">127.0.0.1		eureka7003.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改7001的yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7001.com</span>  <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机</span></span><br><span class="line">      <span class="comment">#defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line">      <span class="comment">#集群版  相互注册，相互守望</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7002.com:7002/eureka/</span></span><br><span class="line"><span class="comment">#集群版  如果是三个的话就向其他两个注册</span></span><br><span class="line"><span class="comment"># defaultZone: http://eureka7002.com:7002/eureka/, http://eureka7003.com:7003/eureka/ </span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改7002的yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">eureka7002.com</span>  <span class="comment">#eureka服务端的实例名称</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#集群版  相互注册，相互守望</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后启动这三个项目</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/10.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/9.png"></p>
<h3 id="将服务提供者provider-8001和服务消费者consumer80注册到集群配置中"><a href="#将服务提供者provider-8001和服务消费者consumer80注册到集群配置中" class="headerlink" title="将服务提供者provider-8001和服务消费者consumer80注册到集群配置中"></a>将服务提供者provider-8001和服务消费者consumer80注册到集群配置中</h3><p>把两个项目的yml文件中的defaultZone改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">#集群版</span></span><br><span class="line"><span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure>

<p>启动4个项目进行测试：（先启动集群，再启动8001，最后启动80）<br>集群后台截图：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/12.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/13.png"></p>
<h3 id="构建服务提供者集群环境"><a href="#构建服务提供者集群环境" class="headerlink" title="构建服务提供者集群环境"></a>构建服务提供者集群环境</h3><ol>
<li><p>按照8001新建8002。（除了要yml文件中需要改端口号和主配置类，其他直接复制8001的，yml文件中的应用名不需要改，因为是集群，所以应用名需要一致）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8002</span></span><br><span class="line"><span class="comment">#spring配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-payment-service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 向注册中心 Eureka Server注册服务</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 向注册中心请求服务，单节点无所谓，集群必须设置为true才能配合Ribbon使用负载均衡</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line"><span class="comment">#      defaultZone: http://localhost:7001/eureka</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span> </span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>分别在所有的服务提供者的修改PaymentController（这个@Value是spring的注解）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/payment/create&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">create</span><span class="params">(<span class="meta">@RequestBody</span> Payment payment)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = paymentService.create(payment);</span><br><span class="line">        log.info(<span class="string">&quot;*********插入结果&quot;</span> + result);</span><br><span class="line">        <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;插入成功,serverPort&quot;</span>+serverPort, result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;插入失败,serverPort&quot;</span>+serverPort, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span>Long id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Payment payment = paymentService.getPaymentById(id);</span><br><span class="line">        log.info(<span class="string">&quot;*********查询结果&quot;</span> + payment);</span><br><span class="line">        <span class="keyword">if</span> (payment != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">200</span>, <span class="string">&quot;查询成功,serverPort&quot;</span>+serverPort, payment);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> CommonResult(<span class="number">444</span>, <span class="string">&quot;查询失败，查询ID&quot;</span>+id, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改消费者的OrderController，把写死的url改为服务名称：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAYMENT_URL = <span class="string">&quot;http://CLOUD-PAYMENT-SERVICE&quot;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在消费者的ApplicationContextConfig里的restTemplate方法上加上<code>@LoadBalanced</code>，开启负载均衡功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>  <span class="comment">//使用@LoadBalanced注解赋予RestTemplate负载均衡的能力</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动eurekaServer集群，启动提供者集群，启动消费者。如果启动提供者后出现，这个错误：<code>Public Key Retrieval is not allowed</code>请在yml文件中的datasource.datasource.url后加上<code>&amp;allowPublicKeyRetrieval=true</code>即可解决。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/14.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/15.png"></p>
</li>
</ol>
<p>   在浏览器中输入<code>http://localhost/consumer/payment/get/1</code>，多次刷新可以看到，提供服务的应用在不同的切换，实现负载均衡的效果。</p>
<p>   <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/16.png"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/20.png"></p>
<h2 id="actuator微服务信息完善"><a href="#actuator微服务信息完善" class="headerlink" title="actuator微服务信息完善"></a>actuator微服务信息完善</h2><p>修改三个微服务的yml文件：</p>
<ol>
<li><p>cloud-consumer-order80</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment">#instance要和client对齐</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">order80</span> <span class="comment">#修改显示的主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示IP地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cloud-provider-payment-8001</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment">#instance要和client对齐</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8001</span> <span class="comment">#修改显示的主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示IP地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cloud-provider-payment-8002</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment">#instance要和client对齐</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">payment8008</span> <span class="comment">#修改显示的主机名</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#是否显示IP地址</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>修改前:</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/aduix.png"></p>
<p>修改后：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/22.png"></p>
<h2 id="服务发现Discovery"><a href="#服务发现Discovery" class="headerlink" title="服务发现Discovery"></a>服务发现Discovery</h2><p><strong>对于注册进eureka里面的微服务，可以通过服务发现来获得该服务的信息。</strong></p>
<h3 id="修改提供者集群的controller"><a href="#修改提供者集群的controller" class="headerlink" title="修改提供者集群的controller"></a>修改提供者集群的controller</h3><ol>
<li><p>在主配置类上加上<code>@EnableDiscoveryClient</code>注解，启用发现客户端。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentMain8001.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在两个提供者的PaymentController中加入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;	<span class="comment">//springframework的DiscoveryClient（不要导错包了）</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/discovery&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">discovery</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取服务列表的信息</span></span><br><span class="line">        List&lt;String&gt; services = discoveryClient.getServices();</span><br><span class="line">        <span class="keyword">for</span> (String element : services) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;*******element：&quot;</span> + element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取CLOUD-PAYMENT-SERVICE服务的所有具体实例</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (ServiceInstance instance : instances) &#123;</span><br><span class="line">            <span class="comment">//getServiceId服务器id getHost主机名称 getPort端口号  getUri地址</span></span><br><span class="line">            log.info(instance.getServiceId() + <span class="string">&quot;\t&quot;</span> + instance.getHost() + <span class="string">&quot;\t&quot;</span> + instance.getPort() + <span class="string">&quot;\t&quot;</span> + instance.getUri());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.discoveryClient;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>对8001进行测试，在浏览器输入：<code>http://localhost:8001/payment/discovery</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/23.png"></p>
<p>在IDEA中</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/24.png"></p>
</li>
</ol>
<h2 id="Eureka自我保护"><a href="#Eureka自我保护" class="headerlink" title="Eureka自我保护"></a>Eureka自我保护</h2><p>​    一句话总结就是：<strong>某时刻某一个微服务不可用，eureka不会立即清理，依旧会对该微服务的信息进行保存！</strong></p>
<ul>
<li><p>默认情况下，当eureka server在一定时间内没有收到实例的心跳，便会把该实例从注册表中删除（<strong>默认是90秒</strong>），但是，如果短时间内丢失大量的实例心跳，便会触发eureka server的自我保护机制，比如在开发测试时，需要频繁地重启微服务实例，但是我们很少会把eureka server一起重启（因为在开发过程中不会修改eureka注册中心），<strong>当一分钟内收到的心跳数大量减少时，会触发该保护机制</strong>。可以在eureka管理界面看到Renews threshold和Renews(last min)，当后者（最后一分钟收到的心跳数）小于前者（心跳阈值）的时候，触发保护机制，会出现红色的警告：<code>EMERGENCY!EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&#39;RE NOT.RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEGING EXPIRED JUST TO BE SAFE.</code>从警告中可以看到，eureka认为虽然收不到实例的心跳，但它认为实例还是健康的，eureka会保护这些实例，不会把它们从注册表中删掉。</p>
</li>
<li><p>该保护机制的目的是避免网络连接故障，在发生网络故障时，微服务和注册中心之间无法正常通信，但服务本身是健康的，不应该注销该服务，如果eureka因网络故障而把微服务误删了，那即使网络恢复了，该微服务也不会重新注册到eureka server了，因为只有在微服务启动的时候才会发起注册请求，后面只会发送心跳和服务列表请求，这样的话，该实例虽然是运行着，但永远不会被其它服务所感知。所以，eureka server在短时间内丢失过多的客户端心跳时，会进入自我保护模式，该模式下，eureka会保护注册表中的信息，不在注销任何微服务，当网络故障恢复后，eureka会自动退出保护模式。自我保护模式可以让集群更加健壮。</p>
</li>
<li><p>但是我们在开发测试阶段，需要频繁地重启发布，如果触发了保护机制，则旧的服务实例没有被删除，这时请求有可能跑到旧的实例中，而该实例已经关闭了，这就导致请求错误，影响开发测试。所以，在开发测试阶段，我们可以把自我保护模式关闭，只需在eureka server配置文件中加上如下配置即可：<code>eureka.server.enable-self-preservation=false</code>【不推荐关闭自我保护机制】</p>
<p><strong>开启了自我保护机制</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/25.png"></p>
</li>
</ul>
<h4 id="禁止自我保护"><a href="#禁止自我保护" class="headerlink" title="禁止自我保护"></a>禁止自我保护</h4><p>先把cloud-eureka-server7001和cloud-provider-payment8001都切回单机版测试禁止自我保护。</p>
<p>cloud-eureka-server7001的yml文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  client</span></span><br><span class="line"><span class="comment">#  	...		server与client对齐</span></span><br><span class="line"> <span class="attr">server:</span></span><br><span class="line">  <span class="comment">#关闭自我保护，默认为true</span></span><br><span class="line">   <span class="attr">enable-self-preservation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#心跳的间隔时间，单位毫秒</span></span><br><span class="line">   <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure>

<p>cloud-provider-payment8001的yml文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Eureka客户端向服务端发送心跳的时间间隔，单位秒（默认30秒）</span></span><br><span class="line"><span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line"><span class="comment">#Eureka服务端在收到最后一次心跳后等待的时间上限，单位秒（默认90秒），超时剔除服务</span></span><br><span class="line"><span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>启动注册中心和服务提供者：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/26.png"></p>
<p>然后关闭提供者（模拟网络延时），服务提供者直接被剔除。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud03/27.png"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记05---服务调用Ribbon和OpenFeign</title>
    <url>/HuaStarOS.github.io/2021/01/08/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B005-Ribbon%E5%92%8COpenFeign/</url>
    <content><![CDATA[<h2 id="Ribbon负载均衡服务调用"><a href="#Ribbon负载均衡服务调用" class="headerlink" title="Ribbon负载均衡服务调用"></a>Ribbon负载均衡服务调用</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>Spring Cloud Ribbon 是基于Netflix Ribbon 实现的一套<strong>客户端负载均衡的工具</strong>。</li>
<li>Spring-Cloud-Ribbon 作为微服务框架的负载均衡组件，默认使用<strong>RestTemplate接口</strong>调用外部服务接口。</li>
<li>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法，将 Netflix 的中间层服务连接在一起。Ribbon 的客户端组件提供一系列完整的配置项，如：连接超时、重试等。简单的说，就是在配置文件中列出 LoadBalancer (简称LB：负载均衡) 后面所有的及其，Ribbon 会自动的帮助你基于某种规则 (如简单轮询，随机连接等等) 去连接这些机器。我们也容易使用 Ribbon 实现自定义的负载均衡算法</li>
</ul>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul>
<li><p>LB，即负载均衡 (LoadBalancer) ，在微服务或分布式集群中经常用的一种应用。</p>
</li>
<li><p><strong>负载均衡简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统的HA (高用)。</strong></p>
</li>
<li><p>常见的负载均衡软件有 Nginx、Lvs 等等。</p>
</li>
<li><p>Dubbo、SpringCloud 中均给我们提供了负载均衡，<strong>SpringCloud 的负载均衡算法可以自定义</strong>。</p>
</li>
<li><p>负载均衡简单分类：</p>
<ul>
<li><p>集中式LB</p>
<ul>
<li>即在服务的提供方和消费方之间使用独立的LB设施，如<strong>Nginx(反向代理服务器)**，客户端所有的请求都会交给 **Nginx</strong>,然后由 <strong>Nginx</strong>实现请求的转发，即负载均衡是由服务器实现的(<strong>Nginx</strong>)</li>
</ul>
</li>
<li><p>进程式 LB</p>
<ul>
<li>将LB逻辑集成到服务消费者，服务消费者从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选出一个合适的服务器进行调用。</li>
<li><strong>Ribbon 就属于进程内LB</strong>，它只是一个类库，集成于服务消费者进程，服务消费者通过它来获取到服务提供者的地址！  </li>
</ul>
</li>
</ul>
</li>
<li><p>在调用服务提供者暴露的接口的时候，<strong>Ribbon</strong>会在注册中心上获取到服务提供者的信息列表(比如：IP地址和端口号等等)，之后再缓存到<strong>JVM</strong>本地。然后再从这些地址中选出一个合适的服务器进行调用。从而在<strong>本地实现HTTP远程调用</strong>，默认是30秒刷新一次。</p>
</li>
</ul>
<p>  回顾一些之前的学习，当在<code>RestTemplate</code>上加了<code>@LoadBalanced</code>之后。就能通过服务名称   <code>http://cloud-payment-service</code>调用服务提供者暴露的方法了。注意一个细节当服务消费者发起请求的时候，查看控制台输出的日志，可以知道在调用服务提供者暴露的接口的时候，<strong>Ribbon</strong>会在注册中心上获取到服务提供者的信息列表(比如：IP地址和端口号等等)，然后再从这些地址中选出一个合适的服务器进行调用。</p>
<p>  <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/1.png" alt="image-20210108032155292"></p>
<h3 id="使用Ribbon"><a href="#使用Ribbon" class="headerlink" title="使用Ribbon"></a>使用Ribbon</h3><p>​    <strong>Ribbon</strong>其实就是一个软负载均衡的客户端组件。它可以和其他发起请求的客户端结合使用，和<strong>Eureka</strong>结合只是其中的一个实例。</p>
<ol>
<li><p><strong>Ribbon原理图</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/2.png" alt="image-20210108033334005"></p>
</li>
<li><p><strong>Ribbon</strong>在工作的时候分成两步</p>
<ol>
<li><p>第一步先选择<strong>Eureka Server</strong>(注册中心集群)，它优先选择在同一个区域内负载较少的<strong>Server</strong>（注册中心）</p>
</li>
<li><p>第二步再根据指定的负载均衡策略，在从注册中心取到的服务提供者列表中选择一个地址进行调用。</p>
<p>其中<strong>Ribbon</strong>提供了多种负载均衡策略：比如轮询、随机和根据响应时间加权</p>
</li>
</ol>
</li>
</ol>
<ol start="3">
<li><p>在项目中使用<strong>Ribbon</strong></p>
<p>新版的eureka依赖以及集成了Ribbon依赖，所以可以不引用。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/3.png" alt="image-20210108040215352"></p>
<p>当然也可以引用在<strong>pom</strong>文件添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--Ribbon的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><p><code>@LoadBalanced</code>注解给RestTemplate开启负载均衡的能力。</p>
<p>官方文档：<a href="https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html">https://docs.spring.io/spring-framework/docs/5.2.2.RELEASE/javadoc-api/org/springframework/web/client/RestTemplate.html</a></p>
<p><strong>getForObject/getForEntity方法</strong><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/4.png" alt="image-20210108041742361"></p>
<h4 id="测试getForEntity方法"><a href="#测试getForEntity方法" class="headerlink" title="测试getForEntity方法"></a>测试getForEntity方法</h4><p>​    getForObject已经用过了，所以只测试getForEntity方法。 在消费者cloud-consumer-order80的OrderController方法中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/getEntity/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPayment2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;********查询的id：&quot;</span> + id);</span><br><span class="line">    <span class="comment">//getForObject两个参数：请求地址，返回的对象类型</span></span><br><span class="line">    <span class="comment">//return restTemplate.getForObject(PAYMENT_URL + &quot;/payment/get/&quot; + id, CommonResult.class);</span></span><br><span class="line">    ResponseEntity&lt;CommonResult&gt; entity = restTemplate.getForEntity(PAYMENT_URL + <span class="string">&quot;/payment/get/&quot;</span> + id, CommonResult.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getStatusCode获取状态码，is2xxSuccessful如果是状态码是2xx</span></span><br><span class="line">    <span class="keyword">if</span>(entity.getStatusCode().is2xxSuccessful())&#123;</span><br><span class="line">        <span class="comment">//返回响应体body</span></span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入<code>http://localhost/consumer/payment/getForEntity/8</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/5.png" alt="image-20210108042128482"></p>
<h4 id="测试postForEntity方法"><a href="#测试postForEntity方法" class="headerlink" title="测试postForEntity方法"></a>测试postForEntity方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment2/create&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">create2</span><span class="params">(Payment payment)</span> </span>&#123;</span><br><span class="line">    ResponseEntity&lt;CommonResult&gt; entity = restTemplate.postForEntity(PAYMENT_URL + <span class="string">&quot;/payment/create&quot;</span>, payment, CommonResult.class);</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CommonResult&lt;&gt;(<span class="number">444</span>, <span class="string">&quot;操作失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器中输入<code>http://localhost/consumer/payment2/create?serial=JAVA</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/6.png" alt="image-20210108042527573"></p>
<h3 id="Ribbon核心组件IRule"><a href="#Ribbon核心组件IRule" class="headerlink" title="Ribbon核心组件IRule"></a>Ribbon核心组件IRule</h3><p>IRUle接口的实现类：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/7.png" alt="image-20210108042836547"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/8.png" alt="image-20210108043359760"></p>
<p><strong>默认为RoundRobinRule轮询</strong></p>
<p>替换</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/9.png" alt="image-20210108045023083"></p>
<p><strong>Ribbon的自定义配置类不推荐放在@ComponentScan所扫描的当前包下以及子包下</strong>，否则这个自定义配置类就会被所有的Ribbon客户端共享，达不到为指定的Ribbon定制配置，<strong>而@SpringBootApplication注解里就有@ComponentScan注解</strong>，所以不可以放在主启动类所在的包下。（因为Ribbon是客户端（消费者）这边的，所以Ribbon的自定义配置类是在客户端（消费者）添加，不需要在提供者或注册中心添加）</p>
<ol>
<li><p>Ribbon的自定义配置类不能放在springcloud包下，要在qzh包下再新建一个myrule包。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/10.png" alt="image-20210108045300134"></p>
</li>
<li><p>在此包下新建MySelfRule自定义配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyselfRule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">myRule</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类上添加</p>
<p><code>@RibbonClient(name = &quot;CLOUD-PAYMENT-SERVICE&quot;, configuration = MySelfRule.class)</code><br>name为指定的服务名（服务名必须与注册中心显示的服务名大小写一致）<br>configuration为指定服务使用自定义配置（自定义负载均衡机制）</p>
</li>
<li><p>启动eurekaserver集群，提供者集群，消费者。</p>
</li>
<li><p>浏览器输入<code>http://localhost/consumer/payment/get/8</code>，多次刷新实现负载均衡为随机。</p>
</li>
</ol>
<h3 id="Ribbon负载均衡—轮询算法"><a href="#Ribbon负载均衡—轮询算法" class="headerlink" title="Ribbon负载均衡—轮询算法"></a>Ribbon负载均衡—轮询算法</h3><h4 id="RoundRobinRule原理"><a href="#RoundRobinRule原理" class="headerlink" title="RoundRobinRule原理"></a>RoundRobinRule原理</h4><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/11.png" alt="image-20210108045634122"></p>
<h4 id="RoundRobinRule源码"><a href="#RoundRobinRule源码" class="headerlink" title="RoundRobinRule源码"></a>RoundRobinRule源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoundRobinRule</span> <span class="keyword">extends</span> <span class="title">AbstractLoadBalancerRule</span> </span>&#123;</span><br><span class="line">	<span class="comment">//AtomicInteger原子整形类</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger nextServerCyclicCounter;</span><br><span class="line">	...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoundRobinRule</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//初始化nextServerCyclicCounter,并指定值为0</span></span><br><span class="line">        nextServerCyclicCounter = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	...</span><br><span class="line">	<span class="comment">//选择负载均衡机制</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">choose</span><span class="params">(ILoadBalancer lb, Object key)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//如果传入的ILoadBalancer负载均衡器为空，返回null</span></span><br><span class="line">        <span class="keyword">if</span> (lb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;no load balancer&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Server server = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//进行选择server</span></span><br><span class="line">        <span class="keyword">while</span> (server == <span class="keyword">null</span> &amp;&amp; count++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        	<span class="comment">//lb.getReachableServers()从注册中心获取所有状态是up的服务实例</span></span><br><span class="line">            List&lt;Server&gt; reachableServers = lb.getReachableServers();</span><br><span class="line">            <span class="comment">//lb.getAllServers()从注册中心获取所有服务实例</span></span><br><span class="line">            List&lt;Server&gt; allServers = lb.getAllServers();</span><br><span class="line">            <span class="comment">//状态为up的服务实例的数量</span></span><br><span class="line">            <span class="keyword">int</span> upCount = reachableServers.size();</span><br><span class="line">            <span class="comment">//所有服务实例的数量</span></span><br><span class="line">            <span class="keyword">int</span> serverCount = allServers.size();</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//如果up的服务实例数量为0或者服务实例为0，返回null</span></span><br><span class="line">            <span class="keyword">if</span> ((upCount == <span class="number">0</span>) || (serverCount == <span class="number">0</span>)) &#123;</span><br><span class="line">                log.warn(<span class="string">&quot;No up servers available from load balancer: &quot;</span> + lb);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//确定要选择哪个服务实例，通过下标选择</span></span><br><span class="line">            <span class="keyword">int</span> nextServerIndex = incrementAndGetModulo(serverCount);</span><br><span class="line">            <span class="comment">//获取服务实例</span></span><br><span class="line">            server = allServers.get(nextServerIndex);</span><br><span class="line"></span><br><span class="line">			<span class="comment">//如果服务实例为空</span></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//线程让步，线程会让出CPU执行权，让其它的线程运行。（让步后，CPU的执行权也有可能又是当前线程）</span></span><br><span class="line">                Thread.yield();</span><br><span class="line">                <span class="comment">//进入下次循环</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//获取的server还活着并且还能工作，则返回该server</span></span><br><span class="line">            <span class="keyword">if</span> (server.isAlive() &amp;&amp; (server.isReadyToServe())) &#123;</span><br><span class="line">                <span class="keyword">return</span> (server);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//否则server改为空</span></span><br><span class="line">            server = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//选择次数超过10次，返回null</span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;No available alive servers after 10 tries from load balancer: &quot;</span></span><br><span class="line">                    + lb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">incrementAndGetModulo</span><span class="params">(<span class="keyword">int</span> modulo)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//CAS加自旋锁</span></span><br><span class="line">    	<span class="comment">//CAS（Conmpare And Swap）：是用于实现多线程同步的原子指令。CAS机制当中使用了3个基本操作数：内存地址V，预期值A，要修改的新值B。更新一个变量的时候，只有当变量的预期值A和内存地址V当中的实际值相同时，才会将内存地址V对应的值修改为B。</span></span><br><span class="line">    	<span class="comment">//自旋锁：是指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。 </span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        	<span class="comment">//获取value，即0</span></span><br><span class="line">            <span class="keyword">int</span> current = nextServerCyclicCounter.get();</span><br><span class="line">            <span class="comment">//取余，为1</span></span><br><span class="line">            <span class="keyword">int</span> next = (current + <span class="number">1</span>) % modulo;</span><br><span class="line">            <span class="comment">//进行CAS判断，如果此时在value的内存地址中，如果value和current相同，则为true，返回next的值，否则就一直循环，直到结果为true</span></span><br><span class="line">            <span class="keyword">if</span> (nextServerCyclicCounter.compareAndSet(current, next))</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="手写一个轮询算法"><a href="#手写一个轮询算法" class="headerlink" title="手写一个轮询算法"></a>手写一个轮询算法</h4><ol>
<li><p>在8001和8002的PaymentController中加上这个方法，用于测试我们的自定义轮询算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/lb&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> serverPort;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务消费者cloud-consumer-order80改造</p>
<ol>
<li><p>去掉config包中ApplicationContextConfig里getRestTemplate方法上的<code>@LoadBalanced</code>注解。</p>
</li>
<li><p>在springcloud包下新建loadbalancer.MyLoadBalancer接口（自定义负载均衡机制（面向接口））</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyLoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入服务实例的集合，返回选中的服务实例</span></span><br><span class="line">    <span class="function">ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstance)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在lb包下新建自定义MyLoadBalancer接口的实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//加入容器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLB</span> <span class="keyword">implements</span> <span class="title">ILoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建一个原子整形类</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取选中的服务实例的下标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndIncrement</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> current;</span><br><span class="line">        <span class="keyword">int</span> next;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            current = <span class="keyword">this</span>.atomicInteger.get();</span><br><span class="line">            <span class="comment">//如果current是Integer的最大值，重新计算，否则加1（防止越界）</span></span><br><span class="line">            next = current &gt;= Integer.MAX_VALUE ? <span class="number">0</span> : current + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//进行CAS判断，如果不为true，进行自旋</span></span><br><span class="line">        &#125;<span class="keyword">while</span> (!<span class="keyword">this</span>.atomicInteger.compareAndSet(current, next));</span><br><span class="line">        System.out.println(<span class="string">&quot;****第几次访问，次数next：&quot;</span> + next);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceInstance <span class="title">instances</span><span class="params">(List&lt;ServiceInstance&gt; serviceInstance)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//非空判断</span></span><br><span class="line">        <span class="keyword">if</span>(serviceInstance.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行取余</span></span><br><span class="line">        <span class="keyword">int</span> index = getAndIncrement() % serviceInstance.size();</span><br><span class="line">        <span class="comment">//返回选中的服务实例</span></span><br><span class="line">        <span class="keyword">return</span> serviceInstance.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在OrderController添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> MyLoadBalancer myLoadBalancer;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line">      	</span><br><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/lb&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPaymentLB</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取CLOUD-PAYMENT-SERVICE服务的所有具体实例</span></span><br><span class="line">    List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;CLOUD-PAYMENT-SERVICE&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(instances == <span class="keyword">null</span> || instances.size() &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    ServiceInstance serviceInstance = myLoadBalancer.instances(instances);</span><br><span class="line">    URI uri = serviceInstance.getUri();</span><br><span class="line">    System.out.println(uri);</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(uri + <span class="string">&quot;/payment/lb&quot;</span>, String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中输入<code>http://localhost/consumer/payment/lb</code>，多次刷新，实现自定义轮询算法。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/12.png" alt="image-20210108052138269"></p>
</li>
</ol>
</li>
</ol>
<h2 id="OpenFeign服务接口调用"><a href="#OpenFeign服务接口调用" class="headerlink" title="OpenFeign服务接口调用"></a>OpenFeign服务接口调用</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>Feign是声明式Web Service客户端，它让微服务之间的调用变得更简单，类似controller调用service。SpringCloud集成了Ribbon和Eureka，可以使用Feigin提供负载均衡的http客户端</p>
<p><strong>只需要创建一个接口，然后添加注解即可~</strong></p>
<p>Feign，主要是社区版，大家都习惯面向接口编程。这个是很多开发人员的规范。调用微服务访问两种方法</p>
<ol>
<li>微服务名字 【ribbon】</li>
<li>接口和注解 【feign】</li>
</ol>
<p><strong>Feign能干什么？</strong></p>
<ul>
<li>Feign旨在使编写Java Http客户端变得更容易</li>
<li>前面在使用<strong>Ribbon</strong> + <strong>RestTemplate</strong>时，利用<strong>RestTemplate</strong>对Http请求的封装处理，形成了一套模板化的调用方法。但是在实际开发中，由于对服务依赖的调用可能不止一处，往往一个接口会被多处调用，所以通常都会针对每个微服务自行封装一个客户端类来包装这些依赖服务的调用。所以，<strong>Feign</strong>在此基础上做了进一步的封装，由他来帮助我们定义和实现依赖服务接口的定义，在Feign的实现下，我们只需要创建一个接口并使用注解的方式来配置它 (类似以前Dao接口上标注Mapper注解，现在是一个微服务接口上面标注一个Feign注解)，即可完成对服务提供方的接口绑定，简化了使用Spring Cloud Ribbon 时，自动封装服务调用客户端的开发量。</li>
</ul>
<p><strong>Feign默认集成了Ribbon</strong></p>
<ul>
<li>利用<strong>Ribbon</strong>维护了MicroServiceCloud-Dept的服务列表信息，并且通过轮询实现了客户端的负载均衡，而与<strong>Ribbon</strong>不同的是，通过<strong>Feign</strong>只需要定义服务绑定接口且以声明式的方法，优雅而简单的实现了服务调用。</li>
</ul>
<p>官方文档：<a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html">https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html</a></p>
<p><strong>Feign与OpenFeign的区别</strong></p>
<table>
<thead>
<tr>
<th align="center">Feign</th>
<th align="center">OpenFeign</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Feign是Spring Cloud组件中的一个轻量级RESTfu的HTTP服务客户端。Feign内置了Ribbon，用来做客户端负载均衡，去调用服务注册中心的服务。Feign的使用方式是：使用Feign的注解定义接口，调用这个接口就可以调用服务注册中心的服务</td>
<td align="center">OpenFeign是Spring Cloud 在Feign的基础上支持了SpringMVC的注解，如@RequesMapping等等。OpenFeign的@FeignClient可以解析SpringMVC的@RequestMapping注解下的接口，并通过动态代理的方式产生实现类，实现类中做负载均衡并调用其他服务。</td>
</tr>
<tr>
<td align="center"><dependency>     <groupId>org.springframework.cloud</groupId>     <artifactId>spring-cloud-starter-feign</artifactId>                        </dependency></td>
<td align="center"><dependency>     <groupId>org.springframework.cloud</groupId>     <artifactId>spring-cloud-starter-openfeign</artifactId>                  </dependency></td>
</tr>
</tbody></table>
<h3 id="OpenFeign的使用-在服务消费者端"><a href="#OpenFeign的使用-在服务消费者端" class="headerlink" title="OpenFeign的使用(在服务消费者端)"></a>OpenFeign的使用(在服务消费者端)</h3><ol>
<li><p>新建模块cloud-consumer-feign-order80</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--引入 openfeign --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--引入 eureka-client --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--引入自己的API通用包--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qzh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="comment">&lt;!--热部署工具--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启FeignClient客户端功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderFeignMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>在springcloud包下新建service.PaymentFeignService接口，在接口上添加注解<code>@FeignClient</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//openFeign整合了Ribbon和RestTemplate，实现负载均衡和发送请求</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span>    <span class="comment">//作为feign客户端，找CLOUD-PAYMENT-SERVICE服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接复制8001的方法</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/get/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在springcloud包下新建controller.OrderFeignController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderFeignController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentFeignService paymentFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/getFeign/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonResult&lt;Payment&gt; <span class="title">getPaymentById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.getPaymentById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/consumer/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//open-feign 整合了ribbon，消费者客户端一般默认等待一秒钟</span></span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.paymentFeignTimeout();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>测试，在浏览器输入<code>http://localhost/consumer/payment/get/1</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/13.png" alt="image-20210108055130361"></p>
</li>
</ol>
<p><strong>总结：</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/14.png" alt="image-20210108060351054"></p>
<p>​    <strong>openfeign是通过feign接口的方法是的<code>@RequestMapping</code>注解来绑定服务提供者中具体的方法。</strong></p>
<h3 id="OpenFeign超时控制"><a href="#OpenFeign超时控制" class="headerlink" title="OpenFeign超时控制"></a>OpenFeign超时控制</h3><p>提供者在处理服务时用了3秒，提供者认为花3秒是正常，而消费者只愿意等1秒，1秒后，提供者会没返回数据，消费者就会造成超时调用报错。<strong>所以需要双方约定好时间，不使用默认的</strong>。</p>
<p><strong>模拟超时出错的情况</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/15.png" alt="image-20210108060631001"></p>
<ol>
<li><p>在服务提供者8001的PaymentController里添加：（模拟服务处理时间长）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/payment/feign/timeout&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">//暂停执行几秒钟线程</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> serverPort;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务消费者80的PaymentFeignService中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/feign/timeout&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在服务消费者80的OrderFeignController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value = &quot;/consumer/payment/feign/timeout&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentFeignTimeout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//open-feign 整合了ribbon，消费者客户端一般默认等待一秒钟</span></span><br><span class="line">        <span class="keyword">return</span> paymentFeignService.paymentFeignTimeout();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，因为只修改8001了，所以只启动8001，不然会报错</p>
<p>在浏览器中输入<code>http://localhost/consumer/payment/feign/timeout</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/16.png" alt="image-20210108061515612"></p>
</li>
</ol>
<p>​    <strong>默认Feign客户端只等待一秒钟，但是服务端处理需要超过1秒钟，导致Feign客户端不想等待了，直接返回报错。为了避免这样的情况，有时候我们需要设置Feign客户端的超时控制。在yml文件中开启</strong></p>
<ol start="5">
<li><p>在服务消费者80的yml中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#没提示不管它，可以设置</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="comment">#指的是建立连接后从服务器读取到可用资源所用的时间</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="comment">#指的是建立连接使用的时间，适用于网络状况正常的情况下，两端连接所用的时间</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重新访问<code>http://localhost/consumer/payment/feign/timeout</code>，3秒后显示。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/17.png" alt="image-20210108062128449"></p>
</li>
</ol>
<h3 id="OpenFeign日志打印功能"><a href="#OpenFeign日志打印功能" class="headerlink" title="OpenFeign日志打印功能"></a>OpenFeign日志打印功能</h3><p>Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而了解 Feign 中 Http 请求的细节。说白了就是<strong>对Feign接口的调用情况进行监控和输出</strong></p>
<h4 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h4><p>NONE：默认的，不显示任何日志；</p>
<p>BASIC：仅记录请求方法、URL、响应状态码及执行时间;</p>
<p>HEADERS：除了 BASIC 中定义的信息之外，还有请求和响应的头信息；</p>
<p>FULL：除了 HEADERS 中定义的信息之外，还有请求和响应的正文及元数据,</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li><p>配置日志bean对象，在服务消费者80的springcloud包下新建config.FeignConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> feign.Logger;	<span class="comment">//不要导错包</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//打印最详细的日志</span></span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml文件中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="comment"># feign日志以什么级别监控哪个接口</span></span><br><span class="line">    <span class="attr">com.qzh.springcloud.service.PaymentFeignService:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目，在浏览器中输入<code>http://localhost/consumer/payment/getFeign/8</code></p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud05/18.png" alt="image-20210108062940514"></p>
<h2 id="Feign和Ribbon如何选择？"><a href="#Feign和Ribbon如何选择？" class="headerlink" title="Feign和Ribbon如何选择？"></a>Feign和Ribbon如何选择？</h2><p><strong>根据个人习惯而定，如果喜欢REST风格使用Ribbon；如果喜欢面向接口风格使用Feign.</strong></p>
<p>Feign 本质上也是实现了 Ribbon，只不过后者是在调用方式上，为了满足一些开发者习惯的接口调用习惯！</p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记08---服务配置[Config]与服务总线[Bus]</title>
    <url>/HuaStarOS.github.io/2021/01/26/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B008-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE%5BConfig%5D%E4%B8%8E%E6%9C%8D%E5%8A%A1%E6%80%BB%E7%BA%BF%5BBus%5D/</url>
    <content><![CDATA[<h1 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h1><p>如果微服务架构中没有使用统一配置中心时，所存在的问题：</p>
<ul>
<li>配置文件分散在各个项目里，大量的配置文件，不方便维护</li>
<li>配置内容安全与权限，实际开发中，开发人员是不知道线上环境的配置的</li>
<li>更新配置后，项目需要重启</li>
</ul>
<p>​    微服务意味着要将单体应用拆分成一个个子服务。每个服务的粒度相对较小，因此系统中会出现大量的服务，每个服务都要有自己都一些配置信息，或者相同的配置信息，可能不同环境每个服务也有单独的一套配置，这种情况导致配置文件数量比较庞大，维护起来相当费劲，举个栗子：<br>​    在开发的过程中，一般数据库是开发环境数据库，所有服务DB的IP配置为：192.168.10.1，突然老大说，开发环境换了，DB的IP要修改，这下可不好受了，所有微服务挨个修改DB的配置，可能有上百个微服务。就问你难受不难受？这个时候分布式配置中心就发挥了很大的优势，只需要修改配置中心配置，所有服务即可自动生效。</p>
<h1 id="SpringCloud-Config分布式配置中心"><a href="#SpringCloud-Config分布式配置中心" class="headerlink" title="SpringCloud Config分布式配置中心"></a>SpringCloud Config分布式配置中心</h1><p>​    <code>Spring Cloud Config</code>为微服务框架中的的微服务提供集中化的外部化配置支持。<strong>配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</strong></p>
<p>​    配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。当然也提供本地化文件系统的存储方式。</p>
<p>​    使用 spring Cloud 进行集中式配置管理，将以往的配置文件从项目中摘除后放到Git 或svn中集中管理，并在需要变更的时候，可以通知到各应用程序，应用程序刷新配置不需要重启。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>​    SpringCloud Config分为<strong>服务端和客户端两部分。</strong></p>
<p>​    服务端也称为<strong>分布式配置中心</strong>，<strong>它是一个独立的微服务应用</strong>，用来连接配置服务器并为客户端提供配置信息，加密/解密信息等访问接口</p>
<p>​    客户端则是通过指定的配置中心来管理应用资源，以及与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息配置服务器默认采用git来存储配置信息，这样就有助于对环境配置进行版本管理，并且可以通过git客户端工具来方便的管理和访问配置内容。</p>
<p>​    由于SpringCloud Canfig默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件),但最推荐的还是Git，而且使用的是http/https访问的形式。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol>
<li>集中管理配置文件</li>
<li>不同环境不同配置，动态化的配置更新，分环境部署比如dev/test/prod/beta/release</li>
<li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li>
<li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li>
<li>将配置信息以REST接口的形式暴露</li>
</ol>
<h2 id="Config服务端使用实例"><a href="#Config服务端使用实例" class="headerlink" title="Config服务端使用实例"></a>Config服务端使用实例</h2><ol>
<li><p>GitHub创建仓库，用于存放配置文件</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/1.png" alt="image-20210127155234438"></p>
</li>
<li><p>将仓库克隆到本地，在Git Bash中输入 <code>git clone https://github.com/用户名/仓库名.git</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/2.png" alt="image-20210127155521733"></p>
</li>
<li><p>创建模块cloud-config-center-3344作为config服务端，即分布式配置中心</p>
<ol>
<li><p>创建cloud-config-center-3344模块</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--config server--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3344</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-config-center</span> <span class="comment">#注册进Eureka服务器的微服务名</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://github.com/angenin/springcloud-config.git</span>  <span class="comment">#git的仓库地址</span></span><br><span class="line">          <span class="attr">search-paths:</span>   <span class="comment">#搜索目录</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">springcloud-config</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span>   <span class="comment">#读取的分支</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span>   <span class="comment">#服务注册到的eureka地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//添加@EnableConfigServer注解，启用配置中心</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigCenterMain3344</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigCenterMain3344.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>编辑GitHub中的配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#config-dev.yml</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;main branch,springcloud-config/config-dev.yml version=1&quot;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#######################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#config-prod.yml</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;main branch,springcloud-config/config-prod.yml version=1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#config-test.yml</span></span><br><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">info:</span> <span class="string">&quot;main branch,springcloud-config/config-test.yml version=1&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动7001、3344进行测试，在浏览器中输入<code>http://localhost:3344/main/config-dev.yml</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/3.png"></p>
</li>
</ol>
<h3 id="配置读取规则"><a href="#配置读取规则" class="headerlink" title="配置读取规则"></a>配置读取规则</h3><p>http请求地址和资源文件映射如下:</p>
<ul>
<li>/{application}/{profile}[/{label}]</li>
<li>/{application}-{profile}.yml</li>
<li>/{label}/{application}-{profile}.yml</li>
<li>/{application}-{profile}.properties</li>
<li>/{label}/{application}-{profile}.properties</li>
</ul>
<p><strong>注意：</strong></p>
<p>​    label：分支（branch）</p>
<p>​    application：服务名</p>
<p>​    profile：环境（dev/test/prod）</p>
<ol>
<li><p>/{label}/{application}-{profile}.yml：<code>http://localhost:3344/main/config-dev.yml</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/3.png"></p>
</li>
<li><p>/{application}/{profile}[/{label}]：<code>http://localhost:3344/config/dev/main</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/4.png" alt="image-20210127162332692"></p>
</li>
</ol>
<h2 id="Config客户端使用实例"><a href="#Config客户端使用实例" class="headerlink" title="Config客户端使用实例"></a>Config客户端使用实例</h2><ol>
<li><p>新建模块cloud-config-client-3355</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--config client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写bootstrap.yml</p>
<p> <strong>applicaiton.yml是用户级的资源配置项</strong> </p>
<p> <strong>bootstrap.yml是系统级的，优先级更高</strong></p>
<p>​    SpringCloud会创建一个BootstrapContext”，作为Spring应用的ApplicationContext的父上下文。初始化的时候，Bootstrap Context负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。</p>
<p>​    Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。Bootstrapcontex和Application Context有着不同的约定所以新增了一个bootstrapyml文件，保证BootstrapContext和Application Context配置的分离。</p>
<p>​    要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的,<br>​    因为bootstrap.yml是比application.yml先加载的。bootstrap.yml优先级高于application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3355</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-client</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span> 		  <span class="comment">#config客户端配置</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span>     <span class="comment">#分支名称</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">config</span>    <span class="comment">#配置文件名称      </span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">dev</span>    <span class="comment">#配置文件的后缀名称       </span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3344</span>  <span class="comment">#配置中心地址</span></span><br><span class="line"> 	  <span class="comment"># 上面4个变量综合起来的意思就是在 http://localhost:3344 配置中心 读取 main分支上的config-dev.yml的配置文件</span></span><br><span class="line">      <span class="comment"># 即访问 http://localhost:3344/main/config-dev.yml并将配置加载到当前项目中</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span>   <span class="comment">#服务注册到的eureka地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientMain3355</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigClientMain3355.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类 controller(读取配置文件)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span>	</span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/5.png" alt="image-20210127163927555"></p>
</li>
</ol>
<h2 id="动态刷新问题"><a href="#动态刷新问题" class="headerlink" title="动态刷新问题"></a>动态刷新问题</h2><ol>
<li><p>改GitHub上的config-dev.yml文件的版本号为2。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/6.png" alt="image-20210127164500695"></p>
</li>
<li><p>刷新<code>http://localhost:3344/main/config-dev.yml</code>，版本号发生改变。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/7.png" alt="image-20210127164723498"></p>
</li>
<li><p>刷新<code>http://localhost:3355/configInfo</code>，版本号没有发生改变。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/8.png" alt="image-20210127165006235"></p>
</li>
<li><p>重启3355，刷新<code>http://localhost:3355/configInfo</code>，版本号发生改变。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/9.png" alt="image-20210127165328937"></p>
</li>
</ol>
<p>​    从上面我我们可以发现。修改GitHub上的配置文件内容做调整。刷新3344，发现ConfigServer配置中心立刻响应。刷新3355，发现ConfigClient客户端没有任何响应。3355没有变化除非自己重启或者重新加载。如果每次修改配置文件，客户端都需要重启才能刷新配置，那将是噩梦！！！</p>
<h2 id="Config客户端之动态刷新"><a href="#Config客户端之动态刷新" class="headerlink" title="Config客户端之动态刷新"></a>Config客户端之动态刷新</h2><ol>
<li><p>往config客户端3355在pom中添加（上面已经加了）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后在bootstrap.yml中添加</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在ConfigClientController类上加上<code>@RefreshScope</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigClientController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String configInfo;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/configInfo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getConfigInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> configInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改GitHub上文件的版本号，然后访问3344和3355。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/10.png" alt="image-20210127172139517"></p>
</li>
<li><p>刷新<code>http://localhost:3344/main/config-dev.yml</code>，版本号发生改变。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/11.png" alt="image-20210127172227332"></p>
</li>
<li><p><code>http://localhost:3355/configInfo</code>（没读取到，需要发送post请求刷新3355才能生效）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/12.png" alt="image-20210127172330676"></p>
</li>
<li><p>打开终端，输入<code>curl -X POST &quot;http://localhost:3355/actuator/refresh&quot;</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/13.png" alt="image-20210127172730008"></p>
</li>
<li><p>刷新<code>http://localhost:3355/configInfo</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/14.png" alt="image-20210127172817747"></p>
</li>
</ol>
<p><strong>想想还有什么问题：</strong>通过上述的方法确实可以解决动态刷新的问题。但是试想一下。如果有很多个微服务的话，那岂不是每个微服务都需要执行一次post请求，手动刷新效率太低了。那有没有可能可以大范围的自动刷新，只需要发送一次post请求就好了</p>
<h1 id="Spring-Cloud-Bus消息总线"><a href="#Spring-Cloud-Bus消息总线" class="headerlink" title="Spring Cloud Bus消息总线"></a>Spring Cloud Bus消息总线</h1><p>​    <strong>Spring Cloud Bus配合Spring Cloud Config使用可以实现配置的动态刷新。</strong>Spring Cloud Bus 将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控。</p>
<p>​    在微服务架构中，通常会使用轻量级的消息代理来构建一个共用的消息主题来连接各个微服务实例，它广播的消息会被所有在注册中心的微服务实例监听和消费，也称消息总线。 </p>
<p>​    <strong>Bus支持两种消息代理：RabbitMQ和Kafka</strong></p>
<h2 id="RabbitMQ环境配置"><a href="#RabbitMQ环境配置" class="headerlink" title="RabbitMQ环境配置"></a>RabbitMQ环境配置</h2><ol>
<li><p>安装Erlang，下载地址：<code>http://erlang.org/download/otp_win64_21.3.exe</code></p>
</li>
<li><p>安装RabbitMQ，下载地址：<code>https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.14/rabbitmq-server-3.7.14.exe</code></p>
</li>
<li><p>进入RabbitMQ安装目录下的sbin目录，进入命令行界面输入<code>rabbitmq-plugins enable rabbitmq_management</code>下载可视化插件</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/15.png" alt="image-20210127175052034"></p>
<p>执行之后，可以发现。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/16.png" alt="image-20210127175144750"></p>
<p>双击start，打开RabbitMQ</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/17.png" alt="image-20210127175403311"></p>
<p>在浏览器中输入<code>http://localhost:15672/</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/18.png" alt="image-20210127175515860"></p>
<p>输入用户名和密码，用户名和密码都是guest</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/19.png" alt="image-20210127175744308"></p>
</li>
</ol>
<h2 id="SpringCloud-Bus动态刷新全局广播"><a href="#SpringCloud-Bus动态刷新全局广播" class="headerlink" title="SpringCloud Bus动态刷新全局广播"></a>SpringCloud Bus动态刷新全局广播</h2><p><strong>全局广播有两种实现方案：</strong></p>
<ol>
<li><p>利用消息总线触发一个客户端/bus/refresh,而刷新所有客户端的配置</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/20.png" alt="image-20210127185240711"></p>
</li>
<li><p>利用消息总线触发一个服务端ConfigServer的/bus/refresh端点,而刷新所有客户端的配置（更加推荐）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/21.png" alt="image-20210127185408073"></p>
</li>
</ol>
<p><strong>从上面可以发现第二种的架构显然更加合适，第一种不适合的原因如下</strong></p>
<ol>
<li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新职责</li>
<li>破坏了微服务各节点的对等性</li>
<li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li>
</ol>
<h2 id="给Config服务端3344添加消息总线支持"><a href="#给Config服务端3344添加消息总线支持" class="headerlink" title="给Config服务端3344添加消息总线支持"></a>给Config服务端3344添加消息总线支持</h2><ol>
<li><p>在pom文件中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ的支持--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml文件中添加</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># rabbitmq相关的配置 15672是web管理界面的端口、5672是跟RabbitMQ进行通信的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># rabbitmq相关的配置,暴露bus刷新配置的端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="comment"># 暴露bus刷新配置的端点</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;bus-refresh&#x27;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="给客户端3355和3366添加消息总线支持"><a href="#给客户端3355和3366添加消息总线支持" class="headerlink" title="给客户端3355和3366添加消息总线支持"></a>给客户端3355和3366添加消息总线支持</h2><p>​    演示广播效果，增加复杂度，再以3355为模板再制作一个3366</p>
<ol>
<li><p>pom添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加消息总线RabbitMQ的支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>yml添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment"># rabbitmq相关的配置 15672是web管理界面的端口、5672是跟RabbitMQ进行通信的端口</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      </span><br><span class="line"><span class="comment"># 暴露监控端点</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol>
<li><p>启动7001，3344，3355，3366。</p>
</li>
<li><p>修改GitHub上配置文件的版本号。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/22.png" alt="image-20210127190731144"></p>
</li>
<li><p>在终端输入：<code>curl -X POST &quot;http://localhost:3344/actuator/bus-refresh&quot;</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/23.png" alt="image-20210127190832273"></p>
</li>
<li><p>在浏览器输入<code>http://localhost:3355/configInfo</code>，<code>http://localhost:3366/configInfo</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/24.png" alt="image-20210127190904643"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/25.png" alt="image-20210127190930596"></p>
</li>
</ol>
<h2 id="SpringCloud-Bus动态刷新定点通知"><a href="#SpringCloud-Bus动态刷新定点通知" class="headerlink" title="SpringCloud Bus动态刷新定点通知"></a>SpringCloud Bus动态刷新定点通知</h2><p>​    指定具体某一个实例生效而不是全部，<code>公式：http://localhost:配置中心的端口号/actuator/bus-refresh/&#123;destination&#125;</code>。/bus/refresh请求不再发送到具体的服务实例上，而是发给config server并通过destination参数类指定需要更新配置的服务或实例。</p>
<ol>
<li><p>修改GitHub的文件版本号。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/26.png" alt="image-20210127191240921"></p>
</li>
<li><p>在终端输入：<code>curl -X POST &quot;http://localhost:3344/actuator/bus-refresh/config-client:3355&quot;</code><br>多加了服务名:端口号即可定点通知。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/27.png" alt="image-20210127191337043"></p>
</li>
<li><p>在浏览器中在浏览器输入<code>http://localhost:3355/configInfo</code>，<code>http://localhost:3366/configInfo</code>查看</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/28.png" alt="image-20210127191433968"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/29.png" alt="image-20210127191445682"></p>
<p><strong>总结</strong>：通过<code>公式：http://localhost:配置中心的端口号/actuator/bus-refresh/&#123;destination&#125;</code>实现了定点刷新的功能。</p>
</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud08/30.png" alt="image-20210127191710498"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记07---服务网关Gateway</title>
    <url>/HuaStarOS.github.io/2021/01/26/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B007-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3GateWay/</url>
    <content><![CDATA[<h1 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h1><p>​    服务网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。服务网关封装了系统内部架构，为每个客户端提供一个定制的API。它可能还具有其它职责，如身份验证、监控、负载均衡、缓存、请求分片与管理、静态响应处理。服务网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。</p>
<p><strong>服务网关是什么</strong></p>
<ul>
<li><p>网关统一服务入口，可方便实现对平台众多服务接口进行管控，对访问服务的身份认证、防报文重放与防数据篡改、功能调用的业务鉴权、响应数据的脱敏、流量与并发控制，甚至基于API调用的计量或者计费等等。</p>
</li>
<li><p>网关 = 路由转发 + 过滤器<code>路由转发：接收一切外界请求，转发到后端的微服务上去； </code>在服务网关中可以完成一系列的横切功能，例如权限校验、限流以及监控等，这些都可以通过过滤器完成</p>
</li>
</ul>
<p><strong>服务网关有什么用</strong></p>
<ul>
<li><p>网关可以实现服务的统一管理</p>
</li>
<li><p>网关可以解决微服务中通用代码的冗余问题</p>
</li>
</ul>
<p><strong>服务网关有哪些功能</strong></p>
<ul>
<li>性能：API高可用，负载均衡，容错机制。</li>
<li>安全：权限身份认证、脱敏，流量清洗，后端签名（保证全链路可信调用）,黑名单（非法调用的限制）。</li>
<li>日志：日志记录（spainid,traceid）一旦涉及分布式，全链路跟踪必不可少。</li>
<li>缓存：数据缓存。</li>
<li>监控：记录请求响应数据，api耗时分析，性能监控。</li>
<li>限流：流量控制，错峰流控，可以定义多种限流规则。</li>
<li>灰度：线上灰度部署，可以减小风险。</li>
<li>路由：动态路由规则</li>
</ul>
<p>目前，比较流行的网关有：Nginx 、 Kong 、Orange等等，还有微服务网关Zuul 、Spring Cloud Gateway等等</p>
<h1 id="Spring-Cloud-Gateway"><a href="#Spring-Cloud-Gateway" class="headerlink" title="Spring Cloud Gateway"></a>Spring Cloud Gateway</h1><p>​    Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和 Project Reactor等技术。Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如：熔断、限流、重试等。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/1.png" alt="image-20210126113608116"></p>
<p>​    Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p>
<p>​    Spring Cloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，Spring Cloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p>
<p>​    Spring Cloud Gateway 的目标，不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p>
<p><strong>Spring Cloud Gateway 使用Webflux中的reactor-netty响应式编程组件，底层使用了高性能的通信框架Netty</strong>。</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol>
<li>反向代理</li>
<li>权限检查</li>
<li>流量控制</li>
<li>熔断</li>
<li>日志监控</li>
</ol>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>Spring Cloud官方，对Spring Cloud Gateway 特征介绍如下：</p>
<ul>
<li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0进行构建</li>
<li>动态路由：能够匹配如何请求属性</li>
<li>集成 Hystrix 断路器</li>
<li>集成 Spring Cloud DiscoveryClient</li>
<li>Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters</li>
<li>具备一些网关的高级功能：限流、路径重写</li>
</ul>
<h2 id="源码架构"><a href="#源码架构" class="headerlink" title="源码架构"></a>源码架构</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/2.png" alt="image-20210126120011844"></p>
<h2 id="Spring-Cloud-Gateway-与-Zuul的区别"><a href="#Spring-Cloud-Gateway-与-Zuul的区别" class="headerlink" title="Spring Cloud Gateway 与 Zuul的区别"></a>Spring Cloud Gateway 与 Zuul的区别</h2><ol>
<li><p>Zuul 1.x 基于Servlet 2.5使用阻塞架构它不支持任何长连接(如 WebSocket) Zuul 的设计模式和Nginx较像，每次1/ O 操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx 用C++实现，Zuul 用 Jaya 实现，而JVM 本身会有第一次加载较慢的情况，使得Zuul 的性能相对较差。</p>
</li>
<li><p>Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。 Zuul 2.x的性能较 Zuul 1.× 有较大提升。在性能方面，根据官方提供的基准测试，Spring Cloud Gateway 的 RPS（每秒请求数）是Zuul 的 1. 6 倍。</p>
</li>
<li><p>Spring Cloud Gateway 建立在 Spring Framework 5、 Project Reactor 和 Spring Boot 2 之上，使用非阻塞 API。</p>
</li>
<li><p>Spring Cloud Gateway 还支持 WebSocket，并且与Spring紧密集成拥有更好的开发体验</p>
</li>
</ol>
<h3 id="Zuul的IO模型"><a href="#Zuul的IO模型" class="headerlink" title="Zuul的IO模型"></a><strong>Zuul的IO模型</strong></h3><p>Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型。</p>
<p>大家知道，servlet由servlet container进行生命周期管理。</p>
<ol>
<li>container启动时构造servlet对象并调用servlet init()进行初始化；</li>
<li>container关闭时调用servlet destory()销毁servlet；</li>
<li>container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。</li>
</ol>
<p>弊端：servlet是一个简单的网络IO模型，当请求进入servlet container时，servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的，但是一旦并发上升，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单的业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/3.png" alt="image-20210126120500575"></p>
<h3 id="Webflux框架"><a href="#Webflux框架" class="headerlink" title="Webflux框架"></a><strong>Webflux框架</strong></h3><p>​    传统的Web框架，比如说：struts2，springmve等都是基于Servlet API与Servlet容器基础之上运行的。</p>
<p>​    但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程（Spring5必须让你使用java8)。</p>
<p>​    Spring WebFlux 是 Spring 5.0 引入的新的响应式框架，区别于 Spring MVC，它不需要依赖Servlet API，它是完全异步非阻塞的，并且基于 Reactor 来实现响应式流规范。</p>
<p>​    Webflux模式替换了旧的Servlet线程模型。<strong>用少量的线程处理request和response io操作</strong>，这些线程称为Loop线程，而业务交给响应式编程框架处理，响应式编程是非常灵活的，用户可以将业务中阻塞的操作提交到响应式框架的work线程中执行，而不阻塞的操作依然可以在Loop线程中进行处理，大大提高了Loop线程的利用率。官方结构图：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/4.png" alt="image-20210126121554155"></p>
<h2 id="三大核心概念"><a href="#三大核心概念" class="headerlink" title="三大核心概念"></a>三大核心概念</h2><p><strong>Route（路由）</strong>： 路由是网关的基本组件。它由ID、目标URI、以及一系列的断言和过滤器组成。如果断言为true，则匹配路由</p>
<p><strong>Predicate（断言）</strong> ： <code>参考的是Java8的java.util.funlction.Predicate</code>。开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数),如果请求与断言相匹配则进行路由<code>(也就是转发)</code></p>
<p><strong>Filter（过滤）</strong> ： 是GatewayFilter的一个实例，使用过滤器，可以在路由之前或之后修改请求和响应</p>
<h3 id="总体"><a href="#总体" class="headerlink" title="总体"></a><strong>总体</strong></h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/5.png" alt="image-20210126123205938"></p>
<p>​    Web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。</p>
<p>​    predicate就是我们的匹配条件；而filter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了。</p>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/6.png" alt="image-20210126142857071"></p>
<p>​    客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p>
<p>​    Filter在“pre”可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在“post”可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p>
<h2 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h2><ol>
<li><p>新建模块cloud-gateway-gateway9527</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--gateway--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client(通过微服务名实现动态路由)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GateWayMain9527</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GateWayMain9527.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置路由，修改yml文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route</span> 		 <span class="comment"># 路由的id,没有规定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span> <span class="comment"># 匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> 	 <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span> 	<span class="comment"># 断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">cloud-gateway-service</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://eureka7001.com:7001/eureka/</span></span><br></pre></td></tr></table></figure>

<p>各字段含义如下：</p>
<p>id：我们自定义的路由 ID，保持唯一</p>
<p>uri：目标服务地址</p>
<p>predicates：路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。</p>
<p>上面这段配置的意思是，配置了一个 id 为 url-proxy-1的URI代理规则，路由的规则为：</p>
<p>当访问地址<code>http://localhost:9527/get/11</code>时，就会路由到地址<code>http://localhost:8001/get/11</code>。</p>
<p>当访问地址<code>http://localhost:9527/lb</code>时，就会路由到地址<code>http://localhost:8001/lb</code>。</p>
</li>
</ol>
<ol start="6">
<li><p>进行测试，启动7001，8001，9527</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/7.png" alt="image-20210126145404679"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/8.png" alt="image-20210126145452614"></p>
</li>
</ol>
<p><strong>总结：</strong> 通过测试结果可以看出Gateway网关会根据<code>断言predicates</code>进行匹配，匹配成功之后会将请求路由到真实地址。这样我们可以隐藏我们真实的服务端口</p>
<h2 id="Gateway网关的路由配置方式"><a href="#Gateway网关的路由配置方式" class="headerlink" title="Gateway网关的路由配置方式"></a>Gateway网关的路由配置方式</h2><h3 id="基于yml文件配置方式"><a href="#基于yml文件配置方式" class="headerlink" title="基于yml文件配置方式"></a>基于yml文件配置方式</h3><p>即在yml配置文件中进行配置，例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route</span> 		 <span class="comment"># 路由的id,没有规定规则但要求唯一,建议配合服务名</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span> <span class="comment"># 匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> 	 <span class="comment"># 断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route2</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span> 	<span class="comment"># 断言,路径相匹配的进行路由</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="基于代码的配置方式"><a href="#基于代码的配置方式" class="headerlink" title="基于代码的配置方式"></a>基于代码的配置方式</h3><p>即在代码中编写路由配置再注入容器中使用。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouteLocator <span class="title">customRouteLocator</span><span class="params">(RouteLocatorBuilder routeLocatorBuilder)</span></span>&#123;</span><br><span class="line">        RouteLocatorBuilder.Builder routes = routeLocatorBuilder.routes();</span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">&quot;path_route_angenin&quot;</span>,  <span class="comment">//id</span></span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guonei&quot;</span>)  <span class="comment">//访问 http://localhost:9527/guonei</span></span><br><span class="line">                        .uri(<span class="string">&quot;http://news.baidu.com/guonei&quot;</span>));  <span class="comment">//就会转发到 http://news.baidu.com/guonei</span></span><br><span class="line"></span><br><span class="line">        routes.route(<span class="string">&quot;path_route_angenin2&quot;</span>,  <span class="comment">//id</span></span><br><span class="line">                r -&gt; r.path(<span class="string">&quot;/guoji&quot;</span>)  <span class="comment">//访问 http://localhost:9527/guoji</span></span><br><span class="line">                        .uri(<span class="string">&quot;http://news.baidu.com/guoji&quot;</span>));  <span class="comment">//就会转发到 http://news.baidu.com/guonji</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routes.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost:9527/guonei</code>就会转发到<code>http://news.baidu.com/guonei</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/9.png" alt="image-20210126150652048"></p>
<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>​    <strong>通过微服务名实现动态路由</strong>：默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建动态路由进行转发，从而实现动态路由的功能。</p>
<p>​    在uri的schema协议部分为自定义的lb:类型，表示从微服务注册中心（如Eureka）订阅服务<code>即获取服务的信息（比如：端口号和IP地址）</code>，并且启用Gateway的负载均衡功能。</p>
<p><strong>修改yml文件</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名称进行路由(默认false)</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route</span> <span class="comment">#路由的id,没有规定规则但要求唯一,建议配合服务名</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:8001  #匹配后提供服务的路由地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/get/**</span> <span class="comment">#断言，路径相匹配的进行路由</span></span><br><span class="line"></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">payment_route2</span></span><br><span class="line"><span class="comment">#          uri: http://localhost:8001</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://cloud-payment-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/payment/lb/**</span> <span class="comment">#断言,路径相匹配的进行路由</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/10.png" alt="image-20210126152325509"></p>
<p><strong>测试</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/11.png" alt="image-20210126152440709"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/12.png" alt="image-20210126152452517"></p>
<h2 id="路由匹配规则"><a href="#路由匹配规则" class="headerlink" title="路由匹配规则"></a>路由匹配规则</h2><p>​    Spring Cloud Gateway 的功能很强大，我们仅仅通过 Predicates 的设计就可以看出来，前面我们只是使用了 predicates 进行了简单的条件匹配，其实 Spring Cloud Gataway 帮我们内置了很多 Predicates 功能。</p>
<p>​    Spring Cloud Gateway 是通过 Spring WebFlux 的 HandlerMapping 做为底层支持来匹配到对应的路由，Spring Cloud Gateway 内置了很多 Predicates Factory，这些 Predicates Factory通过不同的 HTTP 请求参数来匹配，多个 Predicates Factory可以组合使用。</p>
<p>​    在启动Gateway的时候，可以发现：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/13.png" alt="image-20210126154126248"></p>
<p>官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.6.RELEASE/reference/html/#gateway-request-predicates-factories">https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.6.RELEASE/reference/html/#gateway-request-predicates-factories</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/14.png" alt="image-20210126154917776"></p>
<p>​    Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。</p>
<p>​    Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个RoutePredicate工厂可以进行组合</p>
<p>​    Spring Cloud Gateway 创建 Route 对象时，使用 Route Predicate Factories创建 Predicate 对象，Predicate 对象可以赋值给Route。 Spring Cloud Gateway 包含许多内置的Route Predicate Factories。</p>
<p>​    所有这些Predicate 都匹配HTTP请求的不同属性。多种Predicate Factories可以组合，并通过逻辑and。</p>
<h3 id="常用的Route-Predicate"><a href="#常用的Route-Predicate" class="headerlink" title="常用的Route Predicate"></a><strong>常用的Route Predicate</strong></h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/15.png" alt="image-20210126162011774"></p>
<p>​    说白了 Predicate 就是为了实现一组匹配规则，方便让请求过来找到对应的 Route 进行处理，接下来我们接下 Spring Cloud GateWay 内置几种 Predicate 的使用。</p>
<ul>
<li>转发规则（predicates），假设 转发uri都设定为<a href="http://localhost:8001/">http://localhost:8001</a></li>
</ul>
<table>
<thead>
<tr>
<th align="center">规则</th>
<th align="center">实例</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Path</td>
<td align="center">- Path=/get/**</td>
<td align="center">请求的路径要有/get时，才会转发到<a href="http://localhost:8001服务器上">http://localhost:8001服务器上</a></td>
</tr>
<tr>
<td align="center">Before</td>
<td align="center">- Before=2020-10-20T17:42:47.789-07:00[America/Denver]</td>
<td align="center">在某个时间之前的请求才会被转发到 <a href="http://localhost:8001服务器上">http://localhost:8001服务器上</a></td>
</tr>
<tr>
<td align="center">After</td>
<td align="center">- After=2020-10-20T17:42:47.789-07:00[America/Denver]</td>
<td align="center">在某个时间之后的请求才会被转发</td>
</tr>
<tr>
<td align="center">Between</td>
<td align="center">- Between=2020-10-20T17:42:47.789-07:00[America/Denver],2020-10-21T17:42:47.789-07:00[America/Denver]</td>
<td align="center">在某个时间段之间的才会被转发</td>
</tr>
<tr>
<td align="center">Cookie</td>
<td align="center">- Cookie=username, qzh</td>
<td align="center">请求带Cookie，并且cookie名为username且值为qzh</td>
</tr>
<tr>
<td align="center">Header</td>
<td align="center">- Header=X-Request-Id, \d+</td>
<td align="center">请求头携带参数X-Request-Id或者满足\d+的请求头才会匹配</td>
</tr>
<tr>
<td align="center">Host</td>
<td align="center">- Host=<a href="http://www.qzh.com/">www.qzh.com</a></td>
<td align="center">当主机名为<a href="http://www.qzh.com的时候直接转发到http//localhost:8001%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A">www.qzh.com的时候直接转发到http://localhost:8001服务器上</a></td>
</tr>
<tr>
<td align="center">Method</td>
<td align="center">- Method=GET</td>
<td align="center">只有GET方法才会匹配转发请求，还可以限定POST、PUT等请求方式</td>
</tr>
<tr>
<td align="center">Query</td>
<td align="center">-Query=username,\d+</td>
<td align="center">请求参数中必须要有username并且值还要为整数才能转发请求</td>
</tr>
</tbody></table>
<p><strong>测试</strong></p>
<p><strong>Header</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span>   <span class="comment">#请求头要有X-Request-Id属性并且值要为整数,  /d+ 是正则表达式</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/16.png" alt="image-20210126163251635"></p>
<p><strong>Cookie</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Cookie=username,qzh</span> <span class="comment">#请求带Cookie，并且cookie名为username且值为qzh才能路由</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/17.png" alt="image-20210126163233370"></p>
<p><strong>Host</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Host=**.HuaStarOS.com</span>     <span class="comment">#主机地址必须是**.HuaStarOS.com  才能进行路由 </span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/18.png" alt="image-20210126163321615"></p>
<p><strong>Query</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">predicates:</span></span><br><span class="line">	<span class="bullet">-</span> <span class="string">Query=username,\d+</span>        <span class="comment">#请求参数中必须要有username并且值还要为整数才能路由</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/19.png" alt="image-20210126163337419"></p>
<p>其他的Predicates都是类似的。这里就不在赘述</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    <strong>说白了，Predicate就是为了实现一组匹配规则，让请求过来之后找到对应的Route进行处理</strong></p>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>​    路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway 内置了多种路由过滤器，他们都由Gateway Filter的工厂类来产生。</p>
<p>​    spring cloud提供的过滤器有GatewayFilter（31种）Global Filter（10种）一个41种，下面列举了一些例子，有兴趣的同学，可以查看官网。</p>
<p><strong>filter的生命周期</strong></p>
<p>​    pre：在业务逻辑之前</p>
<p>​    post：在业务逻辑之后</p>
<p><strong>filter的种类</strong></p>
<p>​    GatewayFilter：单一</p>
<p>​    GlobalFilter：全局</p>
<h3 id="过滤器规则（Filter）"><a href="#过滤器规则（Filter）" class="headerlink" title="过滤器规则（Filter）"></a>过滤器规则（Filter）</h3><table>
<thead>
<tr>
<th align="left">过滤规则</th>
<th align="left">实例</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PrefixPath</td>
<td align="left">- PrefixPath=/app</td>
<td align="left">在请求路径前加上app</td>
</tr>
<tr>
<td align="left">RewritePath</td>
<td align="left">- RewritePath=/test, /app/test</td>
<td align="left">访问localhost:9022/test,请求会转发到localhost:8001/app/test</td>
</tr>
<tr>
<td align="left">SetPath</td>
<td align="left">SetPath=/app/{path}</td>
<td align="left">通过模板设置路径，转发的规则时会在路径前增加app，{path}表示原请求路径</td>
</tr>
<tr>
<td align="left">RedirectTo</td>
<td align="left"></td>
<td align="left">重定向</td>
</tr>
<tr>
<td align="left">RemoveRequestHeader</td>
<td align="left"></td>
<td align="left">去掉某个请求头信息</td>
</tr>
</tbody></table>
<p><strong>注：当配置多个filter时，优先定义的会被调用，剩余的filter将不会生效</strong></p>
<h3 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h3><p><strong>PrefixPath</strong>对所有的请求路径添加前缀：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">prefixpath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">PrefixPath=/mypath</span></span><br></pre></td></tr></table></figure>

<p>访问/hello的请求被发送到<a href="https://qzh.com/mypath/hello%E3%80%82">https://qzh.com/mypath/hello。</a></p>
<p><strong>RedirectTo</strong>重定向，配置包含重定向的返回码和地址：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">redirectTo_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RedirectTo=302,</span> <span class="string">https://www.baidu.com</span></span><br></pre></td></tr></table></figure>

<p><strong>RemoveRequestHeader</strong>去掉某个请求头信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestHeader=X-Request-qzh</span></span><br></pre></td></tr></table></figure>

<p>去掉请求头信息 X-Request-qzh</p>
<p>**RemoveResponseHeader **去掉某个响应头信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestheader_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveResponseHeader=X-Request-qzh</span></span><br></pre></td></tr></table></figure>

<p>**RemoveRequestParameter **去掉某个请求参数信息：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">removerequestparameter_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://qzh.com</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoveRequestParameter=red</span></span><br></pre></td></tr></table></figure>

<p><strong>RewritePath</strong> 改写路径：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewrite_filter</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://localhost:8001</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/where/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/where(?&lt;segment&gt;/?.*),</span> <span class="string">/test(?&lt;segment&gt;/?.*)</span></span><br></pre></td></tr></table></figure>

<p>/where/… 改成 test/…</p>
<h3 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h3><p>自定义全局过滤器要实现两个接口<code> GlobalFilter</code>、<code>Ordered </code>。</p>
<p>自定义过滤器的功能 ：全局日志记录、统一网关鉴权等等·····</p>
<p>创建MyLogGateWayFilter类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLogGateWayFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;**************come in MyLogGateWayFilter：&quot;</span> + <span class="keyword">new</span> Date());</span><br><span class="line">        <span class="comment">//获取request中的username参数</span></span><br><span class="line">        String uname = exchange.getRequest().getQueryParams().getFirst(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span>)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;*******用户名为null，非法用户！！&quot;</span>);</span><br><span class="line">            <span class="comment">//设置响应，不被接受</span></span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);</span><br><span class="line">			<span class="comment">//拒绝请求</span></span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回chain.filter(exchange)，放行</span></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回值是过滤器的优先级，越小优先级越高（最小-2147483648，最大2147483648）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>测试：</strong></p>
<p>在浏览器中输入<code>http://localhost:9527/payment/lb?username=111</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/20.png" alt="image-20210126174746564"></p>
<p>在浏览器中输入<code>http://localhost:9527/payment/lb</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud07/21.png"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记09-消息驱动[Stream]与分布式请求链路追踪[Sleuth]</title>
    <url>/HuaStarOS.github.io/2021/01/29/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B009-%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8%5BStream%5D%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%B7%E6%B1%82%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%5BSleuth%5D/</url>
    <content><![CDATA[<h1 id="Spring-Cloud-Steam消息驱动"><a href="#Spring-Cloud-Steam消息驱动" class="headerlink" title="Spring Cloud Steam消息驱动"></a>Spring Cloud Steam消息驱动</h1><p>​    <strong>通过之前的学习，我们都可以知道每种技术都是为了解决某一问题而诞生的。</strong></p>
<p>​    那为什么要引进<code>SpringCloud Steam消息驱动</code>这一技术呢？解决的痛点是什么？</p>
<p>​    目前主流的消息中间件有以下四种：</p>
<p>​        <code>ActiveMQ、RabbitMQ、RocketMQ、Kafka</code>等四种</p>
<p>​    这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰。我们如果用了四个消息队列的其中一种，后面的业务需求，想要使用另外一种消息队列进行通信，这时候无疑就是一个灾难性的，两种消息队列的使用必然会加大对项目维护和开发的难度。增加了开发人员的负担。这时候<code>SpringCloud Stream</code>给我们提供了一种解决方案。</p>
<h2 id="什么是Spring-Cloud-Stream"><a href="#什么是Spring-Cloud-Stream" class="headerlink" title="什么是Spring Cloud Stream"></a>什么是Spring Cloud Stream</h2><p>​    官方定义<code>Spring Cloud Stream</code>是一个<strong>构建消息驱动微服务的框架</strong>。</p>
<p>​    应用程序通过inputs或者outputs来与Spring Cloud Stream中binder对象交互。通过我们配置来binding(绑定)而Spring Cloud Stream的binder对象负责与消息中间件交互。所以，我们只需要搞清楚如何与Spring Cloud Stream 交互就可以方便使用消息驱动的方式。</p>
<p>​    通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动。Spring Cloud Stream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了发布-订阅、消费组、分区的三个核心概念。<br><code>目前仅支持RabbitMQ、Kafka.</code></p>
<p> <strong>简单来说：屏蔽底层消息中间件的差异，降低切换的成本。统一消息的模型。</strong></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/1.png" alt="image-20210129141227893"></p>
<p>官方文档：<a href="https://spring.io/projects/spring-cloud-stream#overview">https://spring.io/projects/spring-cloud-stream#overview</a></p>
<p>API：<a href="https://docs.spring.io/spring-cloud-stream/docs/3.1.0/reference/html/">https://docs.spring.io/spring-cloud-stream/docs/3.1.0/reference/html/</a></p>
<p>中文指导手册：<a href="https://m.wang1314.com/doc/webapp/topic/20971999.html">https://m.wang1314.com/doc/webapp/topic/20971999.html</a></p>
<p>​    <code>Spring Cloud Stream</code>是用于构建与共享消息传递系统连接的高度可伸缩的<strong>事件驱动微服务框架</strong>，该框架提供了一个<strong>灵活的编程模型</strong>，它建立在已经建立和熟悉的Spring熟语和最佳实践上，包括支持持久化的发布/门订阅、消费组以及消息分区这三个核心概念。</p>
<h2 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h2><h3 id="标准MQ"><a href="#标准MQ" class="headerlink" title="标准MQ"></a>标准MQ</h3><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/2.png"></p>
<p>标准MQ的设计思想是：</p>
<ol>
<li>消息生产者和消息消费者之间靠<strong>消息媒介</strong>传递消息内容 <code>Message</code></li>
<li>消息必须走特定的<strong>通道</strong> <code>消息通道MessageChannel</code></li>
<li>消息通道里的消息如何被消费呢，谁负责收发<strong>处理</strong><code>消息通道MessageChannel的子接口SubscribableChannel进行接收,由MessageHandler消息处理器进行处理</code></li>
</ol>
<h3 id="Spring-Cloud-Stream"><a href="#Spring-Cloud-Stream" class="headerlink" title="Spring Cloud Stream"></a>Spring Cloud Stream</h3><p>比方说我们用到了RabbitMQ和Kafka,由于这两个消息中间件的架构上的不同,</p>
<p>像RabbitMQ有exchange，kafka有 Topic和Partitions分区,</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/3.png" alt="image-20210129151745803"></p>
<p>​    在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行消息交互的时候，由于各消息中间件构建的初衷不同,它们的实现细节上会有较大的差异性。<code>通过定义绑定器作为中间层</code>，完美地实现了应用程序与消息中间件细节之间的隔离。通过向应用程序暴露统一的Channel通道， 使得应用程序不需要再考虑各种不同的消息中间件实现。</p>
<p>​    <strong>通过定义绑定器Binder作为中间层，实现了应用程序与消息中间件细节之间的隔离。</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/4.png" alt="image-20210129153405754"></p>
<p>​    <strong>Binder是什么</strong></p>
<p>​    在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行消息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性.<strong>通过定义绑定器作为中间层</strong>，<code>完美地实现了应用程序与消息中间件细节之间的隔离</code>。Stream对消息中间件的进一步封装.可以做到代码层面对中间件的无感知，甚至于动态的切换中间件(rabbitmq切换为kafka),使得微服务开发的高度解耦，服务可以关注更多自己的业务流程。</p>
<p>​    <strong>INPUT对应于消费者</strong></p>
<p>​    <strong>OUTPUT对应于生产者</strong></p>
<p>​    <strong>Spring Cloud Stream架构图</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/5.png" alt="image-20210129154637218"></p>
<p>​    Spring Cloud Stream中的消息通信方式遵循了发布-订阅模式，通过Topic主题进行广播。在RabbitMQ就是Exchange，在Kafka中就是Topic。</p>
<h2 id="Spring-Cloud-Stream标准流程套路"><a href="#Spring-Cloud-Stream标准流程套路" class="headerlink" title="Spring Cloud Stream标准流程套路"></a>Spring Cloud Stream标准流程套路</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/6.png" alt="image-20210129155258982"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/7.png" alt="image-20210129155503972"></p>
<p><code>Binder</code>：很方便的连接中间件，屏蔽差异。</p>
<p><code>Channel</code>：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过对Channel对队列进行配置</p>
<p><code>Source和Sink</code>：简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入</p>
<h2 id="编码API和常用注解"><a href="#编码API和常用注解" class="headerlink" title="编码API和常用注解"></a>编码API和常用注解</h2><p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/8.png" alt="image-20210129160323533"></p>
<h2 id="案例说明"><a href="#案例说明" class="headerlink" title="案例说明"></a>案例说明</h2><ol>
<li>准备好RabbitMQ环境</li>
<li>工程中新建三个子模块<ul>
<li>cloud-stream-rabbitmq-provider-8801,作为生产者进行发消息模块</li>
<li>cloud-stream-rabbitmq-consumer-8802,作为消息接收模块</li>
<li>cloud-stream-rabbitmq-consumer-8803,作为消息接收模块</li>
</ul>
</li>
</ol>
<h3 id="消息驱动之生产者"><a href="#消息驱动之生产者" class="headerlink" title="消息驱动之生产者"></a>消息驱动之生产者</h3><ol>
<li><p>新建模块cloud-stream-rabbitmq-provider-8801</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--stream rabbit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8801</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-provider</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment">#在此处配置要绑定的rabbitmq的服务消息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment">#表示定义的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment">#消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment">#设置rabbitmq的相关环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span>  <span class="comment">#RabbitMQ在本机的用localhost，在服务器的用服务器的ip地址</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment">#这个名字是一个通道的名称,说明是消息生产者</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称定义，一个消息主题</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，本文要设置为“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置（爆红不影响使用，位置没错）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment">#设置心跳的时间间隔（默认是30S)</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment">#如果超过5S间隔就注销节点 默认是90s</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span> <span class="comment">#在消息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8801</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8801.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类</p>
<ol>
<li><p>新建service.IMessageProvider接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在service下新建impl.IMessageProviderImpl实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableBinding(Source.class)</span>    <span class="comment">//定义消息的推送管道（Source是spring的）</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageProviderImpl</span> <span class="keyword">implements</span> <span class="title">IMessageProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MessageChannel output;  <span class="comment">//消息发送管道</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String serial = UUID.randomUUID().toString();</span><br><span class="line">        output.send(MessageBuilder.withPayload(serial).build());     <span class="comment">//MessageBuilder是spring的integration.support.MessageBuilder</span></span><br><span class="line">        log.info(<span class="string">&quot;*********serial: &quot;</span>+serial);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建controller.SendMessageController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IMessageProvider iMessageProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iMessageProvider.send();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>测试，启动7001，RabbitMQ，8801</p>
<p>查看RabbitMQ后台可以看到新定义的交换机（即消息主题）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/9.png" alt="image-20210130174508338"></p>
<p>然后在浏览器输入：<code>http://localhost:8801/sendMessage</code>，多次刷新</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/10.png" alt="image-20210130174633636"></p>
<p>查看RabbitMQ后台</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/11.png" alt="image-20210130174834935"></p>
</li>
</ol>
<h3 id="消息驱动之消费者"><a href="#消息驱动之消费者" class="headerlink" title="消息驱动之消费者"></a>消息驱动之消费者</h3><ol>
<li><p>新建模块cloud-stream-rabbitmq-provider-8801</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--stream rabbit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8802</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-stream-consumer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">binders:</span> <span class="comment">#在此处配置要绑定的rabbitmq的服务消息</span></span><br><span class="line">        <span class="attr">defaultRabbit:</span> <span class="comment">#表示定义的名称，用于binding整合</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">rabbit</span> <span class="comment">#消息组件类型</span></span><br><span class="line">          <span class="attr">environment:</span> <span class="comment">#设置rabbitmq的相关环境配置</span></span><br><span class="line">            <span class="attr">spring:</span></span><br><span class="line">              <span class="attr">rabbitmq:</span></span><br><span class="line">                <span class="attr">host:</span> <span class="string">localhost</span>  <span class="comment">#RabbitMQ在本机的用localhost，在服务器的用服务器的ip地址</span></span><br><span class="line">                <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">                <span class="attr">username:</span> <span class="string">guest</span></span><br><span class="line">                <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">        <span class="attr">output:</span> <span class="comment">#这个名字是一个通道的名称,说明是消息生产者</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称定义，一个消息主题</span></span><br><span class="line">          <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，本文要设置为“text/plain”</span></span><br><span class="line">          <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置（爆红不影响使用，位置没错）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">2</span> <span class="comment">#设置心跳的时间间隔（默认是30S)</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">5</span> <span class="comment">#如果超过5S间隔就注销节点 默认是90s</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">send-8801.com</span> <span class="comment">#在消息列表时显示主机名称</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span> <span class="comment">#访问的路径变为IP地址</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamMQMain8802</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(StreamMQMain8802.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>业务类，新建controller.ReceiveMessageListenerController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding(Sink.class)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReceiveMessageListenerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line">    </span><br><span class="line"> 	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@StreamListener</span> 注解会监听通道中的消息 ，一旦有消息进入通道就会调用方法进行处理。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@StreamListener(Sink.INPUT)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;消费者1号，-----&gt;接受到的消息：&quot;</span>+message.getPayload()+<span class="string">&quot;\t port&quot;</span>+ serverPort);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试，启动8802</p>
<ol>
<li><p>在浏览器中<code>http://localhost:8801/sendMessage</code>（8801发送消息）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/12.png" alt="image-20210130180200676"></p>
</li>
<li><p>8802接收到的消息：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/13.png" alt="image-20210130180254845"></p>
</li>
</ol>
</li>
</ol>
<h2 id="分组消费与持久化"><a href="#分组消费与持久化" class="headerlink" title="分组消费与持久化"></a>分组消费与持久化</h2><ol>
<li><p>依照8802，clone出来一份运行8803</p>
</li>
<li><p>启动8803</p>
</li>
<li><p>进行测试</p>
<ol>
<li><p>在浏览器中<code>http://localhost:8801/sendMessage</code>（8801发送消息）</p>
</li>
<li><p>查看8802和8803的后台</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/14.png" alt="image-20210130180933139"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/15.png" alt="image-20210130180953371"></p>
</li>
</ol>
</li>
</ol>
<p>​    通过测试可以发现，当8801发送消息之后，8802和8803都消费了消息。也就是出现<strong>重复消费</strong>的情况。但是在一些的业务场景下。应该避免重复消费的出现。比如在如下场景中，订单系统我们做集群部署,都会从RabbitMQ中获取订单消息,那如果一个订单同时被两个服务获取到，那么就会造成数据错误，我们得避免这种情况。<code>这时我们就可以使用Stream中的消息分组来解决</code></p>
<img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/17.png" alt="image-20210130183020016" style="zoom:50%;" />

<p><strong>重复消费出现的原因是什么呢？</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/16.png" alt="image-20210130182259742"></p>
<p>​    这是因为8802和8802不在同一组里面，RabbitMQ会将消息发送给不同组。即给每个组发送一次消息。<strong>只要将8802和8803放在同一个组内，就可以解决重复消费的问题了</strong>。同一个组内的消息消费者会发生竞争关系，只有一个消费者可以消费消息。默认情况下同一组的消息消费者采用<strong>轮询</strong>的方式来决定谁来消费消息。</p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>​    <strong>注意在Stream中处于同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次。不同组是可以消费的(重复消费)，</strong></p>
<h4 id="设置不同分组"><a href="#设置不同分组" class="headerlink" title="设置不同分组"></a>设置不同分组</h4><p>修改8802的yml文件,加入group</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">       <span class="attr">input:</span> <span class="comment">#这个名字是一个通道的名称.表示是消息消费者</span></span><br><span class="line">         <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称定义</span></span><br><span class="line">         <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，本文要设置为“text/plain”</span></span><br><span class="line">         <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置（爆红不影响使用，位置没错）</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">qzh1</span>            <span class="comment"># 指定分组</span></span><br></pre></td></tr></table></figure>

<p>修改8803的yml文件,加入group</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">bindings:</span> <span class="comment">#服务的整合处理</span></span><br><span class="line">       <span class="attr">input:</span> <span class="comment">#这个名字是一个通道的名称.表示是消息消费者</span></span><br><span class="line">         <span class="attr">destination:</span> <span class="string">studyExchange</span> <span class="comment">#表示要使用的Exchange名称定义</span></span><br><span class="line">         <span class="attr">content-type:</span> <span class="string">application/json</span> <span class="comment">#设置消息类型，本次为json，本文要设置为“text/plain”</span></span><br><span class="line">         <span class="attr">binder:</span> <span class="string">defaultRabbit</span> <span class="comment">#设置要绑定的消息服务的具体设置（爆红不影响使用，位置没错）</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">qzh2</span>            <span class="comment"># 指定分组</span></span><br></pre></td></tr></table></figure>

<p>查看RabbitMQ后台：</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/18.png" alt="image-20210130183819465"></p>
<p>进行测试</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/19.png" alt="image-20210130183819465"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/20.png" alt="image-20210130183819465"></p>
<p><strong>结论：</strong></p>
<p>​    虽然进行了分组，但并没有将8802和8803分在同一个分组内，所以还存在<strong>重复消费</strong>的情况。</p>
<p>​    分布式微服务应用为了实现高可用和负载均衡，实际上都会部署多个实例，本例启动了两个消费微服务(8802/8803)多数情况，生产者发送消息给某个具体微服务时只希望被消费一次, 按照上面我们启动两个应用的例子,虽然它们同属一个应用，但是这个消息出现了被重复消费两次的情况。为了解决这个问题，在Spring Cloud Stream中提供了<code>消费组</code>的概念。</p>
<h4 id="设置相同分组"><a href="#设置相同分组" class="headerlink" title="设置相同分组"></a>设置相同分组</h4><p><code>设置相同分组的方法也很简单，只要yml文件中的group值相同即可</code></p>
<ol>
<li><p>8802 yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">group:</span> <span class="string">qzh1</span>            <span class="comment"># 指定分组</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>8803 yml文件</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">group:</span> <span class="string">qzh1</span>            <span class="comment"># 指定分组</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>测试</p>
<ol>
<li><p>在浏览器中<code>http://localhost:8801/sendMessage</code>（8801发送消息）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/21.png" alt="image-20210130185516666"></p>
</li>
<li><p>查看8802和8803的后台</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/22.png" alt="image-20210130185619109"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/23.png" alt="image-20210130185648676"></p>
</li>
<li><p>查看RabbitMQ后台</p>
<ul>
<li>qzh1分组</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/24.png" alt="image-20210130190831071"></p>
<ul>
<li>qzh2分组</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/25.png" alt="image-20210130190926459"></p>
</li>
</ol>
<p><strong>结论：</strong>可以发现重复消费的情况解决了。<code>同一个组的多个微服务实例，每次只会有一个拿到</code>。</p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>​    持久化指的是，消费者组订阅是持久的。也就是说，binder实现确保组订阅是持久的，一旦一个组中创建了一个订阅，就算这个组里边的所有应用都挂掉了,这个组也会受到消息。匿名者组订阅是不持久的。</p>
<p>​    <code>简单来说，就是一旦指定了group属性。就算是这个分组内的所有微服务实例都挂了，在恢复正常状态后就能接收到消息。但是如果没有指定group属性，则无法接收到消息。因为binder会保存发送给分组的消息</code></p>
<p>​    <strong>指定group属性的话 就自动支持持久化了。</strong></p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ol>
<li><p>停掉8802和8803，去掉8803的<code>group: qzh1</code>。</p>
</li>
<li><p>在浏览器中<code>http://localhost:8801/sendMessage</code>（8801发送消息）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/26.png" alt="image-20210130191828273"></p>
</li>
<li><p>启动8802，有分组属性配置，后台有消息</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/27.png" alt="image-20210130192023106"></p>
</li>
<li><p>启动8803，无分组属性配置，后台没有消息</p>
</li>
</ol>
<h1 id="Spring-Cloud-Sleuth分布式请求链路追踪"><a href="#Spring-Cloud-Sleuth分布式请求链路追踪" class="headerlink" title="Spring Cloud Sleuth分布式请求链路追踪"></a>Spring Cloud Sleuth分布式请求链路追踪</h1><p>​    在微服务框架中，一个客户端发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后的请求结果，每一个前端请求都会形成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p>
<p>​    SpringCloud Sleuth 提供了一套完整的服务跟踪的解决方案，在分布式系统中提供追踪解决方案并且兼容支持了zipkin。<code>Spring Cloud Sleuth 是分布式系统中跟踪服务间调用的工具，它可以直观地展示出一次请求的调用过程，</code></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/28.png" alt="image-20210130193255301"></p>
<p>官方文档：<a href="https://cloud.spring.io/spring-cloud-sleuth/reference/html/">https://cloud.spring.io/spring-cloud-sleuth/reference/html/</a></p>
<h2 id="搭建链路监控"><a href="#搭建链路监控" class="headerlink" title="搭建链路监控"></a>搭建链路监控</h2><h3 id="下载Zipkin"><a href="#下载Zipkin" class="headerlink" title="下载Zipkin"></a>下载Zipkin</h3><p>​    Zipkin是一个 开放源代码分布式的跟踪系统，每个服务向zipkin报告计时数据，zipkin会根据调用<br>关系通过Zipkin U性成依赖关系图。Zipkin提供了可插拔数据存储方式: In-Memory、 MySq|. Cassandra以及Elasticsearch。 为了方便在开发环境我直接采用了In-Memory方式进行存储，生产数据量大的情况则推荐使用<br>Elasticsearch。</p>
<p>​    下载jar包：<a href="http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">http://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/29.png" alt="image-20210130194016407"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/30.png" alt="image-20210130194032511"></p>
<p>下载完后，终端jar包的目录里，然后输入：<code>java -jar zipkin-server-2.12.9-exec.jar</code>运行。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/31.png" alt="image-20210130194223933"><br>浏览器输入：<code>http://localhost:9411/zipkin/</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/32.png" alt="image-20210130194350594"></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>下面通过一张图来看一下一个简单的微服务调用链：</p>
<p>​    <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/33.png" alt="image-20210130194643707"></p>
<p>一条链路通过Trace ld唯-标识，Span标识发起的请求信息，各span通过parent id关联起来</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/34.png" alt="image-20210130194738001"></p>
<p>整个链路的依赖关系如下:</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/35.png" alt="image-20210130194824060"></p>
<h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p><strong>服务提供者cloud-provider-payment8001</strong></p>
<ol>
<li><p>在pom中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line"><span class="attr">sleuth:</span></span><br><span class="line">  <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">probability:</span> <span class="number">1</span>  <span class="comment">#采样率。值介于0到1之间，1则表示全部采集（一般不为1，不然对性能会有影响）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在PaymentController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;paymentZipkin...&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>服务消费者cloud-consumer-order80</strong></p>
<ol>
<li><p>在pom中添加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--包含了sleuth+zipkin--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在yml中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">zipkin:</span></span><br><span class="line">  <span class="attr">base-url:</span> <span class="string">http://localhost:9411</span></span><br><span class="line"><span class="attr">sleuth:</span></span><br><span class="line">  <span class="attr">sampler:</span></span><br><span class="line">    <span class="attr">probability:</span> <span class="number">1</span>  <span class="comment">#采样率。值介于0到1之间，1则表示全部采集（一般不为1，不然对性能会有影响）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在OrderController中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/consumer/payment/zipkin&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentZipkin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String result = restTemplate.getForObject(<span class="string">&quot;http://localhost:8001&quot;</span> + <span class="string">&quot;/payment/zipkin&quot;</span>, String.class);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>测试</strong></p>
<ol>
<li><p>浏览器输入：<code>http://localhost/consumer/payment/zipkin</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/36.png" alt="image-20210130195535506"></p>
</li>
<li><p>查看请求链路</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/37.png" alt="image-20210130195920013"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/38.png" alt="image-20210130195952624"></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud09/39.png" alt="image-20210130200019914"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud学习笔记06---服务熔断Hystrix</title>
    <url>/HuaStarOS.github.io/2021/01/10/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B006-%E6%9C%8D%E5%8A%A1%E7%86%94%E6%96%ADHystrix/</url>
    <content><![CDATA[<h1 id="Hystrix-断路器"><a href="#Hystrix-断路器" class="headerlink" title="Hystrix: 断路器"></a>Hystrix: 断路器</h1><h2 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h2><p>​    <strong><code>复杂分布式体系结构中的应用程序有数十个依赖更新，每个依赖关系在某些时候将不可避免地失败！</code></strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/1.png" alt="image-20210110152551919"></p>
<h3 id="服务雪崩"><a href="#服务雪崩" class="headerlink" title="服务雪崩"></a>服务雪崩</h3><p>​    多个微服务之间调用的时候，假设微服务A调用微服务B和微服务C，微服务B和微服务C又调用其他的微服务，这就是所谓的<strong>“扇出”</strong>，如果扇出的链路上<strong>某个微服务的调用响应时间过长，或者不可用</strong>，那么对微服务A的调用就会占用越来越多的系统资源，因为微服务A一直在等待其他微服务的结果。进而引起系统崩溃，所谓的<strong>“雪崩效应”</strong></p>
<p>​    对于高流量的应用来说，单一的后端依赖可能会导致所有服务器上的所有资源都在几秒钟内饱和。比失败更糟糕的是，这些应用程序还可能导致服务之间的延迟增加，备份队列，线程和其他系统资源紧张，导致整个系统发生更多的级联故障。<strong>这些都表示需要对故障和延迟进行隔离和管理，以达到单个依赖关系的失败而不影响整个应用程序或系统运行</strong>。</p>
<p>​    所以,通常当你发现一个模块下的某个实例失败后，这时候这个模块依然还会接收流量，然后这个有问题的模块还调用了其他的模块，这样就会发生级联故障，或者叫雪崩。</p>
<h2 id="什么是Hystrix"><a href="#什么是Hystrix" class="headerlink" title="什么是Hystrix?"></a>什么是Hystrix?</h2><p>​    <strong>Hystrix</strong>是一个应用于处理分布式系统的延迟和容错的开源库，在分布式系统里，许多依赖不可避免的会调用失败，比如超时，异常等，<strong>Hystrix</strong><code> 能够保证在一个依赖出问题的情况下，不会导致整个体系服务失败，避免级联故障，以提高分布式系统的弹性。</code></p>
<p>​    “<strong>断路器</strong>”本身是一种开关装置，当某个服务单元发生故障之后，通过断路器的故障监控 (类似熔断保险丝) ，<strong>向调用方返回一个服务预期的，可处理的备选响应 (FallBack) ，而不是长时间的等待或者抛出调用方法无法处理的异常，这样就可以保证了服务调用方的线程不会被长时间，不必要的占用</strong>，从而避免了故障在分布式系统中的蔓延，乃至雪崩。</p>
<p>​    功能： <strong>服务降级</strong>，<strong>服务熔断</strong>，<strong>接近实时的监控</strong>，限流，隔离等。</p>
<p>​    <strong>官网资料</strong>：<a href="https://github.com/Netflix/Hystrix/wiki">https://github.com/Netflix/Hystrix/wiki</a></p>
<h2 id="Hystrix重要概念"><a href="#Hystrix重要概念" class="headerlink" title="Hystrix重要概念"></a>Hystrix重要概念</h2><h3 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h3><p>​    提供者和消费者都可以进行服务降级。（一般都是放在客户端（消费者））</p>
<p>​    <strong>服务降级</strong>是从整个系统的负荷情况出发和考虑的，对某些负荷会比较高的情况，为了预防某些功能（业务场景）出现负荷过载或者响应慢的情况，<strong>保证核心交易正常运作或高效运作</strong>（弃车保帅）。<strong>在其内部暂时舍弃对一些非核心的接口和数据的请求，而是直接返回一个提前准备好的fallback（退路）错误处理信息。</strong>这样，虽然提供的是一个有损的服务，但却保证了整个系统的稳定性和可用性。</p>
<p>​    简单来说：服务器负荷过载或者响应慢，导致服务不可用了，请稍后再试，不让客户端盲目等待占用资源并立刻返回一个友好提示—<code>fallback(一个提前准备好的错误处理信息)</code></p>
<p>​    如果还是不理解，那么可以举个例子：假如目前有很多人想要给我付钱，但我的服务器除了正在运行支付的服务之外，还有一些其它的服务在运行，比如搜索、定时任务和详情等等。然而这些不重要的服务就占用了JVM的不少内存与CPU资源，为了能把钱都收下来（钱才是目标），当调用不重要的服务直接返回一个友好提示（<strong>fallback</strong>），这样处理后的后端处理收钱的服务就有更多的资源来收钱了（收钱速度更快了），这就是一个简单的服务降级的使用场景。</p>
<p>​    <strong>哪些情况会出现服务降级</strong></p>
<ul>
<li><p>程序运行异常</p>
</li>
<li><p>超时</p>
</li>
<li><p>服务熔断触发服务降级</p>
</li>
<li><p>线程池/信号量用完了（没有资源可以使用了）也会导致服务降级</p>
<p>………</p>
</li>
</ul>
<h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>​    <strong>熔断机制是阻止雪崩效应的一种微服务链路保护机制</strong>。</p>
<p>​    当扇出链路的某个微服务不可用或者响应时间太长时，会进行服务的降级，<strong>进而熔断该节点微服务的调用，快速返回错误的响应信息</strong>。检测到该节点微服务调用响应正常后恢复调用链路。在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，默认情况下当失败的调用到一定阀值缺省是<strong>5秒内20次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：<code>@HystrixCommand</code>。</p>
<p>​    服务熔断解决如下问题：</p>
<ul>
<li>当所依赖的对象不稳定时，能够起到快速失败的目的；</li>
<li>快速失败后，能够根据一定的算法动态试探所依赖对象是否恢复</li>
</ul>
<p>​    流程步骤</p>
<ul>
<li>​    <strong>服务的降级 –&gt; 进而熔断 –&gt; 恢复调用链路</strong></li>
</ul>
<h3 id="服务限流"><a href="#服务限流" class="headerlink" title="服务限流"></a>服务限流</h3><p>​    服务限流其实是指当系统资源不够，不足以应对大量请求，即系统资源与访问量出现矛盾的时候，我们为了保证有限的资源能够正常服务，因此对系统按照预设的规则进行流量限制或功能限制的一种方法。</p>
<p>简单来说：禁止大量请求一起过来，大家排队，一秒钟通过N个请求，有序进行</p>
<h2 id="Hystrix使用"><a href="#Hystrix使用" class="headerlink" title="Hystrix使用"></a>Hystrix使用</h2><h3 id="构建工程"><a href="#构建工程" class="headerlink" title="构建工程"></a>构建工程</h3><h4 id="构建提供者8001项目"><a href="#构建提供者8001项目" class="headerlink" title="构建提供者8001项目"></a>构建提供者8001项目</h4><p>把注册中心7001，切换改为单机版，方便测试。</p>
<ol>
<li><p>新建项目cloud-provider-hystrix-payment8001</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">&lt;!-- hystrix--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">       <span class="comment">&lt;!-- 引用自己定义的api通用包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--   一个Java工具包     --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8001</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">cloud-provider-hystrix-payment</span></span><br><span class="line">	</span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="comment">#单机版</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line">      <span class="comment">#集群版</span></span><br><span class="line">      <span class="comment">#defaultZone: http://eureka7001.com:7001/eureka,http://eureka7002.com:7002/eureka</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正常访问方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;\tpaymentInfo_OK，id：&quot;</span> + id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//超时访问方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; paymentInfo_TimeOut , id&quot;</span> + id + <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;**********info&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;**********info&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<p>先启动7001，在启动8001</p>
<p><code>http://localhost:8001/payment/hystrix/ok/31</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/2.png" alt="image-20210110162732485"></p>
<p><code>http://localhost:8001/payment/hystrix/timeout/33</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/3.png" alt="image-20210110162813630"></p>
</li>
</ol>
<p>在此项目基础上，从正确 -&gt; 错误 -&gt; 降级熔断 -&gt; 恢复</p>
</li>
</ol>
<h4 id="高并发测试"><a href="#高并发测试" class="headerlink" title="高并发测试"></a>高并发测试</h4><ul>
<li><p><strong>安装JMeter</strong></p>
<p>JMeter下载地址：<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/4.png" alt="image-20210110163609506"></p>
</li>
<li><p>进入解压后的目录的bin目录，找到jmeter.properties文件，修改语言zh_CN。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/5.png" alt="image-20210110164136124"></p>
</li>
<li><p>在bin目录下，双击<code>jmeter.bat</code>运行</p>
<p>修改成中文</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/6.png" alt="image-20210110164359140"></p>
<p><strong>进行高并发测试</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/7.png" alt="image-20210110164708249"></p>
<p>然后去访问<code>http://localhost:8001/payment/hystrix/ok/1</code>，访问速度变慢了。</p>
<p><strong>JMeter压测结论</strong></p>
<p>上面还是服务提供者8001自己测试，假如此时外部的消费者80也来访问,那消费者只能干等，最终导致消费端80不满意，服务端8001直接被拖死</p>
</li>
</ul>
<h4 id="构建消费者80项目"><a href="#构建消费者80项目" class="headerlink" title="构建消费者80项目"></a>构建消费者80项目</h4><ol>
<li><p>新建cloud-consumer-feign-hystrix-order80</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- openfeign --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   hystrix     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--eureka client--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用自己定义的api通用包，可以使用Payment支付Entity --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:7001/eureka</span></span><br><span class="line"><span class="comment">#需要加上，否则会报错</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">4000</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">4000</span>      </span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>写业务</p>
<ol>
<li><p>service</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-provide-hystrix-payment&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> PaymentService paymentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serverPort;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_OK(id);</span><br><span class="line">        log.info(<span class="string">&quot;**********info&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">        String result = paymentService.paymentInfo_TimeOut(id);</span><br><span class="line">        log.info(<span class="string">&quot;**********info&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>启动80，进行测试</p>
<p>在浏览器中输入<code>http://localhost/consumer/payment/hystrix/ok/31</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/8.png" alt="image-20210110170518852"></p>
</li>
<li><p>启动JMeter,然后再进行测试，可以发现不是在转圈圈等待就是超时报错</p>
</li>
</ol>
<h4 id="故障现象、导致原因以及解决"><a href="#故障现象、导致原因以及解决" class="headerlink" title="故障现象、导致原因以及解决"></a>故障现象、导致原因以及解决</h4><ul>
<li><p>现象</p>
<p>当有大量请求访问8001的接口服务的时候，同一层次的其他接口服务会响应缓慢，因为tomcat线程池里面的工作线程已经被挤占完毕，导致80调用8001时，响应缓慢，在转圈圈</p>
</li>
<li><p>解决</p>
<p><strong>正是因为有故障现象，才有服务降级/熔断/限流等技术诞生。</strong></p>
<p>解决方案：<strong>服务降级</strong></p>
<ol>
<li>超时导致服务变慢———&gt;则超时不再等待，直接返回fallback</li>
<li>出错(宕机或者程序运行出错)———-&gt; 出错要有兜底(falback)</li>
</ol>
<p><code>对方服务（8001）超时了，调用者（80）不能一直等待，必须要服务降级。</code></p>
<p><code>对方服务（8001）down机了，调用者（80）不能一直等待，必须要服务降级。</code></p>
<p><code>对方服务（8001）OK,调用者（80）自己出故障或者有自我要求（自己的等待时间小于服务提供者的等待时间）自己处理降级。</code></p>
</li>
</ul>
<h3 id="服务降级-1"><a href="#服务降级-1" class="headerlink" title="服务降级"></a>服务降级</h3><p>​    服务降级需要使用到<code>@HystrixCommand</code>注解。</p>
<h4 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h4><p>​    给服务提供者8001的服务设置调用超时的峰值，峰值内可以正常运作，超时了需要有兜底的方法处理，作为服务降级的fallback</p>
<ol>
<li><p>然后在8001的主启动类上添加<code>@EnableCircuitBreaker</code>注解，启用断路器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//是否开启断路器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li><p>修改8001中PaymentService的<code>paymentInfo_TimeOut</code>方法，并添加<code>paymentInfo_TimeOutHandler</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(</span></span><br><span class="line"><span class="meta">    //fallbackMethod 指定服务降级，兜底的方法</span></span><br><span class="line"><span class="meta">    fallbackMethod = &quot;paymentInfo_TimeOutHandler&quot;, commandProperties = &#123;</span></span><br><span class="line"><span class="meta"> //设置自身超时调用时间的峰值为3秒，峰值内可以正常运行，超过了就调用fallbackMethod指定的方法</span></span><br><span class="line"><span class="meta">@HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;4000&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeNumber = <span class="number">3000</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.MILLISECONDS.sleep(timeNumber);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; paymentInfo_TimeOut , id&quot;</span> + id + <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutHandler</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程池&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 系统繁忙，请稍后再试 , id&quot;</span> + id + <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动7001和8001，测试8001的fallback，<code>http://localhost/consumer/payment/hystrix/ok/31</code>成功进入fallback方法。（并且fallback方法是用Hystrix的线程池）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/9.png" alt="image-20210110212644980"></p>
</li>
<li><p>去掉sleep,添加<code>int age = 10/0</code>，模拟运行错误。<code>http://localhost/consumer/payment/hystrix/ok/31</code>也可以进入fallback方法。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/9.png" alt="image-20210110212644980"></p>
</li>
</ol>
<p><strong>总结：</strong></p>
<p>​    <strong>一旦调用服务方法失败或者超时，抛出了错误信息后会自动调用@HystrixCommand标注好的fallbackMethod调用类中的指定方法</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/10.png" alt="image-20210110213632461"></p>
<p>​    <strong>fallback方法一定要和<code>@HystrixCommand</code>在同一个类里面</strong>，通过源代码可以发现</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/14.png" alt="image-20210110222744091"></p>
<h4 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h4><ol>
<li><p>在80的yml中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类添加<code>@EnableHystrix</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrix</span> <span class="comment">//启动Hystrix功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixMain80</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(OrderHystrixMain80.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改OrderHystrixController的paymentInfo_TimeOut方法，并添加paymentTimeOutFallbackMethod方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentInfo_TimeOutFallbackMethod&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;,value = &quot;1500&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//int age = 10 / 0;</span></span><br><span class="line">        String result = service.paymentInfo_TimeOut(id);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOutFallbackMethod</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是服务消费者80，对方支付系统繁忙请10秒钟后再试一下或者系统出错&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>http://localhost/consumer/payment/hystrix/timeout/1</code>（如果提供者和消费者都设置了服务降级，会优先进入消费者的fallback）</p>
</li>
</ol>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/11.png" alt="image-20210110215140939"></p>
<p>​    添加<code>int age = 10/0</code>,模拟运行异常</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/11.png" alt="image-20210110215140939"></p>
<h3 id="目前的问题和解决方法"><a href="#目前的问题和解决方法" class="headerlink" title="目前的问题和解决方法"></a>目前的问题和解决方法</h3><p><strong>目前的问题：</strong></p>
<ol>
<li>每个业务方法对应一个兜底的方法，代码膨胀。要把统一和自定义的分开</li>
<li>兜底方法和业务逻辑混在一起，代码混乱</li>
</ol>
<h4 id="代码膨胀的解决方法"><a href="#代码膨胀的解决方法" class="headerlink" title="代码膨胀的解决方法"></a>代码膨胀的解决方法</h4><p><strong>解决方法：设置全局fallback方法</strong></p>
<ol>
<li><p>在80的<code>OrderHystrixController</code>中添加全局fallback方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局fallback方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">payment_Global_FallbackMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Global异常处理信息，请稍后再试&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>并在<code>OrderHystrixController</code>类上加上<code>@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</code>，设置全局fallback方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@DefaultProperties(defaultFallback = &quot;payment_Global_FallbackMethod&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHystrixController</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    ....   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加一个<code>paymentInfo_TimeOut2</code>方法测试全局fallback方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@GetMapping(&quot;/consumer/payment/hystrix/timeout2/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="comment">//没有指定fallback就使用全局fallback方法</span></span><br><span class="line">   <span class="meta">@HystrixCommand</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut2</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//int age = 10 / 0;</span></span><br><span class="line">       String result = service.paymentInfo_TimeOut(id);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>进行测试，在浏览器中输入<code>http://localhost/consumer/payment/hystrix/timeout2/33</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/12.png" alt="image-20210110221841156"></p>
</li>
<li><p><strong>总结</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/13.png" alt="image-20210110222237789"></p>
</li>
</ol>
<h4 id="代码混乱的解决方法"><a href="#代码混乱的解决方法" class="headerlink" title="代码混乱的解决方法"></a>代码混乱的解决方法</h4><p><strong>解决方法</strong>：<strong>在重新新建一个类（<code>PaymentHystrixServiceImpl</code>）实现<code>feign</code>（<code>PaymentHystrixService</code>）接口,<code>统一为接口里面的方法定义对应的fallback方法</code></strong></p>
<ol>
<li><p>在80的<code>service</code>包下新建<code>PaymentFallbackServiceImpl</code>类，实现<code>PaymentHystrixService</code>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 统一为接口里面的方法定义对应的fallback方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixServiceImpl</span> <span class="keyword">implements</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----------PaymentHystrixServiceImpl fall back-----paymentInfo_OK   出错&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-----------PaymentHystrixServiceImpl fall back-----paymentInfo_TimeOut   出错&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要在yml中加上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">hystrix:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>然后给PaymentHystrixService接口的@FeignClient注解加上<code>fallback = PaymentFallbackService.class</code>属性，用于出错时进行fallback处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;cloud-provide-hystrix-payment&quot;,fallback = PaymentHystrixServiceImpl.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PaymentHystrixService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/ok/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_OK</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/payment/hystrix/timeout/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentInfo_TimeOut</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器中<code>http://localhost/consumer/payment/hystrix/ok/31</code> , 成功访问</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/15.png" alt="image-20210110223731255"></p>
</li>
<li><p>关掉8001，模拟提供者宕机，刷新一下</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/16.png" alt="image-20210110224001713"></p>
</li>
</ol>
<h3 id="服务熔断-1"><a href="#服务熔断-1" class="headerlink" title="服务熔断"></a>服务熔断</h3><p>​    在SpringCloud框架里熔断机制通过Hystrix实现。Hystrix会监控微服务间调用的状况，默认情况下当失败的调用到一定阀值缺省是<strong>5秒内20次调用失败，就会启动熔断机制</strong>。熔断机制的注解是：<code>@HystrixCommand</code>。</p>
<h4 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h4><ol>
<li><p>在8001的PaymentService中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">@HystrixProperty(name =&quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),//是否开启断路器</span></span><br><span class="line"><span class="meta">@HystrixProperty(name =&quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),//请求次数</span></span><br><span class="line"><span class="meta">@HystrixProperty(name =&quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),//时间窗口期</span></span><br><span class="line"><span class="meta">@HystrixProperty(name =&quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),//失败率达到多少后开启断路器 60---是指60%</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (id &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;*******id不能为负数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String serialNumber = IdUtil.simpleUUID();</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;调用成功，流水号&quot;</span> + serialNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//fallback方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker_fallback</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;id 不能为负数，请稍后再试&quot;</span> + <span class="string">&quot;id&quot;</span>+id;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在8001的PaymentController中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/payment/circuit/&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">       String result = paymentService.paymentCircuitBreaker(id);</span><br><span class="line">       log.info(<span class="string">&quot;*****result: &quot;</span> + result);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在主启动类上加上<code>@EnableCircuitBreaker</code>注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableCircuitBreaker</span> <span class="comment">//是否开启断路器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentHystrixMain8001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(PaymentHystrixMain8001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在浏览器输入</p>
<p><code>http://localhost:8001/payment/circuit/11</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/17.png" alt="image-20210110225124662"></p>
<p><code>http://localhost:8001/payment/circuit/-11</code>（输入超过6次进入熔断）</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/18.png" alt="image-20210110225343472"></p>
<p>熔断10秒内就算是正确的请求也返回错误信息。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/19.png" alt="image-20210110225632681"></p>
<p>10秒后进入半开模式，会让一次请求通过，此时如果是正确的请求，那么就关闭熔断，否则再次进入熔断，10秒后再次开启半开模式，会让一次请求通过，直到半开模式处理到正确请求。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/20.png" alt="image-20210110225825248"></p>
</li>
</ol>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>大师论文：</strong><a href="https://martinfowler.com/bliki/CircuitBreaker.html">https://martinfowler.com/bliki/CircuitBreaker.html</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/21.png" alt="image-20210110230205890"></p>
<p><strong>总结</strong>：如果请求次数的错误率超过指定值，开启熔断，经过一段时间后，变为半开模式，然后放进一个请求进行处理，如果请求处理成功，关闭熔断；如果还是报错，继续进入熔断，再经过一段时间后，变为半开模式，再进行对下一个请求进行处理，一直在熔断，半开模式来回切换，直到请求成功，关闭熔断。</p>
<p>​    <strong>熔断类型</strong></p>
<p>​    熔断打开：请求不再进行调用当前服务，内部设罩时钟一般为MTTR（平均故障处理时间)，当打开时长达到所设时钟则进入半熔断状态熔断关闭。</p>
<p>   熔断关闭：不会对服务进行熔断。</p>
<p>   熔断半开：部分请求根据规则调用当前服务，如果请求成功目符合规则则认为当前服务恢复正常，关闭熔断。</p>
<p>​    <strong>官网步骤：</strong><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/22.png" alt="image-20210110235007719"></p>
<p>断路器在什么情况下开始起作用：</p>
<p><strong>官方文档：</strong><a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/23.png" alt="image-20210110235357330"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@HystrixCommand(fallbackMethod = &quot;paymentCircuitBreaker_fallback&quot;,commandProperties = &#123;</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;circuitBreaker.enabled&quot;,value = &quot;true&quot;),//是否开启断路器</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;10&quot;),//请求次数，如果请求次数超过了请求总数阀值，熔断器将会开启</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;circuitBreaker.sleepWindowInMilliseconds&quot;,value = &quot;10000&quot;),//时间窗口期</span></span><br><span class="line"><span class="meta">            @HystrixProperty(name =&quot;circuitBreaker.errorThresholdPercentage&quot;,value = &quot;60&quot;),//失败率达到多少后开启熔断器 60---是指60%</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">paymentCircuitBreaker</span><span class="params">(Integer id)</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<p><strong>涉及到断路器的三个重要参数： 快照时间窗、请求总数阀值、错误百分比阀值。</strong></p>
<ol>
<li><p><strong>快照时间窗</strong>：断路器确定是否打开需要统计一些请求和错误数据，而统计的时间范围就是快照时间窗，默认为最近的10秒。</p>
</li>
<li><p><strong>请求总数阀值</strong>：在快照时间窗内，<strong>必须满足请求总数阀值才有资格熔断</strong>。默认为20，意味着在10秒内，如果该<strong>hystrix命令的调用次数不足20次,即使所有的请求都超时或其他原因失败，断路器都不会打开</strong>。如果请求次数超过了<strong>请求总数阀值</strong>，<strong>熔断器将会开启</strong></p>
</li>
<li><p><strong>错误百分比阀值</strong>：当请求总数在快照时间窗内超过了阀值，比如发生了30次调用，如果在这30次调用中，有15次发生了超时异常，也就是超过50%的错误百分比，在默认设定50%阀值情况下，这时候就会将断路器打开。</p>
</li>
</ol>
<p><strong>断路器开启或关闭的条件：</strong></p>
<ol>
<li>当满足一定的阀值的时候（默认10秒内超过20个请求次数）</li>
<li>当失败率达到一定的时候（默认10秒内超过50%的请求失败）</li>
<li>到达以上阀值，断路器将会开启</li>
<li>当开启的时候，所有请求都不会进行转发</li>
<li>一段时间之后（默认是5秒），这个时候断路器是半开状态，会让其中一个请求进行转发。</li>
<li>如果成功，断路器会关闭，若失败，继续开启。重复4和5</li>
</ol>
<p><strong>断路器打开之后：</strong></p>
<ol>
<li><p><strong>再有请求调用的时候，将不会调用主逻辑，而是直接调用降级fallback</strong>，通过断路器，实现了自动地发现错误并将降级逻辑切换为主逻辑，减少响应延迟的效果。</p>
</li>
<li><p><strong>原来的主逻辑要如何恢复呢？</strong></p>
<p>对于这一问题，hystrix也为我们实现了自动恢复功能。<strong>当断路器打开，对主逻辑进行熔断之后，hystrix会启动一个休眠时间窗，在这个时间窗内，降级逻辑是临时的成为主逻辑，当休眠时间窗到期，断路器将进入半开状态，释放一次请求到原来的主逻辑上，如果此次请求正常返回，那么断路器将继续闭合，主逻辑恢复，如果这次请求依然有问题，断路器继续进入打开状态，休眠时间窗重新计</strong></p>
</li>
</ol>
<h3 id="服务限流-1"><a href="#服务限流-1" class="headerlink" title="服务限流"></a>服务限流</h3><p>​    <strong>会在alibaba的Sentinel补充。</strong></p>
<h3 id="Hystrix工作流程"><a href="#Hystrix工作流程" class="headerlink" title="Hystrix工作流程"></a>Hystrix工作流程</h3><p><strong>官方文档：</strong><a href="https://github.com/Netflix/Hystrix/wiki/How-it-Works">https://github.com/Netflix/Hystrix/wiki/How-it-Works</a></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/29.png" alt="image-20210111031121811"></p>
<p>官方图示例：</p>
<p>  <img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/24.png" alt="image-20210110235942356"></p>
<h3 id="服务监控HystrixDashboard"><a href="#服务监控HystrixDashboard" class="headerlink" title="服务监控HystrixDashboard"></a>服务监控HystrixDashboard</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>​    除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（Hystrix Dashboard），Hystrix会持续地记录所有通过Hystrix发起的请求的执行信息，并以统计报表和图形的形式展示给用户，包括每秒执行多少请求多少成功，多少失败等。Netflix通过hystrix-metrics-event-stream项目实现了对以上指标的监控。Spring Cloud也提供了Hystrix Dashboard的整合，对监控内容转化成可视化界面。</p>
<h4 id="配置Dashboard"><a href="#配置Dashboard" class="headerlink" title="配置Dashboard"></a>配置Dashboard</h4><ol>
<li><p>新建模块cloud-consumer-hystrix-dashboard9001</p>
</li>
<li><p>改pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   hystrix仪表盘图形化     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.angenin.springcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud-api-commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--热部署--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>写yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9001</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>主启动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableHystrixDashboard</span> <span class="comment">//启用Hystrix仪表板</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HystrixDashboard9001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HystrixDashboard9001.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动9001，在浏览器中输入<code>http://localhost:9001/hystrix</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/25.png" alt="image-20210111001402342"></p>
</li>
<li><p>注意：所有微服务提供者都需要在pom中引入监控依赖。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在8001的主启动类中添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 此配置是为了服务监控而配置，与服务容错本身无关，springcloud升级后的坑</span></span><br><span class="line"><span class="comment">   * ServletRegistrationBean因为SpringBoot的默认路径不是 “/hystrix.stream&quot;</span></span><br><span class="line"><span class="comment">   * 只要在自己的项目里配置上下的servlet就可以了</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">getServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      HystrixMetricsStreamServlet streamServlet = <span class="keyword">new</span> HystrixMetricsStreamServlet() ;</span><br><span class="line">      ServletRegistrationBean registrationBean = <span class="keyword">new</span> ServletRegistrationBean(streamServlet);</span><br><span class="line">      registrationBean.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">      registrationBean.addUrlMappings(<span class="string">&quot;/hystrix.stream&quot;</span>);</span><br><span class="line">      registrationBean.setName(<span class="string">&quot;HystrixMetricsStreamServlet&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span>  registrationBean;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h4 id="监控测试"><a href="#监控测试" class="headerlink" title="监控测试"></a>监控测试</h4><ol>
<li><p>9001监控8001</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/26.png" alt="image-20210111030406609"></p>
</li>
<li><p>在浏览器输入<code>http://localhost:8001/payment/circuit/11</code></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/27.png" alt="image-20210111030601126"></p>
<p>多次输入<code>http://localhost:8001/payment/circuit/-11</code>错误的访问。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/28.png" alt="image-20210111030815528"></p>
<p>稍等一会，过了一个时间窗口期，输入正确的访问<code>http://localhost:8001/payment/circuit/11</code>，熔断就会关闭。</p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/30.png" alt="image-20210111031237366"></p>
</li>
</ol>
<h4 id="如何看图"><a href="#如何看图" class="headerlink" title="如何看图"></a>如何看图</h4><ul>
<li><p><strong>7色</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/31.png" alt="image-20210111031844509"></p>
</li>
<li><p><strong>1圈</strong></p>
<p>​    实心圆：共有两种含义。它通过颜色的变化代表了实例的健康程度，它的健康度从绿色、黄色、橙色红、色递减。</p>
<p>​    该实心圆除了颜色的变化之外，它的大小也会根据实例的请求流量发生变化，流量越大该实心圆就越大。所以通过该实心圆的展示，就可以在大量的实例中快速的发现故障实例和高压力实例。</p>
</li>
<li><p><strong>1线</strong></p>
<p>​    曲线：用来记录2分钟内流量的相对变化，可以通过它来观察到流量的上升和下降趋势。</p>
</li>
<li><p><strong>整体说明</strong></p>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/32.png" alt="image-20210111032121738"></p>
</li>
</ul>
<p><img src="https://gitee.com/huastaros/image/raw/main/post/springcloud/springcloud06/33.png" alt="image-20210111032220585"></p>
]]></content>
      <categories>
        <category>技术博客</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>后端框架</tag>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
</search>
